// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inbox.tl.proto

package inbox

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                              TLConstructor = 0
	CRC32_inboxMessageData                     TLConstructor = 1002286548
	CRC32_inbox_sendUserMessageToInbox         TLConstructor = -208741709
	CRC32_inbox_sendChatMessageToInbox         TLConstructor = -1760197438
	CRC32_inbox_sendChannelMessageToInbox      TLConstructor = 2050486614
	CRC32_inbox_sendUserMultiMessageToInbox    TLConstructor = -1782288007
	CRC32_inbox_sendChatMultiMessageToInbox    TLConstructor = -694455924
	CRC32_inbox_sendChannelMultiMessageToInbox TLConstructor = 999414081
	CRC32_inbox_editUserMessageToInbox         TLConstructor = 1559967656
	CRC32_inbox_editChatMessageToInbox         TLConstructor = 2031122959
	CRC32_inbox_editChannelMessageToInbox      TLConstructor = -231965363
	CRC32_inbox_deleteMessagesToInbox          TLConstructor = 1529778436
	CRC32_inbox_deleteChannelMessagesToInbox   TLConstructor = 295332038
	CRC32_inbox_deleteUserHistoryToInbox       TLConstructor = 336232792
	CRC32_inbox_deleteChatHistoryToInbox       TLConstructor = -659905022
	CRC32_inbox_readUserMediaUnreadToInbox     TLConstructor = 1096756266
	CRC32_inbox_readChatMediaUnreadToInbox     TLConstructor = 1800413425
	CRC32_inbox_readChannelMediaUnreadToInbox  TLConstructor = -1476338378
	CRC32_inbox_updateHistoryReaded            TLConstructor = -1010283296
	CRC32_inbox_updatePinnedMessage            TLConstructor = -1452528908
	CRC32_inbox_unpinAllMessages               TLConstructor = 589079137
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	1002286548:  "CRC32_inboxMessageData",
	-208741709:  "CRC32_inbox_sendUserMessageToInbox",
	-1760197438: "CRC32_inbox_sendChatMessageToInbox",
	2050486614:  "CRC32_inbox_sendChannelMessageToInbox",
	-1782288007: "CRC32_inbox_sendUserMultiMessageToInbox",
	-694455924:  "CRC32_inbox_sendChatMultiMessageToInbox",
	999414081:   "CRC32_inbox_sendChannelMultiMessageToInbox",
	1559967656:  "CRC32_inbox_editUserMessageToInbox",
	2031122959:  "CRC32_inbox_editChatMessageToInbox",
	-231965363:  "CRC32_inbox_editChannelMessageToInbox",
	1529778436:  "CRC32_inbox_deleteMessagesToInbox",
	295332038:   "CRC32_inbox_deleteChannelMessagesToInbox",
	336232792:   "CRC32_inbox_deleteUserHistoryToInbox",
	-659905022:  "CRC32_inbox_deleteChatHistoryToInbox",
	1096756266:  "CRC32_inbox_readUserMediaUnreadToInbox",
	1800413425:  "CRC32_inbox_readChatMediaUnreadToInbox",
	-1476338378: "CRC32_inbox_readChannelMediaUnreadToInbox",
	-1010283296: "CRC32_inbox_updateHistoryReaded",
	-1452528908: "CRC32_inbox_updatePinnedMessage",
	589079137:   "CRC32_inbox_unpinAllMessages",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                              0,
	"CRC32_inboxMessageData":                     1002286548,
	"CRC32_inbox_sendUserMessageToInbox":         -208741709,
	"CRC32_inbox_sendChatMessageToInbox":         -1760197438,
	"CRC32_inbox_sendChannelMessageToInbox":      2050486614,
	"CRC32_inbox_sendUserMultiMessageToInbox":    -1782288007,
	"CRC32_inbox_sendChatMultiMessageToInbox":    -694455924,
	"CRC32_inbox_sendChannelMultiMessageToInbox": 999414081,
	"CRC32_inbox_editUserMessageToInbox":         1559967656,
	"CRC32_inbox_editChatMessageToInbox":         2031122959,
	"CRC32_inbox_editChannelMessageToInbox":      -231965363,
	"CRC32_inbox_deleteMessagesToInbox":          1529778436,
	"CRC32_inbox_deleteChannelMessagesToInbox":   295332038,
	"CRC32_inbox_deleteUserHistoryToInbox":       336232792,
	"CRC32_inbox_deleteChatHistoryToInbox":       -659905022,
	"CRC32_inbox_readUserMediaUnreadToInbox":     1096756266,
	"CRC32_inbox_readChatMediaUnreadToInbox":     1800413425,
	"CRC32_inbox_readChannelMediaUnreadToInbox":  -1476338378,
	"CRC32_inbox_updateHistoryReaded":            -1010283296,
	"CRC32_inbox_updatePinnedMessage":            -1452528908,
	"CRC32_inbox_unpinAllMessages":               589079137,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{0}
}

//--------------------------------------------------------------------------------------------
// inboxMessageData random_id:long dialog_message_id:long message:Message = InboxMessageData;
//
// InboxMessageData <--
//  + TL_inboxMessageData
//
type InboxMessageData struct {
	PredicateName        string           `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor    `protobuf:"varint,2,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	RandomId             int64            `protobuf:"varint,3,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	DialogMessageId      int64            `protobuf:"varint,4,opt,name=dialog_message_id,json=dialogMessageId,proto3" json:"dialog_message_id,omitempty"`
	Message              *mtproto.Message `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InboxMessageData) Reset()         { *m = InboxMessageData{} }
func (m *InboxMessageData) String() string { return proto.CompactTextString(m) }
func (*InboxMessageData) ProtoMessage()    {}
func (*InboxMessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{0}
}
func (m *InboxMessageData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboxMessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboxMessageData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboxMessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboxMessageData.Merge(m, src)
}
func (m *InboxMessageData) XXX_Size() int {
	return m.Size()
}
func (m *InboxMessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_InboxMessageData.DiscardUnknown(m)
}

var xxx_messageInfo_InboxMessageData proto.InternalMessageInfo

func (m *InboxMessageData) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *InboxMessageData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *InboxMessageData) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *InboxMessageData) GetDialogMessageId() int64 {
	if m != nil {
		return m.DialogMessageId
	}
	return 0
}

func (m *InboxMessageData) GetMessage() *mtproto.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

// inboxMessageData random_id:long dialog_message_id:long message:Message = InboxMessageData;
type TLInboxMessageData struct {
	Data2                *InboxMessageData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TLInboxMessageData) Reset()         { *m = TLInboxMessageData{} }
func (m *TLInboxMessageData) String() string { return proto.CompactTextString(m) }
func (*TLInboxMessageData) ProtoMessage()    {}
func (*TLInboxMessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{1}
}
func (m *TLInboxMessageData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxMessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxMessageData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxMessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxMessageData.Merge(m, src)
}
func (m *TLInboxMessageData) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxMessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxMessageData.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxMessageData proto.InternalMessageInfo

func (m *TLInboxMessageData) GetData2() *InboxMessageData {
	if m != nil {
		return m.Data2
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.sendUserMessageToInbox from_id:long peer_user_id:long message:InboxMessageData = Void;
type TLInboxSendUserMessageToInbox struct {
	Constructor          TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64             `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerUserId           int64             `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	Message              *InboxMessageData `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TLInboxSendUserMessageToInbox) Reset()         { *m = TLInboxSendUserMessageToInbox{} }
func (m *TLInboxSendUserMessageToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxSendUserMessageToInbox) ProtoMessage()    {}
func (*TLInboxSendUserMessageToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{2}
}
func (m *TLInboxSendUserMessageToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxSendUserMessageToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxSendUserMessageToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxSendUserMessageToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxSendUserMessageToInbox.Merge(m, src)
}
func (m *TLInboxSendUserMessageToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxSendUserMessageToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxSendUserMessageToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxSendUserMessageToInbox proto.InternalMessageInfo

func (m *TLInboxSendUserMessageToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxSendUserMessageToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxSendUserMessageToInbox) GetPeerUserId() int64 {
	if m != nil {
		return m.PeerUserId
	}
	return 0
}

func (m *TLInboxSendUserMessageToInbox) GetMessage() *InboxMessageData {
	if m != nil {
		return m.Message
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.sendChatMessageToInbox from_id:long peer_chat_id:long message:InboxMessageData = Void;
type TLInboxSendChatMessageToInbox struct {
	Constructor          TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64             `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChatId           int64             `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId,proto3" json:"peer_chat_id,omitempty"`
	Message              *InboxMessageData `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TLInboxSendChatMessageToInbox) Reset()         { *m = TLInboxSendChatMessageToInbox{} }
func (m *TLInboxSendChatMessageToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxSendChatMessageToInbox) ProtoMessage()    {}
func (*TLInboxSendChatMessageToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{3}
}
func (m *TLInboxSendChatMessageToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxSendChatMessageToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxSendChatMessageToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxSendChatMessageToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxSendChatMessageToInbox.Merge(m, src)
}
func (m *TLInboxSendChatMessageToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxSendChatMessageToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxSendChatMessageToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxSendChatMessageToInbox proto.InternalMessageInfo

func (m *TLInboxSendChatMessageToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxSendChatMessageToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxSendChatMessageToInbox) GetPeerChatId() int64 {
	if m != nil {
		return m.PeerChatId
	}
	return 0
}

func (m *TLInboxSendChatMessageToInbox) GetMessage() *InboxMessageData {
	if m != nil {
		return m.Message
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.sendChannelMessageToInbox from_id:long peer_channel_id:long message:MessageBox = Void;
type TLInboxSendChannelMessageToInbox struct {
	Constructor          TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64               `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChannelId        int64               `protobuf:"varint,4,opt,name=peer_channel_id,json=peerChannelId,proto3" json:"peer_channel_id,omitempty"`
	Message              *mtproto.MessageBox `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TLInboxSendChannelMessageToInbox) Reset()         { *m = TLInboxSendChannelMessageToInbox{} }
func (m *TLInboxSendChannelMessageToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxSendChannelMessageToInbox) ProtoMessage()    {}
func (*TLInboxSendChannelMessageToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{4}
}
func (m *TLInboxSendChannelMessageToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxSendChannelMessageToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxSendChannelMessageToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxSendChannelMessageToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxSendChannelMessageToInbox.Merge(m, src)
}
func (m *TLInboxSendChannelMessageToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxSendChannelMessageToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxSendChannelMessageToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxSendChannelMessageToInbox proto.InternalMessageInfo

func (m *TLInboxSendChannelMessageToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxSendChannelMessageToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxSendChannelMessageToInbox) GetPeerChannelId() int64 {
	if m != nil {
		return m.PeerChannelId
	}
	return 0
}

func (m *TLInboxSendChannelMessageToInbox) GetMessage() *mtproto.MessageBox {
	if m != nil {
		return m.Message
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.sendUserMultiMessageToInbox from_id:long peer_user_id:long message:Vector<InboxMessageData> = Void;
type TLInboxSendUserMultiMessageToInbox struct {
	Constructor          TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64               `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerUserId           int64               `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	Message              []*InboxMessageData `protobuf:"bytes,5,rep,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TLInboxSendUserMultiMessageToInbox) Reset()         { *m = TLInboxSendUserMultiMessageToInbox{} }
func (m *TLInboxSendUserMultiMessageToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxSendUserMultiMessageToInbox) ProtoMessage()    {}
func (*TLInboxSendUserMultiMessageToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{5}
}
func (m *TLInboxSendUserMultiMessageToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxSendUserMultiMessageToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxSendUserMultiMessageToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxSendUserMultiMessageToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxSendUserMultiMessageToInbox.Merge(m, src)
}
func (m *TLInboxSendUserMultiMessageToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxSendUserMultiMessageToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxSendUserMultiMessageToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxSendUserMultiMessageToInbox proto.InternalMessageInfo

func (m *TLInboxSendUserMultiMessageToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxSendUserMultiMessageToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxSendUserMultiMessageToInbox) GetPeerUserId() int64 {
	if m != nil {
		return m.PeerUserId
	}
	return 0
}

func (m *TLInboxSendUserMultiMessageToInbox) GetMessage() []*InboxMessageData {
	if m != nil {
		return m.Message
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.sendChatMultiMessageToInbox from_id:long peer_chat_id:long message:Vector<InboxMessageData> = Void;
type TLInboxSendChatMultiMessageToInbox struct {
	Constructor          TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64               `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChatId           int64               `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId,proto3" json:"peer_chat_id,omitempty"`
	Message              []*InboxMessageData `protobuf:"bytes,5,rep,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TLInboxSendChatMultiMessageToInbox) Reset()         { *m = TLInboxSendChatMultiMessageToInbox{} }
func (m *TLInboxSendChatMultiMessageToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxSendChatMultiMessageToInbox) ProtoMessage()    {}
func (*TLInboxSendChatMultiMessageToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{6}
}
func (m *TLInboxSendChatMultiMessageToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxSendChatMultiMessageToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxSendChatMultiMessageToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxSendChatMultiMessageToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxSendChatMultiMessageToInbox.Merge(m, src)
}
func (m *TLInboxSendChatMultiMessageToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxSendChatMultiMessageToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxSendChatMultiMessageToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxSendChatMultiMessageToInbox proto.InternalMessageInfo

func (m *TLInboxSendChatMultiMessageToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxSendChatMultiMessageToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxSendChatMultiMessageToInbox) GetPeerChatId() int64 {
	if m != nil {
		return m.PeerChatId
	}
	return 0
}

func (m *TLInboxSendChatMultiMessageToInbox) GetMessage() []*InboxMessageData {
	if m != nil {
		return m.Message
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.sendChannelMultiMessageToInbox from_id:long peer_channel_id:long message:Vector<MessageBox> = Void;
type TLInboxSendChannelMultiMessageToInbox struct {
	Constructor          TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64                 `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChannelId        int64                 `protobuf:"varint,4,opt,name=peer_channel_id,json=peerChannelId,proto3" json:"peer_channel_id,omitempty"`
	Message              []*mtproto.MessageBox `protobuf:"bytes,5,rep,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLInboxSendChannelMultiMessageToInbox) Reset()         { *m = TLInboxSendChannelMultiMessageToInbox{} }
func (m *TLInboxSendChannelMultiMessageToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxSendChannelMultiMessageToInbox) ProtoMessage()    {}
func (*TLInboxSendChannelMultiMessageToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{7}
}
func (m *TLInboxSendChannelMultiMessageToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxSendChannelMultiMessageToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxSendChannelMultiMessageToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxSendChannelMultiMessageToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxSendChannelMultiMessageToInbox.Merge(m, src)
}
func (m *TLInboxSendChannelMultiMessageToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxSendChannelMultiMessageToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxSendChannelMultiMessageToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxSendChannelMultiMessageToInbox proto.InternalMessageInfo

func (m *TLInboxSendChannelMultiMessageToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxSendChannelMultiMessageToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxSendChannelMultiMessageToInbox) GetPeerChannelId() int64 {
	if m != nil {
		return m.PeerChannelId
	}
	return 0
}

func (m *TLInboxSendChannelMultiMessageToInbox) GetMessage() []*mtproto.MessageBox {
	if m != nil {
		return m.Message
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.editUserMessageToInbox from_id:long peer_user_id:long message:Message = Void;
type TLInboxEditUserMessageToInbox struct {
	Constructor          TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64            `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerUserId           int64            `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	Message              *mtproto.Message `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLInboxEditUserMessageToInbox) Reset()         { *m = TLInboxEditUserMessageToInbox{} }
func (m *TLInboxEditUserMessageToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxEditUserMessageToInbox) ProtoMessage()    {}
func (*TLInboxEditUserMessageToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{8}
}
func (m *TLInboxEditUserMessageToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxEditUserMessageToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxEditUserMessageToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxEditUserMessageToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxEditUserMessageToInbox.Merge(m, src)
}
func (m *TLInboxEditUserMessageToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxEditUserMessageToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxEditUserMessageToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxEditUserMessageToInbox proto.InternalMessageInfo

func (m *TLInboxEditUserMessageToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxEditUserMessageToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxEditUserMessageToInbox) GetPeerUserId() int64 {
	if m != nil {
		return m.PeerUserId
	}
	return 0
}

func (m *TLInboxEditUserMessageToInbox) GetMessage() *mtproto.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.editChatMessageToInbox from_id:long peer_chat_id:long message:Message = Void;
type TLInboxEditChatMessageToInbox struct {
	Constructor          TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64            `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChatId           int64            `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId,proto3" json:"peer_chat_id,omitempty"`
	Message              *mtproto.Message `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLInboxEditChatMessageToInbox) Reset()         { *m = TLInboxEditChatMessageToInbox{} }
func (m *TLInboxEditChatMessageToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxEditChatMessageToInbox) ProtoMessage()    {}
func (*TLInboxEditChatMessageToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{9}
}
func (m *TLInboxEditChatMessageToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxEditChatMessageToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxEditChatMessageToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxEditChatMessageToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxEditChatMessageToInbox.Merge(m, src)
}
func (m *TLInboxEditChatMessageToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxEditChatMessageToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxEditChatMessageToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxEditChatMessageToInbox proto.InternalMessageInfo

func (m *TLInboxEditChatMessageToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxEditChatMessageToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxEditChatMessageToInbox) GetPeerChatId() int64 {
	if m != nil {
		return m.PeerChatId
	}
	return 0
}

func (m *TLInboxEditChatMessageToInbox) GetMessage() *mtproto.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.editChannelMessageToInbox from_id:long peer_channel_id:long pts:int pts_count:int message:Message = Void;
type TLInboxEditChannelMessageToInbox struct {
	Constructor          TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64            `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChannelId        int64            `protobuf:"varint,4,opt,name=peer_channel_id,json=peerChannelId,proto3" json:"peer_channel_id,omitempty"`
	Pts                  int32            `protobuf:"varint,5,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsCount             int32            `protobuf:"varint,6,opt,name=pts_count,json=ptsCount,proto3" json:"pts_count,omitempty"`
	Message              *mtproto.Message `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLInboxEditChannelMessageToInbox) Reset()         { *m = TLInboxEditChannelMessageToInbox{} }
func (m *TLInboxEditChannelMessageToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxEditChannelMessageToInbox) ProtoMessage()    {}
func (*TLInboxEditChannelMessageToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{10}
}
func (m *TLInboxEditChannelMessageToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxEditChannelMessageToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxEditChannelMessageToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxEditChannelMessageToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxEditChannelMessageToInbox.Merge(m, src)
}
func (m *TLInboxEditChannelMessageToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxEditChannelMessageToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxEditChannelMessageToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxEditChannelMessageToInbox proto.InternalMessageInfo

func (m *TLInboxEditChannelMessageToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxEditChannelMessageToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxEditChannelMessageToInbox) GetPeerChannelId() int64 {
	if m != nil {
		return m.PeerChannelId
	}
	return 0
}

func (m *TLInboxEditChannelMessageToInbox) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *TLInboxEditChannelMessageToInbox) GetPtsCount() int32 {
	if m != nil {
		return m.PtsCount
	}
	return 0
}

func (m *TLInboxEditChannelMessageToInbox) GetMessage() *mtproto.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.deleteMessagesToInbox from_id:long id:Vector<long> = Void;
type TLInboxDeleteMessagesToInbox struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Id                   []int64       `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLInboxDeleteMessagesToInbox) Reset()         { *m = TLInboxDeleteMessagesToInbox{} }
func (m *TLInboxDeleteMessagesToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxDeleteMessagesToInbox) ProtoMessage()    {}
func (*TLInboxDeleteMessagesToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{11}
}
func (m *TLInboxDeleteMessagesToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxDeleteMessagesToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxDeleteMessagesToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxDeleteMessagesToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxDeleteMessagesToInbox.Merge(m, src)
}
func (m *TLInboxDeleteMessagesToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxDeleteMessagesToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxDeleteMessagesToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxDeleteMessagesToInbox proto.InternalMessageInfo

func (m *TLInboxDeleteMessagesToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxDeleteMessagesToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxDeleteMessagesToInbox) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.deleteChannelMessagesToInbox from_id:long peer_channel_id:long pts:int pts_count:int id:Vector<int> = Void;
type TLInboxDeleteChannelMessagesToInbox struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChannelId        int64         `protobuf:"varint,4,opt,name=peer_channel_id,json=peerChannelId,proto3" json:"peer_channel_id,omitempty"`
	Pts                  int32         `protobuf:"varint,5,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsCount             int32         `protobuf:"varint,6,opt,name=pts_count,json=ptsCount,proto3" json:"pts_count,omitempty"`
	Id                   []int32       `protobuf:"varint,7,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLInboxDeleteChannelMessagesToInbox) Reset()         { *m = TLInboxDeleteChannelMessagesToInbox{} }
func (m *TLInboxDeleteChannelMessagesToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxDeleteChannelMessagesToInbox) ProtoMessage()    {}
func (*TLInboxDeleteChannelMessagesToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{12}
}
func (m *TLInboxDeleteChannelMessagesToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxDeleteChannelMessagesToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxDeleteChannelMessagesToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxDeleteChannelMessagesToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxDeleteChannelMessagesToInbox.Merge(m, src)
}
func (m *TLInboxDeleteChannelMessagesToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxDeleteChannelMessagesToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxDeleteChannelMessagesToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxDeleteChannelMessagesToInbox proto.InternalMessageInfo

func (m *TLInboxDeleteChannelMessagesToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxDeleteChannelMessagesToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxDeleteChannelMessagesToInbox) GetPeerChannelId() int64 {
	if m != nil {
		return m.PeerChannelId
	}
	return 0
}

func (m *TLInboxDeleteChannelMessagesToInbox) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *TLInboxDeleteChannelMessagesToInbox) GetPtsCount() int32 {
	if m != nil {
		return m.PtsCount
	}
	return 0
}

func (m *TLInboxDeleteChannelMessagesToInbox) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.deleteUserHistoryToInbox flags:# from_id:long peer_user_id:long just_clear:flags.1?true max_id:int = Void;
type TLInboxDeleteUserHistoryToInbox struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerUserId           int64         `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	JustClear            bool          `protobuf:"varint,5,opt,name=just_clear,json=justClear,proto3" json:"just_clear,omitempty"`
	MaxId                int32         `protobuf:"varint,6,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLInboxDeleteUserHistoryToInbox) Reset()         { *m = TLInboxDeleteUserHistoryToInbox{} }
func (m *TLInboxDeleteUserHistoryToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxDeleteUserHistoryToInbox) ProtoMessage()    {}
func (*TLInboxDeleteUserHistoryToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{13}
}
func (m *TLInboxDeleteUserHistoryToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxDeleteUserHistoryToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxDeleteUserHistoryToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxDeleteUserHistoryToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxDeleteUserHistoryToInbox.Merge(m, src)
}
func (m *TLInboxDeleteUserHistoryToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxDeleteUserHistoryToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxDeleteUserHistoryToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxDeleteUserHistoryToInbox proto.InternalMessageInfo

func (m *TLInboxDeleteUserHistoryToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxDeleteUserHistoryToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxDeleteUserHistoryToInbox) GetPeerUserId() int64 {
	if m != nil {
		return m.PeerUserId
	}
	return 0
}

func (m *TLInboxDeleteUserHistoryToInbox) GetJustClear() bool {
	if m != nil {
		return m.JustClear
	}
	return false
}

func (m *TLInboxDeleteUserHistoryToInbox) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// inbox.deleteChatHistoryToInbox from_id:long peer_chat_id:long max_id:int = Void;
type TLInboxDeleteChatHistoryToInbox struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChatId           int64         `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId,proto3" json:"peer_chat_id,omitempty"`
	MaxId                int32         `protobuf:"varint,5,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLInboxDeleteChatHistoryToInbox) Reset()         { *m = TLInboxDeleteChatHistoryToInbox{} }
func (m *TLInboxDeleteChatHistoryToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxDeleteChatHistoryToInbox) ProtoMessage()    {}
func (*TLInboxDeleteChatHistoryToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{14}
}
func (m *TLInboxDeleteChatHistoryToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxDeleteChatHistoryToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxDeleteChatHistoryToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxDeleteChatHistoryToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxDeleteChatHistoryToInbox.Merge(m, src)
}
func (m *TLInboxDeleteChatHistoryToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxDeleteChatHistoryToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxDeleteChatHistoryToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxDeleteChatHistoryToInbox proto.InternalMessageInfo

func (m *TLInboxDeleteChatHistoryToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxDeleteChatHistoryToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxDeleteChatHistoryToInbox) GetPeerChatId() int64 {
	if m != nil {
		return m.PeerChatId
	}
	return 0
}

func (m *TLInboxDeleteChatHistoryToInbox) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// inbox.readUserMediaUnreadToInbox from_id:long id:Vector<int> = Void;
type TLInboxReadUserMediaUnreadToInbox struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Id                   []int32       `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLInboxReadUserMediaUnreadToInbox) Reset()         { *m = TLInboxReadUserMediaUnreadToInbox{} }
func (m *TLInboxReadUserMediaUnreadToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxReadUserMediaUnreadToInbox) ProtoMessage()    {}
func (*TLInboxReadUserMediaUnreadToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{15}
}
func (m *TLInboxReadUserMediaUnreadToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxReadUserMediaUnreadToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxReadUserMediaUnreadToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxReadUserMediaUnreadToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxReadUserMediaUnreadToInbox.Merge(m, src)
}
func (m *TLInboxReadUserMediaUnreadToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxReadUserMediaUnreadToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxReadUserMediaUnreadToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxReadUserMediaUnreadToInbox proto.InternalMessageInfo

func (m *TLInboxReadUserMediaUnreadToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxReadUserMediaUnreadToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxReadUserMediaUnreadToInbox) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.readChatMediaUnreadToInbox from_id:long peer_chat_id:long id:Vector<int> = Void;
type TLInboxReadChatMediaUnreadToInbox struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChatId           int64         `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId,proto3" json:"peer_chat_id,omitempty"`
	Id                   []int32       `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLInboxReadChatMediaUnreadToInbox) Reset()         { *m = TLInboxReadChatMediaUnreadToInbox{} }
func (m *TLInboxReadChatMediaUnreadToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxReadChatMediaUnreadToInbox) ProtoMessage()    {}
func (*TLInboxReadChatMediaUnreadToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{16}
}
func (m *TLInboxReadChatMediaUnreadToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxReadChatMediaUnreadToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxReadChatMediaUnreadToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxReadChatMediaUnreadToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxReadChatMediaUnreadToInbox.Merge(m, src)
}
func (m *TLInboxReadChatMediaUnreadToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxReadChatMediaUnreadToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxReadChatMediaUnreadToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxReadChatMediaUnreadToInbox proto.InternalMessageInfo

func (m *TLInboxReadChatMediaUnreadToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxReadChatMediaUnreadToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxReadChatMediaUnreadToInbox) GetPeerChatId() int64 {
	if m != nil {
		return m.PeerChatId
	}
	return 0
}

func (m *TLInboxReadChatMediaUnreadToInbox) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.readChannelMediaUnreadToInbox from_id:long peer_channel_id:long id:Vector<int> = Void;
type TLInboxReadChannelMediaUnreadToInbox struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerChannelId        int64         `protobuf:"varint,4,opt,name=peer_channel_id,json=peerChannelId,proto3" json:"peer_channel_id,omitempty"`
	Id                   []int32       `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLInboxReadChannelMediaUnreadToInbox) Reset()         { *m = TLInboxReadChannelMediaUnreadToInbox{} }
func (m *TLInboxReadChannelMediaUnreadToInbox) String() string { return proto.CompactTextString(m) }
func (*TLInboxReadChannelMediaUnreadToInbox) ProtoMessage()    {}
func (*TLInboxReadChannelMediaUnreadToInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{17}
}
func (m *TLInboxReadChannelMediaUnreadToInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxReadChannelMediaUnreadToInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxReadChannelMediaUnreadToInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxReadChannelMediaUnreadToInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxReadChannelMediaUnreadToInbox.Merge(m, src)
}
func (m *TLInboxReadChannelMediaUnreadToInbox) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxReadChannelMediaUnreadToInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxReadChannelMediaUnreadToInbox.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxReadChannelMediaUnreadToInbox proto.InternalMessageInfo

func (m *TLInboxReadChannelMediaUnreadToInbox) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxReadChannelMediaUnreadToInbox) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxReadChannelMediaUnreadToInbox) GetPeerChannelId() int64 {
	if m != nil {
		return m.PeerChannelId
	}
	return 0
}

func (m *TLInboxReadChannelMediaUnreadToInbox) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// inbox.updateHistoryReaded from_id:long peer_type:int peer_id:long max_id:int sender:long = Void;
type TLInboxUpdateHistoryReaded struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	FromId               int64         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	MaxId                int32         `protobuf:"varint,6,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Sender               int64         `protobuf:"varint,7,opt,name=sender,proto3" json:"sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLInboxUpdateHistoryReaded) Reset()         { *m = TLInboxUpdateHistoryReaded{} }
func (m *TLInboxUpdateHistoryReaded) String() string { return proto.CompactTextString(m) }
func (*TLInboxUpdateHistoryReaded) ProtoMessage()    {}
func (*TLInboxUpdateHistoryReaded) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{18}
}
func (m *TLInboxUpdateHistoryReaded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxUpdateHistoryReaded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxUpdateHistoryReaded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxUpdateHistoryReaded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxUpdateHistoryReaded.Merge(m, src)
}
func (m *TLInboxUpdateHistoryReaded) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxUpdateHistoryReaded) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxUpdateHistoryReaded.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxUpdateHistoryReaded proto.InternalMessageInfo

func (m *TLInboxUpdateHistoryReaded) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxUpdateHistoryReaded) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TLInboxUpdateHistoryReaded) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLInboxUpdateHistoryReaded) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLInboxUpdateHistoryReaded) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLInboxUpdateHistoryReaded) GetSender() int64 {
	if m != nil {
		return m.Sender
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// inbox.updatePinnedMessage flags:# user_id:long unpin:flags.1?true peer_type:int peer_id:long id:int dialog_message_id:long = Void;
type TLInboxUpdatePinnedMessage struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Unpin                bool          `protobuf:"varint,4,opt,name=unpin,proto3" json:"unpin,omitempty"`
	PeerType             int32         `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Id                   int32         `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	DialogMessageId      int64         `protobuf:"varint,8,opt,name=dialog_message_id,json=dialogMessageId,proto3" json:"dialog_message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLInboxUpdatePinnedMessage) Reset()         { *m = TLInboxUpdatePinnedMessage{} }
func (m *TLInboxUpdatePinnedMessage) String() string { return proto.CompactTextString(m) }
func (*TLInboxUpdatePinnedMessage) ProtoMessage()    {}
func (*TLInboxUpdatePinnedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{19}
}
func (m *TLInboxUpdatePinnedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxUpdatePinnedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxUpdatePinnedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxUpdatePinnedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxUpdatePinnedMessage.Merge(m, src)
}
func (m *TLInboxUpdatePinnedMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxUpdatePinnedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxUpdatePinnedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxUpdatePinnedMessage proto.InternalMessageInfo

func (m *TLInboxUpdatePinnedMessage) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxUpdatePinnedMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLInboxUpdatePinnedMessage) GetUnpin() bool {
	if m != nil {
		return m.Unpin
	}
	return false
}

func (m *TLInboxUpdatePinnedMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLInboxUpdatePinnedMessage) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLInboxUpdatePinnedMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLInboxUpdatePinnedMessage) GetDialogMessageId() int64 {
	if m != nil {
		return m.DialogMessageId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// inbox.unpinAllMessages user_id:long auth_key_id:long peer_type:int peer_id:long = Void;
type TLInboxUnpinAllMessages struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=inbox.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType             int32         `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLInboxUnpinAllMessages) Reset()         { *m = TLInboxUnpinAllMessages{} }
func (m *TLInboxUnpinAllMessages) String() string { return proto.CompactTextString(m) }
func (*TLInboxUnpinAllMessages) ProtoMessage()    {}
func (*TLInboxUnpinAllMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a6f35d665e824e1, []int{20}
}
func (m *TLInboxUnpinAllMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInboxUnpinAllMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInboxUnpinAllMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInboxUnpinAllMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInboxUnpinAllMessages.Merge(m, src)
}
func (m *TLInboxUnpinAllMessages) XXX_Size() int {
	return m.Size()
}
func (m *TLInboxUnpinAllMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInboxUnpinAllMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TLInboxUnpinAllMessages proto.InternalMessageInfo

func (m *TLInboxUnpinAllMessages) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLInboxUnpinAllMessages) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLInboxUnpinAllMessages) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLInboxUnpinAllMessages) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLInboxUnpinAllMessages) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func init() {
	proto.RegisterEnum("inbox.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*InboxMessageData)(nil), "inbox.InboxMessageData")
	proto.RegisterType((*TLInboxMessageData)(nil), "inbox.TL_inboxMessageData")
	proto.RegisterType((*TLInboxSendUserMessageToInbox)(nil), "inbox.TL_inbox_sendUserMessageToInbox")
	proto.RegisterType((*TLInboxSendChatMessageToInbox)(nil), "inbox.TL_inbox_sendChatMessageToInbox")
	proto.RegisterType((*TLInboxSendChannelMessageToInbox)(nil), "inbox.TL_inbox_sendChannelMessageToInbox")
	proto.RegisterType((*TLInboxSendUserMultiMessageToInbox)(nil), "inbox.TL_inbox_sendUserMultiMessageToInbox")
	proto.RegisterType((*TLInboxSendChatMultiMessageToInbox)(nil), "inbox.TL_inbox_sendChatMultiMessageToInbox")
	proto.RegisterType((*TLInboxSendChannelMultiMessageToInbox)(nil), "inbox.TL_inbox_sendChannelMultiMessageToInbox")
	proto.RegisterType((*TLInboxEditUserMessageToInbox)(nil), "inbox.TL_inbox_editUserMessageToInbox")
	proto.RegisterType((*TLInboxEditChatMessageToInbox)(nil), "inbox.TL_inbox_editChatMessageToInbox")
	proto.RegisterType((*TLInboxEditChannelMessageToInbox)(nil), "inbox.TL_inbox_editChannelMessageToInbox")
	proto.RegisterType((*TLInboxDeleteMessagesToInbox)(nil), "inbox.TL_inbox_deleteMessagesToInbox")
	proto.RegisterType((*TLInboxDeleteChannelMessagesToInbox)(nil), "inbox.TL_inbox_deleteChannelMessagesToInbox")
	proto.RegisterType((*TLInboxDeleteUserHistoryToInbox)(nil), "inbox.TL_inbox_deleteUserHistoryToInbox")
	proto.RegisterType((*TLInboxDeleteChatHistoryToInbox)(nil), "inbox.TL_inbox_deleteChatHistoryToInbox")
	proto.RegisterType((*TLInboxReadUserMediaUnreadToInbox)(nil), "inbox.TL_inbox_readUserMediaUnreadToInbox")
	proto.RegisterType((*TLInboxReadChatMediaUnreadToInbox)(nil), "inbox.TL_inbox_readChatMediaUnreadToInbox")
	proto.RegisterType((*TLInboxReadChannelMediaUnreadToInbox)(nil), "inbox.TL_inbox_readChannelMediaUnreadToInbox")
	proto.RegisterType((*TLInboxUpdateHistoryReaded)(nil), "inbox.TL_inbox_updateHistoryReaded")
	proto.RegisterType((*TLInboxUpdatePinnedMessage)(nil), "inbox.TL_inbox_updatePinnedMessage")
	proto.RegisterType((*TLInboxUnpinAllMessages)(nil), "inbox.TL_inbox_unpinAllMessages")
}

func init() { proto.RegisterFile("inbox.tl.proto", fileDescriptor_9a6f35d665e824e1) }

var fileDescriptor_9a6f35d665e824e1 = []byte{
	// 1514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x5d, 0x6c, 0x14, 0x55,
	0x14, 0x66, 0xba, 0xec, 0x6e, 0x7b, 0x6a, 0xcb, 0x30, 0x20, 0x94, 0x82, 0xcb, 0xb2, 0xb4, 0x65,
	0x5b, 0xe8, 0xae, 0x2c, 0x86, 0xc4, 0x47, 0x59, 0x1e, 0x6c, 0x8a, 0x15, 0x27, 0xad, 0x24, 0x1a,
	0xb3, 0xb9, 0xdd, 0xb9, 0x6c, 0x47, 0x77, 0x67, 0x26, 0x33, 0x77, 0xb5, 0x7d, 0x14, 0x8d, 0x51,
	0x43, 0x62, 0x78, 0xd3, 0xc4, 0x18, 0x7f, 0x5e, 0x08, 0x89, 0x46, 0xfc, 0x8b, 0xc1, 0x17, 0x20,
	0x2a, 0x24, 0x62, 0x22, 0x09, 0x12, 0xfc, 0x21, 0x40, 0x4d, 0x34, 0x26, 0x12, 0x7f, 0x42, 0x54,
	0x08, 0x46, 0x73, 0x67, 0x66, 0xff, 0xe6, 0xde, 0xe9, 0x0c, 0x48, 0x6b, 0xed, 0x43, 0xb3, 0xf7,
	0xde, 0xef, 0x9e, 0x73, 0xbe, 0x73, 0xcf, 0x3d, 0xf7, 0x9c, 0x81, 0x6e, 0x55, 0x9b, 0xd4, 0xa7,
	0x33, 0xa4, 0x9c, 0x31, 0x4c, 0x9d, 0xe8, 0x52, 0xd4, 0x1e, 0xf7, 0x0e, 0x97, 0x54, 0x32, 0x55,
	0x9d, 0xcc, 0x14, 0xf5, 0x4a, 0xb6, 0xa4, 0x97, 0xf4, 0xac, 0xbd, 0x3a, 0x59, 0xdd, 0x6b, 0x8f,
	0xec, 0x81, 0xfd, 0xcb, 0xd9, 0xd5, 0x9b, 0x28, 0xe9, 0x7a, 0xa9, 0x8c, 0x1b, 0xa8, 0x27, 0x4c,
	0x64, 0x18, 0xd8, 0xb4, 0xdc, 0xf5, 0x5e, 0xab, 0x38, 0x85, 0x2b, 0x88, 0xaa, 0x29, 0xea, 0x26,
	0x2e, 0x90, 0x19, 0x03, 0xd7, 0xd6, 0xd6, 0x34, 0xd6, 0x88, 0x89, 0x34, 0xcb, 0xd0, 0x4d, 0xe2,
	0x2e, 0xad, 0x6c, 0x2c, 0x59, 0x33, 0x5a, 0xd1, 0x99, 0x4d, 0x7d, 0x2f, 0x80, 0x38, 0x42, 0xad,
	0xbc, 0x0f, 0x5b, 0x16, 0x2a, 0xe1, 0x9d, 0x88, 0x20, 0xa9, 0x1f, 0xba, 0x0d, 0x13, 0x2b, 0x6a,
	0x11, 0x11, 0x5c, 0xd0, 0x50, 0x05, 0xf7, 0x08, 0x49, 0x21, 0xdd, 0x21, 0x77, 0xd5, 0x67, 0xc7,
	0x50, 0x05, 0x4b, 0xdb, 0xa1, 0xb3, 0xa8, 0x6b, 0x16, 0x31, 0xab, 0x45, 0xa2, 0x9b, 0x3d, 0x6d,
	0x49, 0x21, 0xdd, 0x9d, 0x5b, 0x99, 0x71, 0x9c, 0x30, 0xbe, 0x2b, 0xdf, 0x58, 0x93, 0x9b, 0x81,
	0xd2, 0x5a, 0xe8, 0x30, 0x91, 0xa6, 0xe8, 0x95, 0x82, 0xaa, 0xf4, 0x44, 0x92, 0x42, 0x3a, 0x22,
	0xb7, 0x3b, 0x13, 0x23, 0x8a, 0x34, 0x04, 0xcb, 0x15, 0x15, 0x95, 0xf5, 0x52, 0xa1, 0xe2, 0x58,
	0x44, 0x41, 0x4b, 0x6d, 0xd0, 0x32, 0x67, 0xc1, 0xb5, 0xd4, 0xc6, 0xc6, 0x5d, 0x50, 0x4f, 0x34,
	0x29, 0xa4, 0x3b, 0x73, 0x62, 0xa6, 0x42, 0x6c, 0x5e, 0x19, 0x17, 0x24, 0xd7, 0x00, 0xa9, 0x9d,
	0xb0, 0x62, 0x7c, 0x57, 0x41, 0xf5, 0x52, 0x1d, 0x86, 0xa8, 0x82, 0x08, 0xca, 0xd9, 0x0c, 0x3b,
	0x73, 0xab, 0x5d, 0xeb, 0xbd, 0x2e, 0x91, 0x1d, 0x54, 0xea, 0x84, 0x00, 0xeb, 0x6b, 0x62, 0x0a,
	0x16, 0xd6, 0x94, 0x09, 0x0b, 0x9b, 0x2e, 0x6e, 0x5c, 0xb7, 0x77, 0x79, 0xdd, 0x22, 0x84, 0x75,
	0xcb, 0x6a, 0x88, 0xef, 0x35, 0x9b, 0x9d, 0x12, 0xa3, 0xc3, 0x11, 0x45, 0x4a, 0xc2, 0x6d, 0x06,
	0xc6, 0x66, 0xa1, 0x6a, 0x61, 0xb3, 0xe1, 0x0d, 0xa0, 0x73, 0x54, 0xfd, 0x88, 0x22, 0x6d, 0xf5,
	0x3a, 0xc2, 0x97, 0x47, 0xdd, 0x1f, 0x0c, 0x93, 0xfc, 0x14, 0x22, 0x0b, 0xc5, 0xa4, 0x38, 0x85,
	0x88, 0x87, 0x09, 0x55, 0x7f, 0x73, 0x4c, 0x4e, 0x09, 0x90, 0xf2, 0x32, 0xd1, 0x34, 0x5c, 0x9e,
	0x6f, 0x32, 0x03, 0xb0, 0xac, 0x46, 0x86, 0xaa, 0x6b, 0xf0, 0xe9, 0x72, 0xf9, 0xd0, 0xd9, 0x11,
	0x45, 0x1a, 0xf6, 0x52, 0x5a, 0xe1, 0x8d, 0xd2, 0x1d, 0xfa, 0x74, 0x0b, 0x9d, 0x3e, 0x36, 0xc4,
	0xaa, 0x65, 0xa2, 0x2e, 0xb2, 0x38, 0x8b, 0x84, 0x3d, 0x9d, 0x3e, 0x36, 0xce, 0x16, 0x92, 0x4e,
	0xc8, 0x60, 0x0b, 0x47, 0xe7, 0xb4, 0x00, 0x9b, 0xb8, 0xc1, 0xb6, 0x10, 0x8c, 0x6e, 0x2a, 0xe2,
	0x22, 0x81, 0x11, 0x77, 0xb4, 0x39, 0x15, 0x60, 0x45, 0x25, 0x8b, 0x23, 0xa9, 0xdd, 0x48, 0x76,
	0x67, 0x28, 0x2c, 0x8e, 0x6c, 0x76, 0x23, 0x14, 0xfe, 0x6c, 0x4e, 0x63, 0x2e, 0x85, 0xc5, 0x94,
	0xc6, 0x44, 0x88, 0x18, 0xc4, 0xb2, 0x79, 0x44, 0x65, 0xfa, 0x93, 0xbe, 0xe3, 0x06, 0xb1, 0x0a,
	0x45, 0xbd, 0xaa, 0x91, 0x9e, 0x98, 0x3d, 0xdf, 0x6e, 0x10, 0x2b, 0x4f, 0xc7, 0xcd, 0xd4, 0xe3,
	0x41, 0xd4, 0x9f, 0x14, 0x20, 0x51, 0xa7, 0xae, 0xe0, 0x32, 0x26, 0xd8, 0xc5, 0x58, 0xf3, 0x46,
	0xbb, 0x1b, 0xda, 0x6c, 0xa6, 0x91, 0x74, 0x44, 0x6e, 0x53, 0x95, 0xd4, 0x05, 0x01, 0xfa, 0x3d,
	0x36, 0xb4, 0x1e, 0x80, 0xf5, 0x7f, 0x3b, 0x01, 0x87, 0x61, 0x3c, 0x19, 0x49, 0x47, 0x6d, 0x86,
	0xa7, 0x04, 0xd8, 0xe0, 0x61, 0x48, 0x6f, 0xda, 0xbd, 0xaa, 0x45, 0x74, 0x73, 0xe6, 0x3f, 0xbc,
	0xe8, 0x77, 0x00, 0x3c, 0x5a, 0xb5, 0x48, 0xa1, 0x58, 0xc6, 0xc8, 0xb4, 0xe9, 0xb5, 0xcb, 0x1d,
	0x74, 0x26, 0x4f, 0x27, 0xa4, 0xdb, 0x21, 0x56, 0x41, 0xd3, 0x74, 0xab, 0xc3, 0x30, 0x5a, 0x41,
	0xd3, 0x23, 0x4a, 0xea, 0x4d, 0x96, 0x0e, 0xbd, 0x75, 0x0b, 0x45, 0xc7, 0xff, 0xd2, 0x37, 0xec,
	0x8d, 0x36, 0xdb, 0xfb, 0x8c, 0x00, 0x1b, 0xeb, 0xf6, 0x9a, 0x18, 0xb9, 0xa5, 0xa3, 0xa2, 0xa2,
	0x09, 0x8d, 0x0e, 0x17, 0x20, 0xd2, 0x9d, 0x38, 0x38, 0xe8, 0x35, 0xc4, 0xc9, 0x95, 0xf3, 0x6f,
	0x48, 0xb0, 0xeb, 0x1c, 0x53, 0xa3, 0x75, 0x53, 0x0f, 0x0b, 0x30, 0xe0, 0x35, 0xd5, 0xb9, 0x92,
	0xf3, 0x6f, 0x6d, 0xd8, 0x5b, 0xe9, 0xb5, 0xf9, 0x8c, 0x00, 0xeb, 0xea, 0x36, 0x57, 0x0d, 0x05,
	0x11, 0xec, 0xc6, 0xa4, 0x8c, 0x91, 0x82, 0x95, 0x5b, 0x6f, 0x29, 0xcd, 0x02, 0xd4, 0x52, 0xda,
	0x08, 0xda, 0x36, 0xd2, 0x2c, 0x80, 0xb1, 0x39, 0x3e, 0x63, 0x60, 0xba, 0xcb, 0x5e, 0x74, 0xc3,
	0x31, 0x22, 0xc7, 0xe8, 0xb0, 0x25, 0x4c, 0x9b, 0xaf, 0x95, 0xb4, 0x0a, 0x62, 0xb4, 0xac, 0xc1,
	0xa6, 0x9d, 0xb6, 0x23, 0xb2, 0x3b, 0x4a, 0xfd, 0xc1, 0xd2, 0xda, 0xad, 0x6a, 0x1a, 0x56, 0xdc,
	0xf4, 0xf8, 0x6f, 0x68, 0xd5, 0x52, 0x83, 0x4b, 0xab, 0xea, 0xa4, 0x85, 0x95, 0x10, 0xad, 0x6a,
	0x86, 0xaa, 0xd9, 0x94, 0xda, 0x65, 0x67, 0xd0, 0x4a, 0x36, 0xea, 0x4f, 0x36, 0xd6, 0x42, 0xb6,
	0x96, 0x0b, 0x05, 0xe7, 0x90, 0xf8, 0x5d, 0x66, 0x3b, 0xb7, 0xcb, 0x4c, 0x1d, 0x17, 0x60, 0x4d,
	0x83, 0x39, 0x35, 0xe2, 0x9e, 0x72, 0xfd, 0x51, 0xb8, 0xf5, 0xb4, 0x13, 0xd0, 0x89, 0xaa, 0x64,
	0xaa, 0xf0, 0x18, 0x9e, 0x69, 0xc4, 0x5c, 0x07, 0x9d, 0x1a, 0xc5, 0x33, 0xde, 0xd3, 0x0e, 0xeb,
	0x80, 0xa1, 0xf3, 0x71, 0xe8, 0x6a, 0xb1, 0x46, 0x5a, 0x0e, 0x5d, 0x79, 0x39, 0xbf, 0x2d, 0x57,
	0x98, 0x18, 0x1b, 0x1d, 0xbb, 0x7f, 0xcf, 0x98, 0xb8, 0x44, 0x4a, 0xc0, 0x2a, 0x67, 0xca, 0xdb,
	0x26, 0x8b, 0x67, 0xbe, 0xf9, 0xfd, 0x7c, 0x44, 0xca, 0x42, 0xaa, 0x69, 0xdd, 0xa7, 0xff, 0x15,
	0xdf, 0x7d, 0xff, 0xa3, 0x97, 0xff, 0xa6, 0x7f, 0x02, 0x6f, 0x03, 0x5b, 0x98, 0x89, 0xc7, 0x9f,
	0x3b, 0xfb, 0xe1, 0x55, 0x67, 0xc3, 0x30, 0xf4, 0x73, 0x36, 0xb0, 0x65, 0x90, 0x78, 0x76, 0xf6,
	0xc2, 0xe9, 0xb8, 0x74, 0x17, 0x6c, 0xe2, 0x1a, 0xc4, 0x16, 0xe3, 0xe2, 0xd5, 0xd9, 0x03, 0x6f,
	0xb9, 0x4a, 0x38, 0xbb, 0x7c, 0x9a, 0x12, 0x71, 0xff, 0x77, 0x97, 0xdf, 0xfb, 0xcb, 0xd9, 0x95,
	0x83, 0x21, 0x3f, 0xd3, 0x38, 0x1b, 0x8f, 0xbd, 0x73, 0xe2, 0xdb, 0x88, 0x34, 0xd4, 0xca, 0x9f,
	0x5f, 0x5b, 0x8b, 0x07, 0x7f, 0xfe, 0xe9, 0x87, 0x28, 0x0f, 0xcb, 0xf1, 0xd5, 0x0b, 0x57, 0x8e,
	0x9d, 0x8c, 0x4b, 0xb9, 0x56, 0x37, 0xf9, 0x56, 0x8b, 0xe2, 0xe7, 0xd7, 0x0e, 0x1f, 0x70, 0xcf,
	0x62, 0x10, 0x36, 0x34, 0xef, 0xe1, 0x96, 0x59, 0xe2, 0xd3, 0xaf, 0x1f, 0xf9, 0x2a, 0x2a, 0xdd,
	0x09, 0x69, 0x16, 0xca, 0xaf, 0x86, 0xc4, 0x4f, 0x4f, 0xff, 0xb8, 0x5f, 0x90, 0xb6, 0x40, 0x1f,
	0xbb, 0x83, 0xad, 0x2e, 0xc4, 0x73, 0xfb, 0x0e, 0xbd, 0x2a, 0x48, 0x5b, 0x79, 0x68, 0xf6, 0xf1,
	0x16, 0xf7, 0x9d, 0x3a, 0xf4, 0x89, 0xeb, 0xfd, 0x0c, 0x0c, 0x34, 0x6f, 0xf1, 0x7f, 0x3f, 0xc5,
	0x43, 0xe7, 0xae, 0x3f, 0xbf, 0x94, 0x87, 0xe7, 0x3f, 0x73, 0xe2, 0xaf, 0xc7, 0x8e, 0x7e, 0x1d,
	0x93, 0xb6, 0xc3, 0x20, 0x07, 0xcf, 0x7f, 0x6b, 0xc4, 0x0f, 0x8e, 0x3c, 0x75, 0xf4, 0x9a, 0x63,
	0xd7, 0x16, 0x58, 0xdf, 0xbc, 0x8f, 0x93, 0xef, 0xc5, 0x8b, 0x2f, 0xbd, 0xf6, 0xca, 0xf5, 0x39,
	0xd0, 0x2d, 0x69, 0x54, 0xbc, 0xf2, 0xe5, 0xdb, 0x9f, 0xb9, 0xb2, 0xfb, 0x60, 0x5d, 0x0b, 0xda,
	0x93, 0x7a, 0xc4, 0x4b, 0x1f, 0xff, 0xf6, 0x62, 0x5b, 0xef, 0xd2, 0x67, 0xdf, 0x48, 0x2c, 0xc9,
	0x5d, 0xee, 0x82, 0x76, 0x79, 0x77, 0xde, 0x79, 0x0b, 0xf7, 0xc0, 0xba, 0x39, 0xbf, 0x50, 0x0d,
	0xd4, 0xd3, 0xd3, 0x9c, 0x37, 0xb9, 0xb7, 0xab, 0x5e, 0xb2, 0x3f, 0xa8, 0xab, 0x4a, 0x6a, 0x49,
	0xab, 0x60, 0x4e, 0x8b, 0xc5, 0x15, 0xcc, 0xe2, 0x58, 0xc1, 0x8f, 0xc0, 0xfa, 0xa0, 0xef, 0x37,
	0x83, 0x3e, 0xb2, 0x59, 0x28, 0x2b, 0x1e, 0xc1, 0x86, 0xe0, 0xef, 0x29, 0x9b, 0x7d, 0xbd, 0xc2,
	0x82, 0x03, 0x54, 0xf8, 0x7d, 0xe3, 0xd8, 0xec, 0xeb, 0x9f, 0x30, 0x2a, 0x4a, 0xd0, 0x17, 0xea,
	0xbb, 0x43, 0x66, 0x2e, 0x4f, 0x85, 0x51, 0x54, 0x3f, 0x66, 0x9f, 0x8f, 0x01, 0xcc, 0x31, 0xf3,
	0x71, 0x01, 0x82, 0xc3, 0xc4, 0x0f, 0x1f, 0x37, 0x47, 0xfc, 0xf8, 0x37, 0xce, 0x83, 0x3e, 0xb2,
	0xc3, 0xc4, 0xcf, 0x04, 0xac, 0x9d, 0xab, 0x39, 0xed, 0xf7, 0x8a, 0xe6, 0xc2, 0x58, 0xb1, 0x45,
	0x48, 0x85, 0xe8, 0x37, 0xb7, 0xf0, 0xa5, 0xf3, 0xd1, 0xac, 0x92, 0x87, 0x21, 0x11, 0xd0, 0xf2,
	0xa5, 0xf9, 0x0a, 0x58, 0x64, 0xa0, 0x70, 0x4e, 0x03, 0x96, 0xf6, 0xb5, 0x9e, 0x04, 0x09, 0x2f,
	0x40, 0x32, 0xb0, 0x5b, 0x1a, 0xf2, 0x8a, 0xf7, 0xc7, 0x06, 0x28, 0xf0, 0xe9, 0x82, 0xb8, 0x0a,
	0xf8, 0x58, 0x56, 0x01, 0x86, 0x8d, 0x61, 0x7a, 0x97, 0x61, 0x1f, 0x1d, 0x7c, 0x38, 0xab, 0xe6,
	0x01, 0x58, 0xe3, 0xdf, 0x6e, 0x6c, 0xf4, 0x0a, 0xe7, 0x80, 0x02, 0x45, 0xb6, 0x96, 0xfa, 0x3e,
	0x22, 0x5b, 0x40, 0xac, 0xc8, 0x51, 0x58, 0xe5, 0x53, 0x43, 0x27, 0x19, 0x79, 0x1e, 0x04, 0x23,
	0x6c, 0xc7, 0xe8, 0x2f, 0x97, 0x12, 0xc2, 0xc9, 0xd9, 0x84, 0xf0, 0xc5, 0x6c, 0x42, 0xb8, 0x38,
	0x9b, 0x10, 0x1e, 0xba, 0x9b, 0x60, 0x54, 0x29, 0x99, 0xa8, 0x92, 0x51, 0xf5, 0x6c, 0xed, 0xf7,
	0xb0, 0x85, 0xcd, 0xc7, 0xb1, 0x99, 0x45, 0x86, 0x91, 0xa5, 0x95, 0x3e, 0xd6, 0x4a, 0xd8, 0xcc,
	0x56, 0xac, 0x52, 0xd6, 0x56, 0xe4, 0xfc, 0x9f, 0x8c, 0xd9, 0xa2, 0xb7, 0xfd, 0x13, 0x00, 0x00,
	0xff, 0xff, 0xc9, 0x79, 0x6b, 0x31, 0xc0, 0x1b, 0x00, 0x00,
}

func (this *InboxMessageData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&inbox.InboxMessageData{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "RandomId: "+fmt.Sprintf("%#v", this.RandomId)+",\n")
	s = append(s, "DialogMessageId: "+fmt.Sprintf("%#v", this.DialogMessageId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxMessageData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&inbox.TLInboxMessageData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxSendUserMessageToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxSendUserMessageToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerUserId: "+fmt.Sprintf("%#v", this.PeerUserId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxSendChatMessageToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxSendChatMessageToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerChatId: "+fmt.Sprintf("%#v", this.PeerChatId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxSendChannelMessageToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxSendChannelMessageToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerChannelId: "+fmt.Sprintf("%#v", this.PeerChannelId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxSendUserMultiMessageToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxSendUserMultiMessageToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerUserId: "+fmt.Sprintf("%#v", this.PeerUserId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxSendChatMultiMessageToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxSendChatMultiMessageToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerChatId: "+fmt.Sprintf("%#v", this.PeerChatId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxSendChannelMultiMessageToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxSendChannelMultiMessageToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerChannelId: "+fmt.Sprintf("%#v", this.PeerChannelId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxEditUserMessageToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxEditUserMessageToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerUserId: "+fmt.Sprintf("%#v", this.PeerUserId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxEditChatMessageToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxEditChatMessageToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerChatId: "+fmt.Sprintf("%#v", this.PeerChatId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxEditChannelMessageToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&inbox.TLInboxEditChannelMessageToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerChannelId: "+fmt.Sprintf("%#v", this.PeerChannelId)+",\n")
	s = append(s, "Pts: "+fmt.Sprintf("%#v", this.Pts)+",\n")
	s = append(s, "PtsCount: "+fmt.Sprintf("%#v", this.PtsCount)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxDeleteMessagesToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&inbox.TLInboxDeleteMessagesToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxDeleteChannelMessagesToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&inbox.TLInboxDeleteChannelMessagesToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerChannelId: "+fmt.Sprintf("%#v", this.PeerChannelId)+",\n")
	s = append(s, "Pts: "+fmt.Sprintf("%#v", this.Pts)+",\n")
	s = append(s, "PtsCount: "+fmt.Sprintf("%#v", this.PtsCount)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxDeleteUserHistoryToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&inbox.TLInboxDeleteUserHistoryToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerUserId: "+fmt.Sprintf("%#v", this.PeerUserId)+",\n")
	s = append(s, "JustClear: "+fmt.Sprintf("%#v", this.JustClear)+",\n")
	s = append(s, "MaxId: "+fmt.Sprintf("%#v", this.MaxId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxDeleteChatHistoryToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxDeleteChatHistoryToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerChatId: "+fmt.Sprintf("%#v", this.PeerChatId)+",\n")
	s = append(s, "MaxId: "+fmt.Sprintf("%#v", this.MaxId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxReadUserMediaUnreadToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&inbox.TLInboxReadUserMediaUnreadToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxReadChatMediaUnreadToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxReadChatMediaUnreadToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerChatId: "+fmt.Sprintf("%#v", this.PeerChatId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxReadChannelMediaUnreadToInbox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&inbox.TLInboxReadChannelMediaUnreadToInbox{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerChannelId: "+fmt.Sprintf("%#v", this.PeerChannelId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxUpdateHistoryReaded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&inbox.TLInboxUpdateHistoryReaded{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "FromId: "+fmt.Sprintf("%#v", this.FromId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "MaxId: "+fmt.Sprintf("%#v", this.MaxId)+",\n")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxUpdatePinnedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&inbox.TLInboxUpdatePinnedMessage{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Unpin: "+fmt.Sprintf("%#v", this.Unpin)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "DialogMessageId: "+fmt.Sprintf("%#v", this.DialogMessageId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLInboxUnpinAllMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&inbox.TLInboxUnpinAllMessages{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInboxTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCInboxClient is the client API for RPCInbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCInboxClient interface {
	// inbox.sendUserMessageToInbox from_id:long peer_user_id:long message:InboxMessageData = Void;
	InboxSendUserMessageToInbox(ctx context.Context, in *TLInboxSendUserMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.sendChatMessageToInbox from_id:long peer_chat_id:long message:InboxMessageData = Void;
	InboxSendChatMessageToInbox(ctx context.Context, in *TLInboxSendChatMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.sendChannelMessageToInbox from_id:long peer_channel_id:long message:MessageBox = Void;
	InboxSendChannelMessageToInbox(ctx context.Context, in *TLInboxSendChannelMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.sendUserMultiMessageToInbox from_id:long peer_user_id:long message:Vector<InboxMessageData> = Void;
	InboxSendUserMultiMessageToInbox(ctx context.Context, in *TLInboxSendUserMultiMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.sendChatMultiMessageToInbox from_id:long peer_chat_id:long message:Vector<InboxMessageData> = Void;
	InboxSendChatMultiMessageToInbox(ctx context.Context, in *TLInboxSendChatMultiMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.sendChannelMultiMessageToInbox from_id:long peer_channel_id:long message:Vector<MessageBox> = Void;
	InboxSendChannelMultiMessageToInbox(ctx context.Context, in *TLInboxSendChannelMultiMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.editUserMessageToInbox from_id:long peer_user_id:long message:Message = Void;
	InboxEditUserMessageToInbox(ctx context.Context, in *TLInboxEditUserMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.editChatMessageToInbox from_id:long peer_chat_id:long message:Message = Void;
	InboxEditChatMessageToInbox(ctx context.Context, in *TLInboxEditChatMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.editChannelMessageToInbox from_id:long peer_channel_id:long pts:int pts_count:int message:Message = Void;
	InboxEditChannelMessageToInbox(ctx context.Context, in *TLInboxEditChannelMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.deleteMessagesToInbox from_id:long id:Vector<long> = Void;
	InboxDeleteMessagesToInbox(ctx context.Context, in *TLInboxDeleteMessagesToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.deleteChannelMessagesToInbox from_id:long peer_channel_id:long pts:int pts_count:int id:Vector<int> = Void;
	InboxDeleteChannelMessagesToInbox(ctx context.Context, in *TLInboxDeleteChannelMessagesToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.deleteUserHistoryToInbox flags:# from_id:long peer_user_id:long just_clear:flags.1?true max_id:int = Void;
	InboxDeleteUserHistoryToInbox(ctx context.Context, in *TLInboxDeleteUserHistoryToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.deleteChatHistoryToInbox from_id:long peer_chat_id:long max_id:int = Void;
	InboxDeleteChatHistoryToInbox(ctx context.Context, in *TLInboxDeleteChatHistoryToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.readUserMediaUnreadToInbox from_id:long id:Vector<int> = Void;
	InboxReadUserMediaUnreadToInbox(ctx context.Context, in *TLInboxReadUserMediaUnreadToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.readChatMediaUnreadToInbox from_id:long peer_chat_id:long id:Vector<int> = Void;
	InboxReadChatMediaUnreadToInbox(ctx context.Context, in *TLInboxReadChatMediaUnreadToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.readChannelMediaUnreadToInbox from_id:long peer_channel_id:long id:Vector<int> = Void;
	InboxReadChannelMediaUnreadToInbox(ctx context.Context, in *TLInboxReadChannelMediaUnreadToInbox, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.updateHistoryReaded from_id:long peer_type:int peer_id:long max_id:int sender:long = Void;
	InboxUpdateHistoryReaded(ctx context.Context, in *TLInboxUpdateHistoryReaded, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.updatePinnedMessage flags:# user_id:long unpin:flags.1?true peer_type:int peer_id:long id:int dialog_message_id:long = Void;
	InboxUpdatePinnedMessage(ctx context.Context, in *TLInboxUpdatePinnedMessage, opts ...grpc.CallOption) (*mtproto.Void, error)
	// inbox.unpinAllMessages user_id:long auth_key_id:long peer_type:int peer_id:long = Void;
	InboxUnpinAllMessages(ctx context.Context, in *TLInboxUnpinAllMessages, opts ...grpc.CallOption) (*mtproto.Void, error)
}

type rPCInboxClient struct {
	cc *grpc.ClientConn
}

func NewRPCInboxClient(cc *grpc.ClientConn) RPCInboxClient {
	return &rPCInboxClient{cc}
}

func (c *rPCInboxClient) InboxSendUserMessageToInbox(ctx context.Context, in *TLInboxSendUserMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_sendUserMessageToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxSendChatMessageToInbox(ctx context.Context, in *TLInboxSendChatMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_sendChatMessageToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxSendChannelMessageToInbox(ctx context.Context, in *TLInboxSendChannelMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_sendChannelMessageToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxSendUserMultiMessageToInbox(ctx context.Context, in *TLInboxSendUserMultiMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_sendUserMultiMessageToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxSendChatMultiMessageToInbox(ctx context.Context, in *TLInboxSendChatMultiMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_sendChatMultiMessageToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxSendChannelMultiMessageToInbox(ctx context.Context, in *TLInboxSendChannelMultiMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_sendChannelMultiMessageToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxEditUserMessageToInbox(ctx context.Context, in *TLInboxEditUserMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_editUserMessageToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxEditChatMessageToInbox(ctx context.Context, in *TLInboxEditChatMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_editChatMessageToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxEditChannelMessageToInbox(ctx context.Context, in *TLInboxEditChannelMessageToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_editChannelMessageToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxDeleteMessagesToInbox(ctx context.Context, in *TLInboxDeleteMessagesToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_deleteMessagesToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxDeleteChannelMessagesToInbox(ctx context.Context, in *TLInboxDeleteChannelMessagesToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_deleteChannelMessagesToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxDeleteUserHistoryToInbox(ctx context.Context, in *TLInboxDeleteUserHistoryToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_deleteUserHistoryToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxDeleteChatHistoryToInbox(ctx context.Context, in *TLInboxDeleteChatHistoryToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_deleteChatHistoryToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxReadUserMediaUnreadToInbox(ctx context.Context, in *TLInboxReadUserMediaUnreadToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_readUserMediaUnreadToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxReadChatMediaUnreadToInbox(ctx context.Context, in *TLInboxReadChatMediaUnreadToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_readChatMediaUnreadToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxReadChannelMediaUnreadToInbox(ctx context.Context, in *TLInboxReadChannelMediaUnreadToInbox, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_readChannelMediaUnreadToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxUpdateHistoryReaded(ctx context.Context, in *TLInboxUpdateHistoryReaded, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_updateHistoryReaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxUpdatePinnedMessage(ctx context.Context, in *TLInboxUpdatePinnedMessage, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_updatePinnedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInboxClient) InboxUnpinAllMessages(ctx context.Context, in *TLInboxUnpinAllMessages, opts ...grpc.CallOption) (*mtproto.Void, error) {
	out := new(mtproto.Void)
	err := c.cc.Invoke(ctx, "/inbox.RPCInbox/inbox_unpinAllMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCInboxServer is the server API for RPCInbox service.
type RPCInboxServer interface {
	// inbox.sendUserMessageToInbox from_id:long peer_user_id:long message:InboxMessageData = Void;
	InboxSendUserMessageToInbox(context.Context, *TLInboxSendUserMessageToInbox) (*mtproto.Void, error)
	// inbox.sendChatMessageToInbox from_id:long peer_chat_id:long message:InboxMessageData = Void;
	InboxSendChatMessageToInbox(context.Context, *TLInboxSendChatMessageToInbox) (*mtproto.Void, error)
	// inbox.sendChannelMessageToInbox from_id:long peer_channel_id:long message:MessageBox = Void;
	InboxSendChannelMessageToInbox(context.Context, *TLInboxSendChannelMessageToInbox) (*mtproto.Void, error)
	// inbox.sendUserMultiMessageToInbox from_id:long peer_user_id:long message:Vector<InboxMessageData> = Void;
	InboxSendUserMultiMessageToInbox(context.Context, *TLInboxSendUserMultiMessageToInbox) (*mtproto.Void, error)
	// inbox.sendChatMultiMessageToInbox from_id:long peer_chat_id:long message:Vector<InboxMessageData> = Void;
	InboxSendChatMultiMessageToInbox(context.Context, *TLInboxSendChatMultiMessageToInbox) (*mtproto.Void, error)
	// inbox.sendChannelMultiMessageToInbox from_id:long peer_channel_id:long message:Vector<MessageBox> = Void;
	InboxSendChannelMultiMessageToInbox(context.Context, *TLInboxSendChannelMultiMessageToInbox) (*mtproto.Void, error)
	// inbox.editUserMessageToInbox from_id:long peer_user_id:long message:Message = Void;
	InboxEditUserMessageToInbox(context.Context, *TLInboxEditUserMessageToInbox) (*mtproto.Void, error)
	// inbox.editChatMessageToInbox from_id:long peer_chat_id:long message:Message = Void;
	InboxEditChatMessageToInbox(context.Context, *TLInboxEditChatMessageToInbox) (*mtproto.Void, error)
	// inbox.editChannelMessageToInbox from_id:long peer_channel_id:long pts:int pts_count:int message:Message = Void;
	InboxEditChannelMessageToInbox(context.Context, *TLInboxEditChannelMessageToInbox) (*mtproto.Void, error)
	// inbox.deleteMessagesToInbox from_id:long id:Vector<long> = Void;
	InboxDeleteMessagesToInbox(context.Context, *TLInboxDeleteMessagesToInbox) (*mtproto.Void, error)
	// inbox.deleteChannelMessagesToInbox from_id:long peer_channel_id:long pts:int pts_count:int id:Vector<int> = Void;
	InboxDeleteChannelMessagesToInbox(context.Context, *TLInboxDeleteChannelMessagesToInbox) (*mtproto.Void, error)
	// inbox.deleteUserHistoryToInbox flags:# from_id:long peer_user_id:long just_clear:flags.1?true max_id:int = Void;
	InboxDeleteUserHistoryToInbox(context.Context, *TLInboxDeleteUserHistoryToInbox) (*mtproto.Void, error)
	// inbox.deleteChatHistoryToInbox from_id:long peer_chat_id:long max_id:int = Void;
	InboxDeleteChatHistoryToInbox(context.Context, *TLInboxDeleteChatHistoryToInbox) (*mtproto.Void, error)
	// inbox.readUserMediaUnreadToInbox from_id:long id:Vector<int> = Void;
	InboxReadUserMediaUnreadToInbox(context.Context, *TLInboxReadUserMediaUnreadToInbox) (*mtproto.Void, error)
	// inbox.readChatMediaUnreadToInbox from_id:long peer_chat_id:long id:Vector<int> = Void;
	InboxReadChatMediaUnreadToInbox(context.Context, *TLInboxReadChatMediaUnreadToInbox) (*mtproto.Void, error)
	// inbox.readChannelMediaUnreadToInbox from_id:long peer_channel_id:long id:Vector<int> = Void;
	InboxReadChannelMediaUnreadToInbox(context.Context, *TLInboxReadChannelMediaUnreadToInbox) (*mtproto.Void, error)
	// inbox.updateHistoryReaded from_id:long peer_type:int peer_id:long max_id:int sender:long = Void;
	InboxUpdateHistoryReaded(context.Context, *TLInboxUpdateHistoryReaded) (*mtproto.Void, error)
	// inbox.updatePinnedMessage flags:# user_id:long unpin:flags.1?true peer_type:int peer_id:long id:int dialog_message_id:long = Void;
	InboxUpdatePinnedMessage(context.Context, *TLInboxUpdatePinnedMessage) (*mtproto.Void, error)
	// inbox.unpinAllMessages user_id:long auth_key_id:long peer_type:int peer_id:long = Void;
	InboxUnpinAllMessages(context.Context, *TLInboxUnpinAllMessages) (*mtproto.Void, error)
}

// UnimplementedRPCInboxServer can be embedded to have forward compatible implementations.
type UnimplementedRPCInboxServer struct {
}

func (*UnimplementedRPCInboxServer) InboxSendUserMessageToInbox(ctx context.Context, req *TLInboxSendUserMessageToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxSendUserMessageToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxSendChatMessageToInbox(ctx context.Context, req *TLInboxSendChatMessageToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxSendChatMessageToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxSendChannelMessageToInbox(ctx context.Context, req *TLInboxSendChannelMessageToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxSendChannelMessageToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxSendUserMultiMessageToInbox(ctx context.Context, req *TLInboxSendUserMultiMessageToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxSendUserMultiMessageToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxSendChatMultiMessageToInbox(ctx context.Context, req *TLInboxSendChatMultiMessageToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxSendChatMultiMessageToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxSendChannelMultiMessageToInbox(ctx context.Context, req *TLInboxSendChannelMultiMessageToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxSendChannelMultiMessageToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxEditUserMessageToInbox(ctx context.Context, req *TLInboxEditUserMessageToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxEditUserMessageToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxEditChatMessageToInbox(ctx context.Context, req *TLInboxEditChatMessageToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxEditChatMessageToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxEditChannelMessageToInbox(ctx context.Context, req *TLInboxEditChannelMessageToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxEditChannelMessageToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxDeleteMessagesToInbox(ctx context.Context, req *TLInboxDeleteMessagesToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxDeleteMessagesToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxDeleteChannelMessagesToInbox(ctx context.Context, req *TLInboxDeleteChannelMessagesToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxDeleteChannelMessagesToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxDeleteUserHistoryToInbox(ctx context.Context, req *TLInboxDeleteUserHistoryToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxDeleteUserHistoryToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxDeleteChatHistoryToInbox(ctx context.Context, req *TLInboxDeleteChatHistoryToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxDeleteChatHistoryToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxReadUserMediaUnreadToInbox(ctx context.Context, req *TLInboxReadUserMediaUnreadToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxReadUserMediaUnreadToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxReadChatMediaUnreadToInbox(ctx context.Context, req *TLInboxReadChatMediaUnreadToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxReadChatMediaUnreadToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxReadChannelMediaUnreadToInbox(ctx context.Context, req *TLInboxReadChannelMediaUnreadToInbox) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxReadChannelMediaUnreadToInbox not implemented")
}
func (*UnimplementedRPCInboxServer) InboxUpdateHistoryReaded(ctx context.Context, req *TLInboxUpdateHistoryReaded) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxUpdateHistoryReaded not implemented")
}
func (*UnimplementedRPCInboxServer) InboxUpdatePinnedMessage(ctx context.Context, req *TLInboxUpdatePinnedMessage) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxUpdatePinnedMessage not implemented")
}
func (*UnimplementedRPCInboxServer) InboxUnpinAllMessages(ctx context.Context, req *TLInboxUnpinAllMessages) (*mtproto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxUnpinAllMessages not implemented")
}

func RegisterRPCInboxServer(s *grpc.Server, srv RPCInboxServer) {
	s.RegisterService(&_RPCInbox_serviceDesc, srv)
}

func _RPCInbox_InboxSendUserMessageToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxSendUserMessageToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxSendUserMessageToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxSendUserMessageToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxSendUserMessageToInbox(ctx, req.(*TLInboxSendUserMessageToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxSendChatMessageToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxSendChatMessageToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxSendChatMessageToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxSendChatMessageToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxSendChatMessageToInbox(ctx, req.(*TLInboxSendChatMessageToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxSendChannelMessageToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxSendChannelMessageToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxSendChannelMessageToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxSendChannelMessageToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxSendChannelMessageToInbox(ctx, req.(*TLInboxSendChannelMessageToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxSendUserMultiMessageToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxSendUserMultiMessageToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxSendUserMultiMessageToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxSendUserMultiMessageToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxSendUserMultiMessageToInbox(ctx, req.(*TLInboxSendUserMultiMessageToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxSendChatMultiMessageToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxSendChatMultiMessageToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxSendChatMultiMessageToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxSendChatMultiMessageToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxSendChatMultiMessageToInbox(ctx, req.(*TLInboxSendChatMultiMessageToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxSendChannelMultiMessageToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxSendChannelMultiMessageToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxSendChannelMultiMessageToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxSendChannelMultiMessageToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxSendChannelMultiMessageToInbox(ctx, req.(*TLInboxSendChannelMultiMessageToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxEditUserMessageToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxEditUserMessageToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxEditUserMessageToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxEditUserMessageToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxEditUserMessageToInbox(ctx, req.(*TLInboxEditUserMessageToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxEditChatMessageToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxEditChatMessageToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxEditChatMessageToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxEditChatMessageToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxEditChatMessageToInbox(ctx, req.(*TLInboxEditChatMessageToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxEditChannelMessageToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxEditChannelMessageToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxEditChannelMessageToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxEditChannelMessageToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxEditChannelMessageToInbox(ctx, req.(*TLInboxEditChannelMessageToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxDeleteMessagesToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxDeleteMessagesToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxDeleteMessagesToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxDeleteMessagesToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxDeleteMessagesToInbox(ctx, req.(*TLInboxDeleteMessagesToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxDeleteChannelMessagesToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxDeleteChannelMessagesToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxDeleteChannelMessagesToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxDeleteChannelMessagesToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxDeleteChannelMessagesToInbox(ctx, req.(*TLInboxDeleteChannelMessagesToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxDeleteUserHistoryToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxDeleteUserHistoryToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxDeleteUserHistoryToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxDeleteUserHistoryToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxDeleteUserHistoryToInbox(ctx, req.(*TLInboxDeleteUserHistoryToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxDeleteChatHistoryToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxDeleteChatHistoryToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxDeleteChatHistoryToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxDeleteChatHistoryToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxDeleteChatHistoryToInbox(ctx, req.(*TLInboxDeleteChatHistoryToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxReadUserMediaUnreadToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxReadUserMediaUnreadToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxReadUserMediaUnreadToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxReadUserMediaUnreadToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxReadUserMediaUnreadToInbox(ctx, req.(*TLInboxReadUserMediaUnreadToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxReadChatMediaUnreadToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxReadChatMediaUnreadToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxReadChatMediaUnreadToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxReadChatMediaUnreadToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxReadChatMediaUnreadToInbox(ctx, req.(*TLInboxReadChatMediaUnreadToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxReadChannelMediaUnreadToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxReadChannelMediaUnreadToInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxReadChannelMediaUnreadToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxReadChannelMediaUnreadToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxReadChannelMediaUnreadToInbox(ctx, req.(*TLInboxReadChannelMediaUnreadToInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxUpdateHistoryReaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxUpdateHistoryReaded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxUpdateHistoryReaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxUpdateHistoryReaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxUpdateHistoryReaded(ctx, req.(*TLInboxUpdateHistoryReaded))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxUpdatePinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxUpdatePinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxUpdatePinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxUpdatePinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxUpdatePinnedMessage(ctx, req.(*TLInboxUpdatePinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInbox_InboxUnpinAllMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLInboxUnpinAllMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInboxServer).InboxUnpinAllMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbox.RPCInbox/InboxUnpinAllMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInboxServer).InboxUnpinAllMessages(ctx, req.(*TLInboxUnpinAllMessages))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCInbox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inbox.RPCInbox",
	HandlerType: (*RPCInboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "inbox_sendUserMessageToInbox",
			Handler:    _RPCInbox_InboxSendUserMessageToInbox_Handler,
		},
		{
			MethodName: "inbox_sendChatMessageToInbox",
			Handler:    _RPCInbox_InboxSendChatMessageToInbox_Handler,
		},
		{
			MethodName: "inbox_sendChannelMessageToInbox",
			Handler:    _RPCInbox_InboxSendChannelMessageToInbox_Handler,
		},
		{
			MethodName: "inbox_sendUserMultiMessageToInbox",
			Handler:    _RPCInbox_InboxSendUserMultiMessageToInbox_Handler,
		},
		{
			MethodName: "inbox_sendChatMultiMessageToInbox",
			Handler:    _RPCInbox_InboxSendChatMultiMessageToInbox_Handler,
		},
		{
			MethodName: "inbox_sendChannelMultiMessageToInbox",
			Handler:    _RPCInbox_InboxSendChannelMultiMessageToInbox_Handler,
		},
		{
			MethodName: "inbox_editUserMessageToInbox",
			Handler:    _RPCInbox_InboxEditUserMessageToInbox_Handler,
		},
		{
			MethodName: "inbox_editChatMessageToInbox",
			Handler:    _RPCInbox_InboxEditChatMessageToInbox_Handler,
		},
		{
			MethodName: "inbox_editChannelMessageToInbox",
			Handler:    _RPCInbox_InboxEditChannelMessageToInbox_Handler,
		},
		{
			MethodName: "inbox_deleteMessagesToInbox",
			Handler:    _RPCInbox_InboxDeleteMessagesToInbox_Handler,
		},
		{
			MethodName: "inbox_deleteChannelMessagesToInbox",
			Handler:    _RPCInbox_InboxDeleteChannelMessagesToInbox_Handler,
		},
		{
			MethodName: "inbox_deleteUserHistoryToInbox",
			Handler:    _RPCInbox_InboxDeleteUserHistoryToInbox_Handler,
		},
		{
			MethodName: "inbox_deleteChatHistoryToInbox",
			Handler:    _RPCInbox_InboxDeleteChatHistoryToInbox_Handler,
		},
		{
			MethodName: "inbox_readUserMediaUnreadToInbox",
			Handler:    _RPCInbox_InboxReadUserMediaUnreadToInbox_Handler,
		},
		{
			MethodName: "inbox_readChatMediaUnreadToInbox",
			Handler:    _RPCInbox_InboxReadChatMediaUnreadToInbox_Handler,
		},
		{
			MethodName: "inbox_readChannelMediaUnreadToInbox",
			Handler:    _RPCInbox_InboxReadChannelMediaUnreadToInbox_Handler,
		},
		{
			MethodName: "inbox_updateHistoryReaded",
			Handler:    _RPCInbox_InboxUpdateHistoryReaded_Handler,
		},
		{
			MethodName: "inbox_updatePinnedMessage",
			Handler:    _RPCInbox_InboxUpdatePinnedMessage_Handler,
		},
		{
			MethodName: "inbox_unpinAllMessages",
			Handler:    _RPCInbox_InboxUnpinAllMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inbox.tl.proto",
}

func (m *InboxMessageData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboxMessageData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboxMessageData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInboxTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DialogMessageId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.DialogMessageId))
		i--
		dAtA[i] = 0x20
	}
	if m.RandomId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintInboxTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxMessageData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxMessageData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxMessageData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInboxTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxSendUserMessageToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxSendUserMessageToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxSendUserMessageToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInboxTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PeerUserId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxSendChatMessageToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxSendChatMessageToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxSendChatMessageToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInboxTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PeerChatId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxSendChannelMessageToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxSendChannelMessageToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxSendChannelMessageToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInboxTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PeerChannelId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxSendUserMultiMessageToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxSendUserMultiMessageToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxSendUserMultiMessageToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		for iNdEx := len(m.Message) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Message[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInboxTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PeerUserId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxSendChatMultiMessageToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxSendChatMultiMessageToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxSendChatMultiMessageToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		for iNdEx := len(m.Message) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Message[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInboxTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PeerChatId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxSendChannelMultiMessageToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxSendChannelMultiMessageToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxSendChannelMultiMessageToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		for iNdEx := len(m.Message) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Message[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInboxTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PeerChannelId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxEditUserMessageToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxEditUserMessageToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxEditUserMessageToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInboxTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PeerUserId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxEditChatMessageToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxEditChatMessageToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxEditChatMessageToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInboxTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PeerChatId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxEditChannelMessageToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxEditChannelMessageToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxEditChannelMessageToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInboxTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PtsCount != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PtsCount))
		i--
		dAtA[i] = 0x30
	}
	if m.Pts != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerChannelId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxDeleteMessagesToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxDeleteMessagesToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxDeleteMessagesToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA10 := make([]byte, len(m.Id)*10)
		var j9 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintInboxTl(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x22
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxDeleteChannelMessagesToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxDeleteChannelMessagesToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxDeleteChannelMessagesToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA12 := make([]byte, len(m.Id)*10)
		var j11 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintInboxTl(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x3a
	}
	if m.PtsCount != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PtsCount))
		i--
		dAtA[i] = 0x30
	}
	if m.Pts != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerChannelId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxDeleteUserHistoryToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxDeleteUserHistoryToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxDeleteUserHistoryToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x30
	}
	if m.JustClear {
		i--
		if m.JustClear {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.PeerUserId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxDeleteChatHistoryToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxDeleteChatHistoryToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxDeleteChatHistoryToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerChatId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxReadUserMediaUnreadToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxReadUserMediaUnreadToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxReadUserMediaUnreadToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA14 := make([]byte, len(m.Id)*10)
		var j13 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintInboxTl(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x22
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxReadChatMediaUnreadToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxReadChatMediaUnreadToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxReadChatMediaUnreadToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA16 := make([]byte, len(m.Id)*10)
		var j15 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintInboxTl(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x2a
	}
	if m.PeerChatId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxReadChannelMediaUnreadToInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxReadChannelMediaUnreadToInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxReadChannelMediaUnreadToInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA18 := make([]byte, len(m.Id)*10)
		var j17 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintInboxTl(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x2a
	}
	if m.PeerChannelId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxUpdateHistoryReaded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxUpdateHistoryReaded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxUpdateHistoryReaded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sender != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Sender))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x30
	}
	if m.PeerId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.FromId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxUpdatePinnedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxUpdatePinnedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxUpdatePinnedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DialogMessageId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.DialogMessageId))
		i--
		dAtA[i] = 0x40
	}
	if m.Id != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x38
	}
	if m.PeerId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x30
	}
	if m.PeerType != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x28
	}
	if m.Unpin {
		i--
		if m.Unpin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInboxUnpinAllMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInboxUnpinAllMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInboxUnpinAllMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x30
	}
	if m.PeerType != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x28
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintInboxTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInboxTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovInboxTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InboxMessageData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovInboxTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.RandomId != 0 {
		n += 1 + sovInboxTl(uint64(m.RandomId))
	}
	if m.DialogMessageId != 0 {
		n += 1 + sovInboxTl(uint64(m.DialogMessageId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovInboxTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxMessageData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovInboxTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxSendUserMessageToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerUserId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerUserId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovInboxTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxSendChatMessageToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerChatId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerChatId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovInboxTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxSendChannelMessageToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerChannelId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerChannelId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovInboxTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxSendUserMultiMessageToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerUserId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerUserId))
	}
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovInboxTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxSendChatMultiMessageToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerChatId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerChatId))
	}
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovInboxTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxSendChannelMultiMessageToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerChannelId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerChannelId))
	}
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovInboxTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxEditUserMessageToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerUserId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerUserId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovInboxTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxEditChatMessageToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerChatId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerChatId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovInboxTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxEditChannelMessageToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerChannelId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovInboxTl(uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		n += 1 + sovInboxTl(uint64(m.PtsCount))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovInboxTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxDeleteMessagesToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovInboxTl(uint64(e))
		}
		n += 1 + sovInboxTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxDeleteChannelMessagesToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerChannelId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovInboxTl(uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		n += 1 + sovInboxTl(uint64(m.PtsCount))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovInboxTl(uint64(e))
		}
		n += 1 + sovInboxTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxDeleteUserHistoryToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerUserId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerUserId))
	}
	if m.JustClear {
		n += 2
	}
	if m.MaxId != 0 {
		n += 1 + sovInboxTl(uint64(m.MaxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxDeleteChatHistoryToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerChatId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerChatId))
	}
	if m.MaxId != 0 {
		n += 1 + sovInboxTl(uint64(m.MaxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxReadUserMediaUnreadToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovInboxTl(uint64(e))
		}
		n += 1 + sovInboxTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxReadChatMediaUnreadToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerChatId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerChatId))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovInboxTl(uint64(e))
		}
		n += 1 + sovInboxTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxReadChannelMediaUnreadToInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerChannelId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerChannelId))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovInboxTl(uint64(e))
		}
		n += 1 + sovInboxTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxUpdateHistoryReaded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.FromId != 0 {
		n += 1 + sovInboxTl(uint64(m.FromId))
	}
	if m.PeerType != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerId))
	}
	if m.MaxId != 0 {
		n += 1 + sovInboxTl(uint64(m.MaxId))
	}
	if m.Sender != 0 {
		n += 1 + sovInboxTl(uint64(m.Sender))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxUpdatePinnedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovInboxTl(uint64(m.UserId))
	}
	if m.Unpin {
		n += 2
	}
	if m.PeerType != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerId))
	}
	if m.Id != 0 {
		n += 1 + sovInboxTl(uint64(m.Id))
	}
	if m.DialogMessageId != 0 {
		n += 1 + sovInboxTl(uint64(m.DialogMessageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLInboxUnpinAllMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovInboxTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovInboxTl(uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovInboxTl(uint64(m.AuthKeyId))
	}
	if m.PeerType != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovInboxTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInboxTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInboxTl(x uint64) (n int) {
	return sovInboxTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InboxMessageData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboxMessageData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboxMessageData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogMessageId", wireType)
			}
			m.DialogMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DialogMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &mtproto.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxMessageData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inboxMessageData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inboxMessageData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &InboxMessageData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxSendUserMessageToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_sendUserMessageToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_sendUserMessageToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerUserId", wireType)
			}
			m.PeerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &InboxMessageData{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxSendChatMessageToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_sendChatMessageToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_sendChatMessageToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChatId", wireType)
			}
			m.PeerChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &InboxMessageData{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxSendChannelMessageToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_sendChannelMessageToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_sendChannelMessageToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChannelId", wireType)
			}
			m.PeerChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &mtproto.MessageBox{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxSendUserMultiMessageToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_sendUserMultiMessageToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_sendUserMultiMessageToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerUserId", wireType)
			}
			m.PeerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, &InboxMessageData{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxSendChatMultiMessageToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_sendChatMultiMessageToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_sendChatMultiMessageToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChatId", wireType)
			}
			m.PeerChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, &InboxMessageData{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxSendChannelMultiMessageToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_sendChannelMultiMessageToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_sendChannelMultiMessageToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChannelId", wireType)
			}
			m.PeerChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, &mtproto.MessageBox{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxEditUserMessageToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_editUserMessageToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_editUserMessageToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerUserId", wireType)
			}
			m.PeerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &mtproto.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxEditChatMessageToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_editChatMessageToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_editChatMessageToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChatId", wireType)
			}
			m.PeerChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &mtproto.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxEditChannelMessageToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_editChannelMessageToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_editChannelMessageToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChannelId", wireType)
			}
			m.PeerChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsCount", wireType)
			}
			m.PtsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInboxTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInboxTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &mtproto.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxDeleteMessagesToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_deleteMessagesToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_deleteMessagesToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInboxTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInboxTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInboxTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInboxTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInboxTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxDeleteChannelMessagesToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_deleteChannelMessagesToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_deleteChannelMessagesToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChannelId", wireType)
			}
			m.PeerChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsCount", wireType)
			}
			m.PtsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInboxTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInboxTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInboxTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInboxTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInboxTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxDeleteUserHistoryToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_deleteUserHistoryToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_deleteUserHistoryToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerUserId", wireType)
			}
			m.PeerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JustClear = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxDeleteChatHistoryToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_deleteChatHistoryToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_deleteChatHistoryToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChatId", wireType)
			}
			m.PeerChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxReadUserMediaUnreadToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_readUserMediaUnreadToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_readUserMediaUnreadToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInboxTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInboxTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInboxTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInboxTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInboxTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxReadChatMediaUnreadToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_readChatMediaUnreadToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_readChatMediaUnreadToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChatId", wireType)
			}
			m.PeerChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInboxTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInboxTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInboxTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInboxTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInboxTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxReadChannelMediaUnreadToInbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_readChannelMediaUnreadToInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_readChannelMediaUnreadToInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChannelId", wireType)
			}
			m.PeerChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInboxTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInboxTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInboxTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInboxTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInboxTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxUpdateHistoryReaded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_updateHistoryReaded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_updateHistoryReaded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			m.Sender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sender |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxUpdatePinnedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_updatePinnedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_updatePinnedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unpin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unpin = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogMessageId", wireType)
			}
			m.DialogMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DialogMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInboxUnpinAllMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_inbox_unpinAllMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_inbox_unpinAllMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboxTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboxTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInboxTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInboxTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInboxTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInboxTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInboxTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInboxTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInboxTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInboxTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInboxTl = fmt.Errorf("proto: unexpected end of group")
)
