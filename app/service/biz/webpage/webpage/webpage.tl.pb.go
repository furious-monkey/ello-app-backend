// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: webpage.tl.proto

package webpage

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                          TLConstructor = 0
	CRC32_webpage_getPendingWebPagePreview TLConstructor = 1074946247
	CRC32_webpage_getWebPagePreview        TLConstructor = -2059356164
	CRC32_webpage_getWebPage               TLConstructor = -142855528
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	1074946247:  "CRC32_webpage_getPendingWebPagePreview",
	-2059356164: "CRC32_webpage_getWebPagePreview",
	-142855528:  "CRC32_webpage_getWebPage",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                          0,
	"CRC32_webpage_getPendingWebPagePreview": 1074946247,
	"CRC32_webpage_getWebPagePreview":        -2059356164,
	"CRC32_webpage_getWebPage":               -142855528,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b366457897aa4b78, []int{0}
}

//--------------------------------------------------------------------------------------------
// webpage.getPendingWebPagePreview flags:# message:string entities:flags.3?Vector<MessageEntity> = WebPage;
type TLWebpageGetPendingWebPagePreview struct {
	Constructor          TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=webpage.TLConstructor" json:"constructor,omitempty"`
	Message              string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Entities             []*mtproto.MessageEntity `protobuf:"bytes,4,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TLWebpageGetPendingWebPagePreview) Reset()         { *m = TLWebpageGetPendingWebPagePreview{} }
func (m *TLWebpageGetPendingWebPagePreview) String() string { return proto.CompactTextString(m) }
func (*TLWebpageGetPendingWebPagePreview) ProtoMessage()    {}
func (*TLWebpageGetPendingWebPagePreview) Descriptor() ([]byte, []int) {
	return fileDescriptor_b366457897aa4b78, []int{0}
}
func (m *TLWebpageGetPendingWebPagePreview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLWebpageGetPendingWebPagePreview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLWebpageGetPendingWebPagePreview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLWebpageGetPendingWebPagePreview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLWebpageGetPendingWebPagePreview.Merge(m, src)
}
func (m *TLWebpageGetPendingWebPagePreview) XXX_Size() int {
	return m.Size()
}
func (m *TLWebpageGetPendingWebPagePreview) XXX_DiscardUnknown() {
	xxx_messageInfo_TLWebpageGetPendingWebPagePreview.DiscardUnknown(m)
}

var xxx_messageInfo_TLWebpageGetPendingWebPagePreview proto.InternalMessageInfo

func (m *TLWebpageGetPendingWebPagePreview) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLWebpageGetPendingWebPagePreview) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLWebpageGetPendingWebPagePreview) GetEntities() []*mtproto.MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// webpage.getWebPagePreview flags:# message:string entities:flags.3?Vector<MessageEntity> = WebPage;
type TLWebpageGetWebPagePreview struct {
	Constructor          TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=webpage.TLConstructor" json:"constructor,omitempty"`
	Message              string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Entities             []*mtproto.MessageEntity `protobuf:"bytes,4,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TLWebpageGetWebPagePreview) Reset()         { *m = TLWebpageGetWebPagePreview{} }
func (m *TLWebpageGetWebPagePreview) String() string { return proto.CompactTextString(m) }
func (*TLWebpageGetWebPagePreview) ProtoMessage()    {}
func (*TLWebpageGetWebPagePreview) Descriptor() ([]byte, []int) {
	return fileDescriptor_b366457897aa4b78, []int{1}
}
func (m *TLWebpageGetWebPagePreview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLWebpageGetWebPagePreview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLWebpageGetWebPagePreview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLWebpageGetWebPagePreview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLWebpageGetWebPagePreview.Merge(m, src)
}
func (m *TLWebpageGetWebPagePreview) XXX_Size() int {
	return m.Size()
}
func (m *TLWebpageGetWebPagePreview) XXX_DiscardUnknown() {
	xxx_messageInfo_TLWebpageGetWebPagePreview.DiscardUnknown(m)
}

var xxx_messageInfo_TLWebpageGetWebPagePreview proto.InternalMessageInfo

func (m *TLWebpageGetWebPagePreview) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLWebpageGetWebPagePreview) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLWebpageGetWebPagePreview) GetEntities() []*mtproto.MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// webpage.getWebPage url:string hash:int = WebPage;
type TLWebpageGetWebPage struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=webpage.TLConstructor" json:"constructor,omitempty"`
	Url                  string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Hash                 int32         `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLWebpageGetWebPage) Reset()         { *m = TLWebpageGetWebPage{} }
func (m *TLWebpageGetWebPage) String() string { return proto.CompactTextString(m) }
func (*TLWebpageGetWebPage) ProtoMessage()    {}
func (*TLWebpageGetWebPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b366457897aa4b78, []int{2}
}
func (m *TLWebpageGetWebPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLWebpageGetWebPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLWebpageGetWebPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLWebpageGetWebPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLWebpageGetWebPage.Merge(m, src)
}
func (m *TLWebpageGetWebPage) XXX_Size() int {
	return m.Size()
}
func (m *TLWebpageGetWebPage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLWebpageGetWebPage.DiscardUnknown(m)
}

var xxx_messageInfo_TLWebpageGetWebPage proto.InternalMessageInfo

func (m *TLWebpageGetWebPage) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLWebpageGetWebPage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TLWebpageGetWebPage) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func init() {
	proto.RegisterEnum("webpage.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*TLWebpageGetPendingWebPagePreview)(nil), "webpage.TL_webpage_getPendingWebPagePreview")
	proto.RegisterType((*TLWebpageGetWebPagePreview)(nil), "webpage.TL_webpage_getWebPagePreview")
	proto.RegisterType((*TLWebpageGetWebPage)(nil), "webpage.TL_webpage_getWebPage")
}

func init() { proto.RegisterFile("webpage.tl.proto", fileDescriptor_b366457897aa4b78) }

var fileDescriptor_b366457897aa4b78 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x52, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0xee, 0xb8, 0xd1, 0xea, 0x94, 0x4a, 0x1c, 0xb4, 0xa4, 0x41, 0x62, 0x58, 0xa9, 0x2c, 0xd2,
	0x26, 0x90, 0x5e, 0xf4, 0xea, 0x22, 0x08, 0xad, 0xeb, 0x12, 0xaa, 0x0b, 0x5e, 0x96, 0x49, 0xfa,
	0x9c, 0x0d, 0x6c, 0x32, 0x61, 0x66, 0xb6, 0xcb, 0xde, 0xc4, 0x93, 0x7f, 0x80, 0x07, 0xef, 0x82,
	0x07, 0xa1, 0x7f, 0x81, 0x27, 0x4f, 0xea, 0xcd, 0x3f, 0x41, 0x17, 0x3c, 0xdb, 0xa3, 0x07, 0x21,
	0xb2, 0xf9, 0xd1, 0x6d, 0x75, 0xd7, 0x15, 0xbc, 0x78, 0xca, 0xf7, 0xde, 0xf7, 0xe5, 0x9b, 0x6f,
	0xe6, 0x3d, 0xac, 0x0f, 0x21, 0x48, 0x29, 0x03, 0x47, 0xf5, 0x9d, 0x54, 0x70, 0xc5, 0xc9, 0x72,
	0xd9, 0x31, 0xb7, 0x58, 0xa4, 0x7a, 0x83, 0xc0, 0x09, 0x79, 0xec, 0x32, 0xce, 0xb8, 0x9b, 0xf3,
	0xc1, 0xe0, 0x49, 0x5e, 0xe5, 0x45, 0x8e, 0x8a, 0xff, 0x4c, 0x8b, 0x71, 0xce, 0xfa, 0x30, 0x55,
	0x0d, 0x05, 0x4d, 0x53, 0x10, 0xb2, 0xe4, 0x4d, 0x19, 0xf6, 0x20, 0xa6, 0x93, 0x83, 0x42, 0x2e,
	0xa0, 0xab, 0x46, 0x29, 0x54, 0xdc, 0xfa, 0x94, 0x53, 0x82, 0x26, 0x32, 0xe5, 0x42, 0x95, 0xd4,
	0xe5, 0x29, 0x25, 0x47, 0x49, 0x58, 0x74, 0xeb, 0x87, 0x08, 0x5f, 0xdf, 0xdb, 0xed, 0x96, 0x51,
	0xbb, 0x0c, 0x54, 0x1b, 0x92, 0xfd, 0x28, 0x61, 0x1d, 0x08, 0xda, 0x94, 0x41, 0x5b, 0xc0, 0x41,
	0x04, 0x43, 0x72, 0x0b, 0xaf, 0x84, 0x3c, 0x91, 0x4a, 0x0c, 0x42, 0xc5, 0x85, 0x81, 0x6c, 0xd4,
	0xb8, 0xe8, 0xad, 0x39, 0xd5, 0xa5, 0xf7, 0x76, 0x9b, 0x53, 0xd6, 0x3f, 0x29, 0x25, 0x06, 0x5e,
	0x8e, 0x41, 0x4a, 0xca, 0xc0, 0xa8, 0xd9, 0xa8, 0x71, 0xc1, 0xaf, 0x4a, 0xe2, 0xe1, 0xf3, 0x90,
	0xa8, 0x48, 0x45, 0x20, 0x0d, 0xcd, 0xae, 0x35, 0x56, 0xbc, 0x35, 0x27, 0x56, 0x79, 0x2e, 0xe7,
	0x7e, 0xa1, 0xb9, 0x3b, 0xe1, 0x47, 0xfe, 0xb1, 0xae, 0xfe, 0x1a, 0xe1, 0xab, 0xa7, 0xf3, 0xfe,
	0xa7, 0x41, 0x87, 0xf8, 0xca, 0xcc, 0x9c, 0xff, 0x10, 0x50, 0xc7, 0xb5, 0x81, 0xe8, 0x97, 0xe1,
	0x26, 0x90, 0x10, 0xac, 0xf5, 0xa8, 0xec, 0x19, 0x9a, 0x8d, 0x1a, 0x67, 0xfd, 0x1c, 0xdf, 0x3c,
	0x44, 0x78, 0xf5, 0x94, 0x09, 0xb9, 0x84, 0x57, 0x9b, 0x7e, 0x73, 0xdb, 0xeb, 0x3e, 0x6c, 0xed,
	0xb4, 0x1e, 0x74, 0x5a, 0xfa, 0x12, 0x71, 0xf0, 0x8d, 0xa2, 0xb5, 0x68, 0xf0, 0xfa, 0xfb, 0x77,
	0x1f, 0x9f, 0x6a, 0x64, 0x13, 0x5f, 0xfb, 0x4d, 0xff, 0x8b, 0xf0, 0xc7, 0xb7, 0x67, 0x6f, 0xbe,
	0x67, 0x59, 0x96, 0x21, 0xb2, 0x81, 0x8d, 0x79, 0x6a, 0xfd, 0xe5, 0xd7, 0xa3, 0xb7, 0x59, 0x2e,
	0x33, 0xb5, 0xe7, 0xaf, 0xac, 0x25, 0xef, 0xc5, 0x19, 0x8c, 0xfd, 0x76, 0xb3, 0x53, 0x48, 0xc9,
	0x3e, 0xb6, 0x17, 0x2e, 0xe3, 0xe6, 0x89, 0xd7, 0x5a, 0x78, 0x03, 0x53, 0x3f, 0x9e, 0x55, 0x49,
	0xd4, 0x97, 0xc8, 0x23, 0xbc, 0x3e, 0x7f, 0x85, 0x36, 0xe6, 0xd8, 0xff, 0x85, 0xef, 0x3d, 0x4c,
	0x66, 0x8c, 0xdc, 0xfa, 0xb3, 0xe1, 0x2c, 0xa7, 0x3b, 0x3b, 0x47, 0x5f, 0x2c, 0xf4, 0x61, 0x6c,
	0xa1, 0x4f, 0x63, 0x0b, 0x7d, 0x1e, 0x5b, 0xe8, 0xf1, 0x6d, 0x05, 0x34, 0x66, 0x82, 0xc6, 0x4e,
	0xc4, 0xdd, 0x0a, 0x6f, 0x49, 0x10, 0x07, 0x20, 0x5c, 0x9a, 0xa6, 0xee, 0x64, 0x5d, 0x21, 0x61,
	0x20, 0xdc, 0xf2, 0x8c, 0xea, 0x1b, 0x9c, 0xcb, 0xdd, 0xb7, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xfe, 0x40, 0x68, 0xed, 0xa5, 0x04, 0x00, 0x00,
}

func (this *TLWebpageGetPendingWebPagePreview) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&webpage.TLWebpageGetPendingWebPagePreview{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Entities != nil {
		s = append(s, "Entities: "+fmt.Sprintf("%#v", this.Entities)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLWebpageGetWebPagePreview) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&webpage.TLWebpageGetWebPagePreview{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Entities != nil {
		s = append(s, "Entities: "+fmt.Sprintf("%#v", this.Entities)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLWebpageGetWebPage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&webpage.TLWebpageGetWebPage{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWebpageTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCWebpageClient is the client API for RPCWebpage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCWebpageClient interface {
	// webpage.getPendingWebPagePreview flags:# message:string entities:flags.3?Vector<MessageEntity> = WebPage;
	WebpageGetPendingWebPagePreview(ctx context.Context, in *TLWebpageGetPendingWebPagePreview, opts ...grpc.CallOption) (*mtproto.WebPage, error)
	// webpage.getWebPagePreview flags:# message:string entities:flags.3?Vector<MessageEntity> = WebPage;
	WebpageGetWebPagePreview(ctx context.Context, in *TLWebpageGetWebPagePreview, opts ...grpc.CallOption) (*mtproto.WebPage, error)
	// webpage.getWebPage url:string hash:int = WebPage;
	WebpageGetWebPage(ctx context.Context, in *TLWebpageGetWebPage, opts ...grpc.CallOption) (*mtproto.WebPage, error)
}

type rPCWebpageClient struct {
	cc *grpc.ClientConn
}

func NewRPCWebpageClient(cc *grpc.ClientConn) RPCWebpageClient {
	return &rPCWebpageClient{cc}
}

func (c *rPCWebpageClient) WebpageGetPendingWebPagePreview(ctx context.Context, in *TLWebpageGetPendingWebPagePreview, opts ...grpc.CallOption) (*mtproto.WebPage, error) {
	out := new(mtproto.WebPage)
	err := c.cc.Invoke(ctx, "/webpage.RPCWebpage/webpage_getPendingWebPagePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWebpageClient) WebpageGetWebPagePreview(ctx context.Context, in *TLWebpageGetWebPagePreview, opts ...grpc.CallOption) (*mtproto.WebPage, error) {
	out := new(mtproto.WebPage)
	err := c.cc.Invoke(ctx, "/webpage.RPCWebpage/webpage_getWebPagePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWebpageClient) WebpageGetWebPage(ctx context.Context, in *TLWebpageGetWebPage, opts ...grpc.CallOption) (*mtproto.WebPage, error) {
	out := new(mtproto.WebPage)
	err := c.cc.Invoke(ctx, "/webpage.RPCWebpage/webpage_getWebPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCWebpageServer is the server API for RPCWebpage service.
type RPCWebpageServer interface {
	// webpage.getPendingWebPagePreview flags:# message:string entities:flags.3?Vector<MessageEntity> = WebPage;
	WebpageGetPendingWebPagePreview(context.Context, *TLWebpageGetPendingWebPagePreview) (*mtproto.WebPage, error)
	// webpage.getWebPagePreview flags:# message:string entities:flags.3?Vector<MessageEntity> = WebPage;
	WebpageGetWebPagePreview(context.Context, *TLWebpageGetWebPagePreview) (*mtproto.WebPage, error)
	// webpage.getWebPage url:string hash:int = WebPage;
	WebpageGetWebPage(context.Context, *TLWebpageGetWebPage) (*mtproto.WebPage, error)
}

// UnimplementedRPCWebpageServer can be embedded to have forward compatible implementations.
type UnimplementedRPCWebpageServer struct {
}

func (*UnimplementedRPCWebpageServer) WebpageGetPendingWebPagePreview(ctx context.Context, req *TLWebpageGetPendingWebPagePreview) (*mtproto.WebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebpageGetPendingWebPagePreview not implemented")
}
func (*UnimplementedRPCWebpageServer) WebpageGetWebPagePreview(ctx context.Context, req *TLWebpageGetWebPagePreview) (*mtproto.WebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebpageGetWebPagePreview not implemented")
}
func (*UnimplementedRPCWebpageServer) WebpageGetWebPage(ctx context.Context, req *TLWebpageGetWebPage) (*mtproto.WebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebpageGetWebPage not implemented")
}

func RegisterRPCWebpageServer(s *grpc.Server, srv RPCWebpageServer) {
	s.RegisterService(&_RPCWebpage_serviceDesc, srv)
}

func _RPCWebpage_WebpageGetPendingWebPagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLWebpageGetPendingWebPagePreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWebpageServer).WebpageGetPendingWebPagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webpage.RPCWebpage/WebpageGetPendingWebPagePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWebpageServer).WebpageGetPendingWebPagePreview(ctx, req.(*TLWebpageGetPendingWebPagePreview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWebpage_WebpageGetWebPagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLWebpageGetWebPagePreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWebpageServer).WebpageGetWebPagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webpage.RPCWebpage/WebpageGetWebPagePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWebpageServer).WebpageGetWebPagePreview(ctx, req.(*TLWebpageGetWebPagePreview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWebpage_WebpageGetWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLWebpageGetWebPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWebpageServer).WebpageGetWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webpage.RPCWebpage/WebpageGetWebPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWebpageServer).WebpageGetWebPage(ctx, req.(*TLWebpageGetWebPage))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCWebpage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webpage.RPCWebpage",
	HandlerType: (*RPCWebpageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "webpage_getPendingWebPagePreview",
			Handler:    _RPCWebpage_WebpageGetPendingWebPagePreview_Handler,
		},
		{
			MethodName: "webpage_getWebPagePreview",
			Handler:    _RPCWebpage_WebpageGetWebPagePreview_Handler,
		},
		{
			MethodName: "webpage_getWebPage",
			Handler:    _RPCWebpage_WebpageGetWebPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webpage.tl.proto",
}

func (m *TLWebpageGetPendingWebPagePreview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLWebpageGetPendingWebPagePreview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLWebpageGetPendingWebPagePreview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebpageTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintWebpageTl(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintWebpageTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLWebpageGetWebPagePreview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLWebpageGetWebPagePreview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLWebpageGetWebPagePreview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebpageTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintWebpageTl(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintWebpageTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLWebpageGetWebPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLWebpageGetWebPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLWebpageGetWebPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Hash != 0 {
		i = encodeVarintWebpageTl(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintWebpageTl(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintWebpageTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWebpageTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovWebpageTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TLWebpageGetPendingWebPagePreview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovWebpageTl(uint64(m.Constructor))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovWebpageTl(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovWebpageTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLWebpageGetWebPagePreview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovWebpageTl(uint64(m.Constructor))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovWebpageTl(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovWebpageTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLWebpageGetWebPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovWebpageTl(uint64(m.Constructor))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovWebpageTl(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovWebpageTl(uint64(m.Hash))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWebpageTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebpageTl(x uint64) (n int) {
	return sovWebpageTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TLWebpageGetPendingWebPagePreview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebpageTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_webpage_getPendingWebPagePreview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_webpage_getPendingWebPagePreview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebpageTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebpageTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebpageTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebpageTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &mtproto.MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebpageTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebpageTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLWebpageGetWebPagePreview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebpageTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_webpage_getWebPagePreview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_webpage_getWebPagePreview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebpageTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebpageTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebpageTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebpageTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &mtproto.MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebpageTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebpageTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLWebpageGetWebPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebpageTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_webpage_getWebPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_webpage_getWebPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebpageTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebpageTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebpageTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebpageTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebpageTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebpageTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebpageTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebpageTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWebpageTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWebpageTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWebpageTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebpageTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWebpageTl = fmt.Errorf("proto: unexpected end of group")
)
