// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.tl.proto

package user

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                               TLConstructor = 0
	CRC32_peerPeerNotifySettings                TLConstructor = 1894399913
	CRC32_privacyKeyRules                       TLConstructor = -1810715178
	CRC32_lastSeenData                          TLConstructor = -1280204321
	CRC32_contactData                           TLConstructor = 722018346
	CRC32_botData                               TLConstructor = 23110840
	CRC32_userData                              TLConstructor = 2138633749
	CRC32_immutableUser                         TLConstructor = 361114766
	CRC32_userImportedContacts                  TLConstructor = 1256160192
	CRC32_user_getLastSeens                     TLConstructor = 2090958337
	CRC32_user_updateLastSeen                   TLConstructor = -46114259
	CRC32_user_getLastSeen                      TLConstructor = -1860581154
	CRC32_user_getImmutableUser                 TLConstructor = -47047585
	CRC32_user_getMutableUsers                  TLConstructor = -1657068585
	CRC32_user_getImmutableUserByPhone          TLConstructor = -373067804
	CRC32_user_getImmutableUserByToken          TLConstructor = -12709005
	CRC32_user_setAccountDaysTTL                TLConstructor = -766178484
	CRC32_user_getAccountDaysTTL                TLConstructor = -1299956000
	CRC32_user_getNotifySettings                TLConstructor = 1085028198
	CRC32_user_getNotifySettingsList            TLConstructor = -463137380
	CRC32_user_setNotifySettings                TLConstructor = -907188763
	CRC32_user_resetNotifySettings              TLConstructor = 235380084
	CRC32_user_getAllNotifySettings             TLConstructor = 1435658357
	CRC32_user_getGlobalPrivacySettings         TLConstructor = 2012672274
	CRC32_user_setGlobalPrivacySettings         TLConstructor = -1934257490
	CRC32_user_getPrivacy                       TLConstructor = -1656708172
	CRC32_user_setPrivacy                       TLConstructor = -2007650929
	CRC32_user_checkPrivacy                     TLConstructor = -982638934
	CRC32_user_addPeerSettings                  TLConstructor = -891148445
	CRC32_user_getPeerSettings                  TLConstructor = 218296167
	CRC32_user_deletePeerSettings               TLConstructor = 1586043239
	CRC32_user_changePhone                      TLConstructor = -8759461
	CRC32_user_createNewPredefinedUser          TLConstructor = 1464414785
	CRC32_user_getPredefinedUser                TLConstructor = 876047141
	CRC32_user_getAllPredefinedUser             TLConstructor = -1053474843
	CRC32_user_updatePredefinedFirstAndLastName TLConstructor = 976922006
	CRC32_user_updatePredefinedVerified         TLConstructor = -1158303159
	CRC32_user_updatePredefinedUsername         TLConstructor = 1269284562
	CRC32_user_updatePredefinedCode             TLConstructor = 1626771303
	CRC32_user_predefinedBindRegisteredUserId   TLConstructor = 68106153
	CRC32_user_createNewUser                    TLConstructor = 2044729473
	CRC32_user_blockPeer                        TLConstructor = -2130301264
	CRC32_user_unBlockPeer                      TLConstructor = -555280883
	CRC32_user_blockedByUser                    TLConstructor = -1147140722
	CRC32_user_isBlockedByUser                  TLConstructor = -1934708257
	CRC32_user_checkBlockUserList               TLConstructor = -1006800656
	CRC32_user_getBlockedList                   TLConstructor = 603964232
	CRC32_user_getContactSignUpNotification     TLConstructor = -456010794
	CRC32_user_setContactSignUpNotification     TLConstructor = -2053016735
	CRC32_user_getContentSettings               TLConstructor = -1799115361
	CRC32_user_setContentSettings               TLConstructor = -1654391189
	CRC32_user_deleteContact                    TLConstructor = -972979687
	CRC32_user_getContactList                   TLConstructor = -951332511
	CRC32_user_getContactIdList                 TLConstructor = -237135810
	CRC32_user_getContact                       TLConstructor = -613250077
	CRC32_user_addContact                       TLConstructor = 2042936590
	CRC32_user_checkContact                     TLConstructor = -2102962012
	CRC32_user_importContacts                   TLConstructor = -1711212654
	CRC32_user_getCountryCode                   TLConstructor = 302016562
	CRC32_user_updateAbout                      TLConstructor = -620695161
	CRC32_user_updateFirstAndLastName           TLConstructor = -882473492
	CRC32_user_updateVerified                   TLConstructor = 617163107
	CRC32_user_updateUsername                   TLConstructor = -179495311
	CRC32_user_updateProfilePhoto               TLConstructor = 997461895
	CRC32_user_deleteProfilePhotos              TLConstructor = 736322062
	CRC32_user_getProfilePhotos                 TLConstructor = -597245626
	CRC32_user_setBotCommands                   TLConstructor = 1966844182
	CRC32_user_isBot                            TLConstructor = -948779026
	CRC32_user_getBotInfo                       TLConstructor = 879114000
	CRC32_user_getFullUser                      TLConstructor = -49225414
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	1894399913:  "CRC32_peerPeerNotifySettings",
	-1810715178: "CRC32_privacyKeyRules",
	-1280204321: "CRC32_lastSeenData",
	722018346:   "CRC32_contactData",
	23110840:    "CRC32_botData",
	2138633749:  "CRC32_userData",
	361114766:   "CRC32_immutableUser",
	1256160192:  "CRC32_userImportedContacts",
	2090958337:  "CRC32_user_getLastSeens",
	-46114259:   "CRC32_user_updateLastSeen",
	-1860581154: "CRC32_user_getLastSeen",
	-47047585:   "CRC32_user_getImmutableUser",
	-1657068585: "CRC32_user_getMutableUsers",
	-373067804:  "CRC32_user_getImmutableUserByPhone",
	-12709005:   "CRC32_user_getImmutableUserByToken",
	-766178484:  "CRC32_user_setAccountDaysTTL",
	-1299956000: "CRC32_user_getAccountDaysTTL",
	1085028198:  "CRC32_user_getNotifySettings",
	-463137380:  "CRC32_user_getNotifySettingsList",
	-907188763:  "CRC32_user_setNotifySettings",
	235380084:   "CRC32_user_resetNotifySettings",
	1435658357:  "CRC32_user_getAllNotifySettings",
	2012672274:  "CRC32_user_getGlobalPrivacySettings",
	-1934257490: "CRC32_user_setGlobalPrivacySettings",
	-1656708172: "CRC32_user_getPrivacy",
	-2007650929: "CRC32_user_setPrivacy",
	-982638934:  "CRC32_user_checkPrivacy",
	-891148445:  "CRC32_user_addPeerSettings",
	218296167:   "CRC32_user_getPeerSettings",
	1586043239:  "CRC32_user_deletePeerSettings",
	-8759461:    "CRC32_user_changePhone",
	1464414785:  "CRC32_user_createNewPredefinedUser",
	876047141:   "CRC32_user_getPredefinedUser",
	-1053474843: "CRC32_user_getAllPredefinedUser",
	976922006:   "CRC32_user_updatePredefinedFirstAndLastName",
	-1158303159: "CRC32_user_updatePredefinedVerified",
	1269284562:  "CRC32_user_updatePredefinedUsername",
	1626771303:  "CRC32_user_updatePredefinedCode",
	68106153:    "CRC32_user_predefinedBindRegisteredUserId",
	2044729473:  "CRC32_user_createNewUser",
	-2130301264: "CRC32_user_blockPeer",
	-555280883:  "CRC32_user_unBlockPeer",
	-1147140722: "CRC32_user_blockedByUser",
	-1934708257: "CRC32_user_isBlockedByUser",
	-1006800656: "CRC32_user_checkBlockUserList",
	603964232:   "CRC32_user_getBlockedList",
	-456010794:  "CRC32_user_getContactSignUpNotification",
	-2053016735: "CRC32_user_setContactSignUpNotification",
	-1799115361: "CRC32_user_getContentSettings",
	-1654391189: "CRC32_user_setContentSettings",
	-972979687:  "CRC32_user_deleteContact",
	-951332511:  "CRC32_user_getContactList",
	-237135810:  "CRC32_user_getContactIdList",
	-613250077:  "CRC32_user_getContact",
	2042936590:  "CRC32_user_addContact",
	-2102962012: "CRC32_user_checkContact",
	-1711212654: "CRC32_user_importContacts",
	302016562:   "CRC32_user_getCountryCode",
	-620695161:  "CRC32_user_updateAbout",
	-882473492:  "CRC32_user_updateFirstAndLastName",
	617163107:   "CRC32_user_updateVerified",
	-179495311:  "CRC32_user_updateUsername",
	997461895:   "CRC32_user_updateProfilePhoto",
	736322062:   "CRC32_user_deleteProfilePhotos",
	-597245626:  "CRC32_user_getProfilePhotos",
	1966844182:  "CRC32_user_setBotCommands",
	-948779026:  "CRC32_user_isBot",
	879114000:   "CRC32_user_getBotInfo",
	-49225414:   "CRC32_user_getFullUser",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                               0,
	"CRC32_peerPeerNotifySettings":                1894399913,
	"CRC32_privacyKeyRules":                       -1810715178,
	"CRC32_lastSeenData":                          -1280204321,
	"CRC32_contactData":                           722018346,
	"CRC32_botData":                               23110840,
	"CRC32_userData":                              2138633749,
	"CRC32_immutableUser":                         361114766,
	"CRC32_userImportedContacts":                  1256160192,
	"CRC32_user_getLastSeens":                     2090958337,
	"CRC32_user_updateLastSeen":                   -46114259,
	"CRC32_user_getLastSeen":                      -1860581154,
	"CRC32_user_getImmutableUser":                 -47047585,
	"CRC32_user_getMutableUsers":                  -1657068585,
	"CRC32_user_getImmutableUserByPhone":          -373067804,
	"CRC32_user_getImmutableUserByToken":          -12709005,
	"CRC32_user_setAccountDaysTTL":                -766178484,
	"CRC32_user_getAccountDaysTTL":                -1299956000,
	"CRC32_user_getNotifySettings":                1085028198,
	"CRC32_user_getNotifySettingsList":            -463137380,
	"CRC32_user_setNotifySettings":                -907188763,
	"CRC32_user_resetNotifySettings":              235380084,
	"CRC32_user_getAllNotifySettings":             1435658357,
	"CRC32_user_getGlobalPrivacySettings":         2012672274,
	"CRC32_user_setGlobalPrivacySettings":         -1934257490,
	"CRC32_user_getPrivacy":                       -1656708172,
	"CRC32_user_setPrivacy":                       -2007650929,
	"CRC32_user_checkPrivacy":                     -982638934,
	"CRC32_user_addPeerSettings":                  -891148445,
	"CRC32_user_getPeerSettings":                  218296167,
	"CRC32_user_deletePeerSettings":               1586043239,
	"CRC32_user_changePhone":                      -8759461,
	"CRC32_user_createNewPredefinedUser":          1464414785,
	"CRC32_user_getPredefinedUser":                876047141,
	"CRC32_user_getAllPredefinedUser":             -1053474843,
	"CRC32_user_updatePredefinedFirstAndLastName": 976922006,
	"CRC32_user_updatePredefinedVerified":         -1158303159,
	"CRC32_user_updatePredefinedUsername":         1269284562,
	"CRC32_user_updatePredefinedCode":             1626771303,
	"CRC32_user_predefinedBindRegisteredUserId":   68106153,
	"CRC32_user_createNewUser":                    2044729473,
	"CRC32_user_blockPeer":                        -2130301264,
	"CRC32_user_unBlockPeer":                      -555280883,
	"CRC32_user_blockedByUser":                    -1147140722,
	"CRC32_user_isBlockedByUser":                  -1934708257,
	"CRC32_user_checkBlockUserList":               -1006800656,
	"CRC32_user_getBlockedList":                   603964232,
	"CRC32_user_getContactSignUpNotification":     -456010794,
	"CRC32_user_setContactSignUpNotification":     -2053016735,
	"CRC32_user_getContentSettings":               -1799115361,
	"CRC32_user_setContentSettings":               -1654391189,
	"CRC32_user_deleteContact":                    -972979687,
	"CRC32_user_getContactList":                   -951332511,
	"CRC32_user_getContactIdList":                 -237135810,
	"CRC32_user_getContact":                       -613250077,
	"CRC32_user_addContact":                       2042936590,
	"CRC32_user_checkContact":                     -2102962012,
	"CRC32_user_importContacts":                   -1711212654,
	"CRC32_user_getCountryCode":                   302016562,
	"CRC32_user_updateAbout":                      -620695161,
	"CRC32_user_updateFirstAndLastName":           -882473492,
	"CRC32_user_updateVerified":                   617163107,
	"CRC32_user_updateUsername":                   -179495311,
	"CRC32_user_updateProfilePhoto":               997461895,
	"CRC32_user_deleteProfilePhotos":              736322062,
	"CRC32_user_getProfilePhotos":                 -597245626,
	"CRC32_user_setBotCommands":                   1966844182,
	"CRC32_user_isBot":                            -948779026,
	"CRC32_user_getBotInfo":                       879114000,
	"CRC32_user_getFullUser":                      -49225414,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{0}
}

// BotData <--
//  + TL_botData
//
type BotData struct {
	PredicateName        string             `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor      `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id                   int64              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	BotType              int32              `protobuf:"varint,4,opt,name=bot_type,json=botType,proto3" json:"bot_type,omitempty"`
	Creator              int64              `protobuf:"varint,5,opt,name=creator,proto3" json:"creator,omitempty"`
	Token                string             `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	Description          string             `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	BotChatHistory       bool               `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNochats           bool               `protobuf:"varint,9,opt,name=bot_nochats,json=botNochats,proto3" json:"bot_nochats,omitempty"`
	BotInlineGeo         bool               `protobuf:"varint,10,opt,name=bot_inline_geo,json=botInlineGeo,proto3" json:"bot_inline_geo,omitempty"`
	BotInfoVersion       int32              `protobuf:"varint,11,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotInlinePlaceholder *types.StringValue `protobuf:"bytes,12,opt,name=bot_inline_placeholder,json=botInlinePlaceholder,proto3" json:"bot_inline_placeholder,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BotData) Reset()         { *m = BotData{} }
func (m *BotData) String() string { return proto.CompactTextString(m) }
func (*BotData) ProtoMessage()    {}
func (*BotData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{0}
}
func (m *BotData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BotData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BotData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotData.Merge(m, src)
}
func (m *BotData) XXX_Size() int {
	return m.Size()
}
func (m *BotData) XXX_DiscardUnknown() {
	xxx_messageInfo_BotData.DiscardUnknown(m)
}

var xxx_messageInfo_BotData proto.InternalMessageInfo

func (m *BotData) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *BotData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *BotData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BotData) GetBotType() int32 {
	if m != nil {
		return m.BotType
	}
	return 0
}

func (m *BotData) GetCreator() int64 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *BotData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BotData) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BotData) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *BotData) GetBotNochats() bool {
	if m != nil {
		return m.BotNochats
	}
	return false
}

func (m *BotData) GetBotInlineGeo() bool {
	if m != nil {
		return m.BotInlineGeo
	}
	return false
}

func (m *BotData) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *BotData) GetBotInlinePlaceholder() *types.StringValue {
	if m != nil {
		return m.BotInlinePlaceholder
	}
	return nil
}

type TLBotData struct {
	Data2                *BotData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLBotData) Reset()         { *m = TLBotData{} }
func (m *TLBotData) String() string { return proto.CompactTextString(m) }
func (*TLBotData) ProtoMessage()    {}
func (*TLBotData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{1}
}
func (m *TLBotData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLBotData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLBotData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLBotData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLBotData.Merge(m, src)
}
func (m *TLBotData) XXX_Size() int {
	return m.Size()
}
func (m *TLBotData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLBotData.DiscardUnknown(m)
}

var xxx_messageInfo_TLBotData proto.InternalMessageInfo

func (m *TLBotData) GetData2() *BotData {
	if m != nil {
		return m.Data2
	}
	return nil
}

// ContactData <--
//  + TL_contactData
//
type ContactData struct {
	PredicateName        string             `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor      `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64              `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContactUserId        int64              `protobuf:"varint,4,opt,name=contact_user_id,json=contactUserId,proto3" json:"contact_user_id,omitempty"`
	FirstName            *types.StringValue `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             *types.StringValue `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	MutualContact        bool               `protobuf:"varint,7,opt,name=mutual_contact,json=mutualContact,proto3" json:"mutual_contact,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ContactData) Reset()         { *m = ContactData{} }
func (m *ContactData) String() string { return proto.CompactTextString(m) }
func (*ContactData) ProtoMessage()    {}
func (*ContactData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{2}
}
func (m *ContactData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactData.Merge(m, src)
}
func (m *ContactData) XXX_Size() int {
	return m.Size()
}
func (m *ContactData) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactData.DiscardUnknown(m)
}

var xxx_messageInfo_ContactData proto.InternalMessageInfo

func (m *ContactData) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *ContactData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *ContactData) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactData) GetContactUserId() int64 {
	if m != nil {
		return m.ContactUserId
	}
	return 0
}

func (m *ContactData) GetFirstName() *types.StringValue {
	if m != nil {
		return m.FirstName
	}
	return nil
}

func (m *ContactData) GetLastName() *types.StringValue {
	if m != nil {
		return m.LastName
	}
	return nil
}

func (m *ContactData) GetMutualContact() bool {
	if m != nil {
		return m.MutualContact
	}
	return false
}

type TLContactData struct {
	Data2                *ContactData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TLContactData) Reset()         { *m = TLContactData{} }
func (m *TLContactData) String() string { return proto.CompactTextString(m) }
func (*TLContactData) ProtoMessage()    {}
func (*TLContactData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{3}
}
func (m *TLContactData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactData.Merge(m, src)
}
func (m *TLContactData) XXX_Size() int {
	return m.Size()
}
func (m *TLContactData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactData.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactData proto.InternalMessageInfo

func (m *TLContactData) GetData2() *ContactData {
	if m != nil {
		return m.Data2
	}
	return nil
}

// ImmutableUser <--
//  + TL_immutableUser
//
type ImmutableUser struct {
	PredicateName        string             `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor      `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	User                 *UserData          `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	LastSeenAt           int64              `protobuf:"varint,4,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
	Contacts             []*ContactData     `protobuf:"bytes,5,rep,name=contacts,proto3" json:"contacts,omitempty"`
	KeysPrivacyRules     []*PrivacyKeyRules `protobuf:"bytes,6,rep,name=keys_privacy_rules,json=keysPrivacyRules,proto3" json:"keys_privacy_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ImmutableUser) Reset()         { *m = ImmutableUser{} }
func (m *ImmutableUser) String() string { return proto.CompactTextString(m) }
func (*ImmutableUser) ProtoMessage()    {}
func (*ImmutableUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{4}
}
func (m *ImmutableUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImmutableUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImmutableUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImmutableUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImmutableUser.Merge(m, src)
}
func (m *ImmutableUser) XXX_Size() int {
	return m.Size()
}
func (m *ImmutableUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ImmutableUser.DiscardUnknown(m)
}

var xxx_messageInfo_ImmutableUser proto.InternalMessageInfo

func (m *ImmutableUser) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *ImmutableUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *ImmutableUser) GetUser() *UserData {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ImmutableUser) GetLastSeenAt() int64 {
	if m != nil {
		return m.LastSeenAt
	}
	return 0
}

func (m *ImmutableUser) GetContacts() []*ContactData {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ImmutableUser) GetKeysPrivacyRules() []*PrivacyKeyRules {
	if m != nil {
		return m.KeysPrivacyRules
	}
	return nil
}

type TLImmutableUser struct {
	Data2                *ImmutableUser `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TLImmutableUser) Reset()         { *m = TLImmutableUser{} }
func (m *TLImmutableUser) String() string { return proto.CompactTextString(m) }
func (*TLImmutableUser) ProtoMessage()    {}
func (*TLImmutableUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{5}
}
func (m *TLImmutableUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLImmutableUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLImmutableUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLImmutableUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLImmutableUser.Merge(m, src)
}
func (m *TLImmutableUser) XXX_Size() int {
	return m.Size()
}
func (m *TLImmutableUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLImmutableUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLImmutableUser proto.InternalMessageInfo

func (m *TLImmutableUser) GetData2() *ImmutableUser {
	if m != nil {
		return m.Data2
	}
	return nil
}

// LastSeenData <--
//  + TL_lastSeenData
//
type LastSeenData struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LastSeenAt           int64         `protobuf:"varint,4,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
	Expires              int32         `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LastSeenData) Reset()         { *m = LastSeenData{} }
func (m *LastSeenData) String() string { return proto.CompactTextString(m) }
func (*LastSeenData) ProtoMessage()    {}
func (*LastSeenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{6}
}
func (m *LastSeenData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastSeenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastSeenData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastSeenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastSeenData.Merge(m, src)
}
func (m *LastSeenData) XXX_Size() int {
	return m.Size()
}
func (m *LastSeenData) XXX_DiscardUnknown() {
	xxx_messageInfo_LastSeenData.DiscardUnknown(m)
}

var xxx_messageInfo_LastSeenData proto.InternalMessageInfo

func (m *LastSeenData) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *LastSeenData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *LastSeenData) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LastSeenData) GetLastSeenAt() int64 {
	if m != nil {
		return m.LastSeenAt
	}
	return 0
}

func (m *LastSeenData) GetExpires() int32 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type TLLastSeenData struct {
	Data2                *LastSeenData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLLastSeenData) Reset()         { *m = TLLastSeenData{} }
func (m *TLLastSeenData) String() string { return proto.CompactTextString(m) }
func (*TLLastSeenData) ProtoMessage()    {}
func (*TLLastSeenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{7}
}
func (m *TLLastSeenData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLastSeenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLastSeenData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLastSeenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLastSeenData.Merge(m, src)
}
func (m *TLLastSeenData) XXX_Size() int {
	return m.Size()
}
func (m *TLLastSeenData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLastSeenData.DiscardUnknown(m)
}

var xxx_messageInfo_TLLastSeenData proto.InternalMessageInfo

func (m *TLLastSeenData) GetData2() *LastSeenData {
	if m != nil {
		return m.Data2
	}
	return nil
}

// PeerPeerNotifySettings <--
//  + TL_peerPeerNotifySettings
//
type PeerPeerNotifySettings struct {
	PredicateName        string                      `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor               `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	PeerType             int32                       `protobuf:"varint,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64                       `protobuf:"varint,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Settings             *mtproto.PeerNotifySettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PeerPeerNotifySettings) Reset()         { *m = PeerPeerNotifySettings{} }
func (m *PeerPeerNotifySettings) String() string { return proto.CompactTextString(m) }
func (*PeerPeerNotifySettings) ProtoMessage()    {}
func (*PeerPeerNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{8}
}
func (m *PeerPeerNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerPeerNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerPeerNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerPeerNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerPeerNotifySettings.Merge(m, src)
}
func (m *PeerPeerNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *PeerPeerNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerPeerNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_PeerPeerNotifySettings proto.InternalMessageInfo

func (m *PeerPeerNotifySettings) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *PeerPeerNotifySettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *PeerPeerNotifySettings) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *PeerPeerNotifySettings) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *PeerPeerNotifySettings) GetSettings() *mtproto.PeerNotifySettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type TLPeerPeerNotifySettings struct {
	Data2                *PeerPeerNotifySettings `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TLPeerPeerNotifySettings) Reset()         { *m = TLPeerPeerNotifySettings{} }
func (m *TLPeerPeerNotifySettings) String() string { return proto.CompactTextString(m) }
func (*TLPeerPeerNotifySettings) ProtoMessage()    {}
func (*TLPeerPeerNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{9}
}
func (m *TLPeerPeerNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPeerPeerNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPeerPeerNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPeerPeerNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPeerPeerNotifySettings.Merge(m, src)
}
func (m *TLPeerPeerNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLPeerPeerNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPeerPeerNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLPeerPeerNotifySettings proto.InternalMessageInfo

func (m *TLPeerPeerNotifySettings) GetData2() *PeerPeerNotifySettings {
	if m != nil {
		return m.Data2
	}
	return nil
}

// PrivacyKeyRules <--
//  + TL_privacyKeyRules
//
type PrivacyKeyRules struct {
	PredicateName        string                 `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor          `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Key                  int32                  `protobuf:"varint,3,opt,name=key,proto3" json:"key,omitempty"`
	Rules                []*mtproto.PrivacyRule `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PrivacyKeyRules) Reset()         { *m = PrivacyKeyRules{} }
func (m *PrivacyKeyRules) String() string { return proto.CompactTextString(m) }
func (*PrivacyKeyRules) ProtoMessage()    {}
func (*PrivacyKeyRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{10}
}
func (m *PrivacyKeyRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivacyKeyRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivacyKeyRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivacyKeyRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivacyKeyRules.Merge(m, src)
}
func (m *PrivacyKeyRules) XXX_Size() int {
	return m.Size()
}
func (m *PrivacyKeyRules) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivacyKeyRules.DiscardUnknown(m)
}

var xxx_messageInfo_PrivacyKeyRules proto.InternalMessageInfo

func (m *PrivacyKeyRules) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *PrivacyKeyRules) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *PrivacyKeyRules) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *PrivacyKeyRules) GetRules() []*mtproto.PrivacyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type TLPrivacyKeyRules struct {
	Data2                *PrivacyKeyRules `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLPrivacyKeyRules) Reset()         { *m = TLPrivacyKeyRules{} }
func (m *TLPrivacyKeyRules) String() string { return proto.CompactTextString(m) }
func (*TLPrivacyKeyRules) ProtoMessage()    {}
func (*TLPrivacyKeyRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{11}
}
func (m *TLPrivacyKeyRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPrivacyKeyRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPrivacyKeyRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPrivacyKeyRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPrivacyKeyRules.Merge(m, src)
}
func (m *TLPrivacyKeyRules) XXX_Size() int {
	return m.Size()
}
func (m *TLPrivacyKeyRules) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPrivacyKeyRules.DiscardUnknown(m)
}

var xxx_messageInfo_TLPrivacyKeyRules proto.InternalMessageInfo

func (m *TLPrivacyKeyRules) GetData2() *PrivacyKeyRules {
	if m != nil {
		return m.Data2
	}
	return nil
}

// UserData <--
//  + TL_userData
//
type UserData struct {
	PredicateName        string                       `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor                `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id                   int64                        `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash           int64                        `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	UserType             int32                        `protobuf:"varint,5,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	SceretKeyId          int64                        `protobuf:"varint,6,opt,name=sceret_key_id,json=sceretKeyId,proto3" json:"sceret_key_id,omitempty"`
	FirstName            string                       `protobuf:"bytes,7,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string                       `protobuf:"bytes,8,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username             string                       `protobuf:"bytes,9,opt,name=username,proto3" json:"username,omitempty"`
	Phone                string                       `protobuf:"bytes,10,opt,name=phone,proto3" json:"phone,omitempty"`
	ProfilePhoto         *mtproto.Photo               `protobuf:"bytes,11,opt,name=profile_photo,json=profilePhoto,proto3" json:"profile_photo,omitempty"`
	Bot                  *BotData                     `protobuf:"bytes,12,opt,name=bot,proto3" json:"bot,omitempty"`
	CountryCode          string                       `protobuf:"bytes,13,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Verified             bool                         `protobuf:"varint,14,opt,name=verified,proto3" json:"verified,omitempty"`
	Support              bool                         `protobuf:"varint,15,opt,name=support,proto3" json:"support,omitempty"`
	Scam                 bool                         `protobuf:"varint,16,opt,name=scam,proto3" json:"scam,omitempty"`
	Fake                 bool                         `protobuf:"varint,17,opt,name=fake,proto3" json:"fake,omitempty"`
	About                *types.StringValue           `protobuf:"bytes,18,opt,name=about,proto3" json:"about,omitempty"`
	Restricted           bool                         `protobuf:"varint,19,opt,name=restricted,proto3" json:"restricted,omitempty"`
	RestrictionReason    []*mtproto.RestrictionReason `protobuf:"bytes,20,rep,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	ContactsVersion      int32                        `protobuf:"varint,21,opt,name=contacts_version,json=contactsVersion,proto3" json:"contacts_version,omitempty"`
	PrivaciesVersion     int32                        `protobuf:"varint,22,opt,name=privacies_version,json=privaciesVersion,proto3" json:"privacies_version,omitempty"`
	Deleted              bool                         `protobuf:"varint,23,opt,name=deleted,proto3" json:"deleted,omitempty"`
	BotAttachMenu        bool                         `protobuf:"varint,24,opt,name=bot_attach_menu,json=botAttachMenu,proto3" json:"bot_attach_menu,omitempty"`
	Premium              bool                         `protobuf:"varint,25,opt,name=premium,proto3" json:"premium,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *UserData) Reset()         { *m = UserData{} }
func (m *UserData) String() string { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()    {}
func (*UserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{12}
}
func (m *UserData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserData.Merge(m, src)
}
func (m *UserData) XXX_Size() int {
	return m.Size()
}
func (m *UserData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserData.DiscardUnknown(m)
}

var xxx_messageInfo_UserData proto.InternalMessageInfo

func (m *UserData) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *UserData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *UserData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserData) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UserData) GetUserType() int32 {
	if m != nil {
		return m.UserType
	}
	return 0
}

func (m *UserData) GetSceretKeyId() int64 {
	if m != nil {
		return m.SceretKeyId
	}
	return 0
}

func (m *UserData) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserData) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserData) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserData) GetProfilePhoto() *mtproto.Photo {
	if m != nil {
		return m.ProfilePhoto
	}
	return nil
}

func (m *UserData) GetBot() *BotData {
	if m != nil {
		return m.Bot
	}
	return nil
}

func (m *UserData) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UserData) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *UserData) GetSupport() bool {
	if m != nil {
		return m.Support
	}
	return false
}

func (m *UserData) GetScam() bool {
	if m != nil {
		return m.Scam
	}
	return false
}

func (m *UserData) GetFake() bool {
	if m != nil {
		return m.Fake
	}
	return false
}

func (m *UserData) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *UserData) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *UserData) GetRestrictionReason() []*mtproto.RestrictionReason {
	if m != nil {
		return m.RestrictionReason
	}
	return nil
}

func (m *UserData) GetContactsVersion() int32 {
	if m != nil {
		return m.ContactsVersion
	}
	return 0
}

func (m *UserData) GetPrivaciesVersion() int32 {
	if m != nil {
		return m.PrivaciesVersion
	}
	return 0
}

func (m *UserData) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *UserData) GetBotAttachMenu() bool {
	if m != nil {
		return m.BotAttachMenu
	}
	return false
}

func (m *UserData) GetPremium() bool {
	if m != nil {
		return m.Premium
	}
	return false
}

type TLUserData struct {
	Data2                *UserData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TLUserData) Reset()         { *m = TLUserData{} }
func (m *TLUserData) String() string { return proto.CompactTextString(m) }
func (*TLUserData) ProtoMessage()    {}
func (*TLUserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{13}
}
func (m *TLUserData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserData.Merge(m, src)
}
func (m *TLUserData) XXX_Size() int {
	return m.Size()
}
func (m *TLUserData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserData.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserData proto.InternalMessageInfo

func (m *TLUserData) GetData2() *UserData {
	if m != nil {
		return m.Data2
	}
	return nil
}

// UserImportedContacts <--
//  + TL_userImportedContacts
//
type UserImportedContacts struct {
	PredicateName        string                     `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor              `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Imported             []*mtproto.ImportedContact `protobuf:"bytes,3,rep,name=imported,proto3" json:"imported,omitempty"`
	PopularInvites       []*mtproto.PopularContact  `protobuf:"bytes,4,rep,name=popular_invites,json=popularInvites,proto3" json:"popular_invites,omitempty"`
	RetryContacts        []int64                    `protobuf:"varint,5,rep,packed,name=retry_contacts,json=retryContacts,proto3" json:"retry_contacts,omitempty"`
	Users                []*mtproto.User            `protobuf:"bytes,6,rep,name=users,proto3" json:"users,omitempty"`
	UpdateIdList         []int64                    `protobuf:"varint,7,rep,packed,name=update_id_list,json=updateIdList,proto3" json:"update_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *UserImportedContacts) Reset()         { *m = UserImportedContacts{} }
func (m *UserImportedContacts) String() string { return proto.CompactTextString(m) }
func (*UserImportedContacts) ProtoMessage()    {}
func (*UserImportedContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{14}
}
func (m *UserImportedContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserImportedContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserImportedContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserImportedContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserImportedContacts.Merge(m, src)
}
func (m *UserImportedContacts) XXX_Size() int {
	return m.Size()
}
func (m *UserImportedContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_UserImportedContacts.DiscardUnknown(m)
}

var xxx_messageInfo_UserImportedContacts proto.InternalMessageInfo

func (m *UserImportedContacts) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *UserImportedContacts) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *UserImportedContacts) GetImported() []*mtproto.ImportedContact {
	if m != nil {
		return m.Imported
	}
	return nil
}

func (m *UserImportedContacts) GetPopularInvites() []*mtproto.PopularContact {
	if m != nil {
		return m.PopularInvites
	}
	return nil
}

func (m *UserImportedContacts) GetRetryContacts() []int64 {
	if m != nil {
		return m.RetryContacts
	}
	return nil
}

func (m *UserImportedContacts) GetUsers() []*mtproto.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UserImportedContacts) GetUpdateIdList() []int64 {
	if m != nil {
		return m.UpdateIdList
	}
	return nil
}

type TLUserImportedContacts struct {
	Data2                *UserImportedContacts `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLUserImportedContacts) Reset()         { *m = TLUserImportedContacts{} }
func (m *TLUserImportedContacts) String() string { return proto.CompactTextString(m) }
func (*TLUserImportedContacts) ProtoMessage()    {}
func (*TLUserImportedContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{15}
}
func (m *TLUserImportedContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserImportedContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserImportedContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserImportedContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserImportedContacts.Merge(m, src)
}
func (m *TLUserImportedContacts) XXX_Size() int {
	return m.Size()
}
func (m *TLUserImportedContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserImportedContacts.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserImportedContacts proto.InternalMessageInfo

func (m *TLUserImportedContacts) GetData2() *UserImportedContacts {
	if m != nil {
		return m.Data2
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserGetLastSeens struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id                   []int64       `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetLastSeens) Reset()         { *m = TLUserGetLastSeens{} }
func (m *TLUserGetLastSeens) String() string { return proto.CompactTextString(m) }
func (*TLUserGetLastSeens) ProtoMessage()    {}
func (*TLUserGetLastSeens) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{16}
}
func (m *TLUserGetLastSeens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetLastSeens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetLastSeens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetLastSeens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetLastSeens.Merge(m, src)
}
func (m *TLUserGetLastSeens) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetLastSeens) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetLastSeens.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetLastSeens proto.InternalMessageInfo

func (m *TLUserGetLastSeens) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetLastSeens) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserUpdateLastSeen struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id                   int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	LastSeenAt           int64         `protobuf:"varint,4,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
	Expires              int32         `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserUpdateLastSeen) Reset()         { *m = TLUserUpdateLastSeen{} }
func (m *TLUserUpdateLastSeen) String() string { return proto.CompactTextString(m) }
func (*TLUserUpdateLastSeen) ProtoMessage()    {}
func (*TLUserUpdateLastSeen) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{17}
}
func (m *TLUserUpdateLastSeen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUpdateLastSeen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUpdateLastSeen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUpdateLastSeen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUpdateLastSeen.Merge(m, src)
}
func (m *TLUserUpdateLastSeen) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUpdateLastSeen) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUpdateLastSeen.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUpdateLastSeen proto.InternalMessageInfo

func (m *TLUserUpdateLastSeen) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUpdateLastSeen) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLUserUpdateLastSeen) GetLastSeenAt() int64 {
	if m != nil {
		return m.LastSeenAt
	}
	return 0
}

func (m *TLUserUpdateLastSeen) GetExpires() int32 {
	if m != nil {
		return m.Expires
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetLastSeen struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id                   int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetLastSeen) Reset()         { *m = TLUserGetLastSeen{} }
func (m *TLUserGetLastSeen) String() string { return proto.CompactTextString(m) }
func (*TLUserGetLastSeen) ProtoMessage()    {}
func (*TLUserGetLastSeen) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{18}
}
func (m *TLUserGetLastSeen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetLastSeen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetLastSeen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetLastSeen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetLastSeen.Merge(m, src)
}
func (m *TLUserGetLastSeen) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetLastSeen) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetLastSeen.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetLastSeen proto.InternalMessageInfo

func (m *TLUserGetLastSeen) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetLastSeen) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetImmutableUser struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id                   int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetImmutableUser) Reset()         { *m = TLUserGetImmutableUser{} }
func (m *TLUserGetImmutableUser) String() string { return proto.CompactTextString(m) }
func (*TLUserGetImmutableUser) ProtoMessage()    {}
func (*TLUserGetImmutableUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{19}
}
func (m *TLUserGetImmutableUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetImmutableUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetImmutableUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetImmutableUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetImmutableUser.Merge(m, src)
}
func (m *TLUserGetImmutableUser) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetImmutableUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetImmutableUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetImmutableUser proto.InternalMessageInfo

func (m *TLUserGetImmutableUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetImmutableUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetMutableUsers struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id                   []int64       `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	To                   []int64       `protobuf:"varint,4,rep,packed,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetMutableUsers) Reset()         { *m = TLUserGetMutableUsers{} }
func (m *TLUserGetMutableUsers) String() string { return proto.CompactTextString(m) }
func (*TLUserGetMutableUsers) ProtoMessage()    {}
func (*TLUserGetMutableUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{20}
}
func (m *TLUserGetMutableUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetMutableUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetMutableUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetMutableUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetMutableUsers.Merge(m, src)
}
func (m *TLUserGetMutableUsers) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetMutableUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetMutableUsers.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetMutableUsers proto.InternalMessageInfo

func (m *TLUserGetMutableUsers) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetMutableUsers) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLUserGetMutableUsers) GetTo() []int64 {
	if m != nil {
		return m.To
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserGetImmutableUserByPhone struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone                string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetImmutableUserByPhone) Reset()         { *m = TLUserGetImmutableUserByPhone{} }
func (m *TLUserGetImmutableUserByPhone) String() string { return proto.CompactTextString(m) }
func (*TLUserGetImmutableUserByPhone) ProtoMessage()    {}
func (*TLUserGetImmutableUserByPhone) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{21}
}
func (m *TLUserGetImmutableUserByPhone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetImmutableUserByPhone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetImmutableUserByPhone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetImmutableUserByPhone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetImmutableUserByPhone.Merge(m, src)
}
func (m *TLUserGetImmutableUserByPhone) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetImmutableUserByPhone) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetImmutableUserByPhone.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetImmutableUserByPhone proto.InternalMessageInfo

func (m *TLUserGetImmutableUserByPhone) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetImmutableUserByPhone) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLUserGetImmutableUserByToken struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Token                string        `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetImmutableUserByToken) Reset()         { *m = TLUserGetImmutableUserByToken{} }
func (m *TLUserGetImmutableUserByToken) String() string { return proto.CompactTextString(m) }
func (*TLUserGetImmutableUserByToken) ProtoMessage()    {}
func (*TLUserGetImmutableUserByToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{22}
}
func (m *TLUserGetImmutableUserByToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetImmutableUserByToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetImmutableUserByToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetImmutableUserByToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetImmutableUserByToken.Merge(m, src)
}
func (m *TLUserGetImmutableUserByToken) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetImmutableUserByToken) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetImmutableUserByToken.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetImmutableUserByToken proto.InternalMessageInfo

func (m *TLUserGetImmutableUserByToken) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetImmutableUserByToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLUserSetAccountDaysTTL struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ttl                  int32         `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserSetAccountDaysTTL) Reset()         { *m = TLUserSetAccountDaysTTL{} }
func (m *TLUserSetAccountDaysTTL) String() string { return proto.CompactTextString(m) }
func (*TLUserSetAccountDaysTTL) ProtoMessage()    {}
func (*TLUserSetAccountDaysTTL) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{23}
}
func (m *TLUserSetAccountDaysTTL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserSetAccountDaysTTL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserSetAccountDaysTTL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserSetAccountDaysTTL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserSetAccountDaysTTL.Merge(m, src)
}
func (m *TLUserSetAccountDaysTTL) XXX_Size() int {
	return m.Size()
}
func (m *TLUserSetAccountDaysTTL) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserSetAccountDaysTTL.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserSetAccountDaysTTL proto.InternalMessageInfo

func (m *TLUserSetAccountDaysTTL) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserSetAccountDaysTTL) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserSetAccountDaysTTL) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetAccountDaysTTL struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetAccountDaysTTL) Reset()         { *m = TLUserGetAccountDaysTTL{} }
func (m *TLUserGetAccountDaysTTL) String() string { return proto.CompactTextString(m) }
func (*TLUserGetAccountDaysTTL) ProtoMessage()    {}
func (*TLUserGetAccountDaysTTL) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{24}
}
func (m *TLUserGetAccountDaysTTL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetAccountDaysTTL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetAccountDaysTTL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetAccountDaysTTL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetAccountDaysTTL.Merge(m, src)
}
func (m *TLUserGetAccountDaysTTL) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetAccountDaysTTL) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetAccountDaysTTL.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetAccountDaysTTL proto.InternalMessageInfo

func (m *TLUserGetAccountDaysTTL) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetAccountDaysTTL) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetNotifySettings struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetNotifySettings) Reset()         { *m = TLUserGetNotifySettings{} }
func (m *TLUserGetNotifySettings) String() string { return proto.CompactTextString(m) }
func (*TLUserGetNotifySettings) ProtoMessage()    {}
func (*TLUserGetNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{25}
}
func (m *TLUserGetNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetNotifySettings.Merge(m, src)
}
func (m *TLUserGetNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetNotifySettings proto.InternalMessageInfo

func (m *TLUserGetNotifySettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetNotifySettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserGetNotifySettings) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLUserGetNotifySettings) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetNotifySettingsList struct {
	Constructor          TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Peers                []*mtproto.PeerUtil `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TLUserGetNotifySettingsList) Reset()         { *m = TLUserGetNotifySettingsList{} }
func (m *TLUserGetNotifySettingsList) String() string { return proto.CompactTextString(m) }
func (*TLUserGetNotifySettingsList) ProtoMessage()    {}
func (*TLUserGetNotifySettingsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{26}
}
func (m *TLUserGetNotifySettingsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetNotifySettingsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetNotifySettingsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetNotifySettingsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetNotifySettingsList.Merge(m, src)
}
func (m *TLUserGetNotifySettingsList) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetNotifySettingsList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetNotifySettingsList.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetNotifySettingsList proto.InternalMessageInfo

func (m *TLUserGetNotifySettingsList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetNotifySettingsList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserGetNotifySettingsList) GetPeers() []*mtproto.PeerUtil {
	if m != nil {
		return m.Peers
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserSetNotifySettings struct {
	Constructor          TLConstructor               `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64                       `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32                       `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64                       `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Settings             *mtproto.PeerNotifySettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *TLUserSetNotifySettings) Reset()         { *m = TLUserSetNotifySettings{} }
func (m *TLUserSetNotifySettings) String() string { return proto.CompactTextString(m) }
func (*TLUserSetNotifySettings) ProtoMessage()    {}
func (*TLUserSetNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{27}
}
func (m *TLUserSetNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserSetNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserSetNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserSetNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserSetNotifySettings.Merge(m, src)
}
func (m *TLUserSetNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserSetNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserSetNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserSetNotifySettings proto.InternalMessageInfo

func (m *TLUserSetNotifySettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserSetNotifySettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserSetNotifySettings) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLUserSetNotifySettings) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLUserSetNotifySettings) GetSettings() *mtproto.PeerNotifySettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserResetNotifySettings struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserResetNotifySettings) Reset()         { *m = TLUserResetNotifySettings{} }
func (m *TLUserResetNotifySettings) String() string { return proto.CompactTextString(m) }
func (*TLUserResetNotifySettings) ProtoMessage()    {}
func (*TLUserResetNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{28}
}
func (m *TLUserResetNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserResetNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserResetNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserResetNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserResetNotifySettings.Merge(m, src)
}
func (m *TLUserResetNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserResetNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserResetNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserResetNotifySettings proto.InternalMessageInfo

func (m *TLUserResetNotifySettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserResetNotifySettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetAllNotifySettings struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetAllNotifySettings) Reset()         { *m = TLUserGetAllNotifySettings{} }
func (m *TLUserGetAllNotifySettings) String() string { return proto.CompactTextString(m) }
func (*TLUserGetAllNotifySettings) ProtoMessage()    {}
func (*TLUserGetAllNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{29}
}
func (m *TLUserGetAllNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetAllNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetAllNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetAllNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetAllNotifySettings.Merge(m, src)
}
func (m *TLUserGetAllNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetAllNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetAllNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetAllNotifySettings proto.InternalMessageInfo

func (m *TLUserGetAllNotifySettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetAllNotifySettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetGlobalPrivacySettings struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetGlobalPrivacySettings) Reset()         { *m = TLUserGetGlobalPrivacySettings{} }
func (m *TLUserGetGlobalPrivacySettings) String() string { return proto.CompactTextString(m) }
func (*TLUserGetGlobalPrivacySettings) ProtoMessage()    {}
func (*TLUserGetGlobalPrivacySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{30}
}
func (m *TLUserGetGlobalPrivacySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetGlobalPrivacySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetGlobalPrivacySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetGlobalPrivacySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetGlobalPrivacySettings.Merge(m, src)
}
func (m *TLUserGetGlobalPrivacySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetGlobalPrivacySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetGlobalPrivacySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetGlobalPrivacySettings proto.InternalMessageInfo

func (m *TLUserGetGlobalPrivacySettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetGlobalPrivacySettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserSetGlobalPrivacySettings struct {
	Constructor          TLConstructor                  `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64                          `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Settings             *mtproto.GlobalPrivacySettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TLUserSetGlobalPrivacySettings) Reset()         { *m = TLUserSetGlobalPrivacySettings{} }
func (m *TLUserSetGlobalPrivacySettings) String() string { return proto.CompactTextString(m) }
func (*TLUserSetGlobalPrivacySettings) ProtoMessage()    {}
func (*TLUserSetGlobalPrivacySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{31}
}
func (m *TLUserSetGlobalPrivacySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserSetGlobalPrivacySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserSetGlobalPrivacySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserSetGlobalPrivacySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserSetGlobalPrivacySettings.Merge(m, src)
}
func (m *TLUserSetGlobalPrivacySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserSetGlobalPrivacySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserSetGlobalPrivacySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserSetGlobalPrivacySettings proto.InternalMessageInfo

func (m *TLUserSetGlobalPrivacySettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserSetGlobalPrivacySettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserSetGlobalPrivacySettings) GetSettings() *mtproto.GlobalPrivacySettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserGetPrivacy struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyType              int32         `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetPrivacy) Reset()         { *m = TLUserGetPrivacy{} }
func (m *TLUserGetPrivacy) String() string { return proto.CompactTextString(m) }
func (*TLUserGetPrivacy) ProtoMessage()    {}
func (*TLUserGetPrivacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{32}
}
func (m *TLUserGetPrivacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetPrivacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetPrivacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetPrivacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetPrivacy.Merge(m, src)
}
func (m *TLUserGetPrivacy) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetPrivacy) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetPrivacy.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetPrivacy proto.InternalMessageInfo

func (m *TLUserGetPrivacy) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetPrivacy) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserGetPrivacy) GetKeyType() int32 {
	if m != nil {
		return m.KeyType
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserSetPrivacy struct {
	Constructor          TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyType              int32                  `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	Rules                []*mtproto.PrivacyRule `protobuf:"bytes,5,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TLUserSetPrivacy) Reset()         { *m = TLUserSetPrivacy{} }
func (m *TLUserSetPrivacy) String() string { return proto.CompactTextString(m) }
func (*TLUserSetPrivacy) ProtoMessage()    {}
func (*TLUserSetPrivacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{33}
}
func (m *TLUserSetPrivacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserSetPrivacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserSetPrivacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserSetPrivacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserSetPrivacy.Merge(m, src)
}
func (m *TLUserSetPrivacy) XXX_Size() int {
	return m.Size()
}
func (m *TLUserSetPrivacy) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserSetPrivacy.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserSetPrivacy proto.InternalMessageInfo

func (m *TLUserSetPrivacy) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserSetPrivacy) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserSetPrivacy) GetKeyType() int32 {
	if m != nil {
		return m.KeyType
	}
	return 0
}

func (m *TLUserSetPrivacy) GetRules() []*mtproto.PrivacyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserCheckPrivacy struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyType              int32         `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserCheckPrivacy) Reset()         { *m = TLUserCheckPrivacy{} }
func (m *TLUserCheckPrivacy) String() string { return proto.CompactTextString(m) }
func (*TLUserCheckPrivacy) ProtoMessage()    {}
func (*TLUserCheckPrivacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{34}
}
func (m *TLUserCheckPrivacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserCheckPrivacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserCheckPrivacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserCheckPrivacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserCheckPrivacy.Merge(m, src)
}
func (m *TLUserCheckPrivacy) XXX_Size() int {
	return m.Size()
}
func (m *TLUserCheckPrivacy) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserCheckPrivacy.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserCheckPrivacy proto.InternalMessageInfo

func (m *TLUserCheckPrivacy) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserCheckPrivacy) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserCheckPrivacy) GetKeyType() int32 {
	if m != nil {
		return m.KeyType
	}
	return 0
}

func (m *TLUserCheckPrivacy) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserAddPeerSettings struct {
	Constructor          TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32                 `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64                 `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Settings             *mtproto.PeerSettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLUserAddPeerSettings) Reset()         { *m = TLUserAddPeerSettings{} }
func (m *TLUserAddPeerSettings) String() string { return proto.CompactTextString(m) }
func (*TLUserAddPeerSettings) ProtoMessage()    {}
func (*TLUserAddPeerSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{35}
}
func (m *TLUserAddPeerSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserAddPeerSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserAddPeerSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserAddPeerSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserAddPeerSettings.Merge(m, src)
}
func (m *TLUserAddPeerSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserAddPeerSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserAddPeerSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserAddPeerSettings proto.InternalMessageInfo

func (m *TLUserAddPeerSettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserAddPeerSettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserAddPeerSettings) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLUserAddPeerSettings) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLUserAddPeerSettings) GetSettings() *mtproto.PeerSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserGetPeerSettings struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetPeerSettings) Reset()         { *m = TLUserGetPeerSettings{} }
func (m *TLUserGetPeerSettings) String() string { return proto.CompactTextString(m) }
func (*TLUserGetPeerSettings) ProtoMessage()    {}
func (*TLUserGetPeerSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{36}
}
func (m *TLUserGetPeerSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetPeerSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetPeerSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetPeerSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetPeerSettings.Merge(m, src)
}
func (m *TLUserGetPeerSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetPeerSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetPeerSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetPeerSettings proto.InternalMessageInfo

func (m *TLUserGetPeerSettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetPeerSettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserGetPeerSettings) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLUserGetPeerSettings) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserDeletePeerSettings struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserDeletePeerSettings) Reset()         { *m = TLUserDeletePeerSettings{} }
func (m *TLUserDeletePeerSettings) String() string { return proto.CompactTextString(m) }
func (*TLUserDeletePeerSettings) ProtoMessage()    {}
func (*TLUserDeletePeerSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{37}
}
func (m *TLUserDeletePeerSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserDeletePeerSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserDeletePeerSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserDeletePeerSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserDeletePeerSettings.Merge(m, src)
}
func (m *TLUserDeletePeerSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserDeletePeerSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserDeletePeerSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserDeletePeerSettings proto.InternalMessageInfo

func (m *TLUserDeletePeerSettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserDeletePeerSettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserDeletePeerSettings) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLUserDeletePeerSettings) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserChangePhone struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Phone                string        `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserChangePhone) Reset()         { *m = TLUserChangePhone{} }
func (m *TLUserChangePhone) String() string { return proto.CompactTextString(m) }
func (*TLUserChangePhone) ProtoMessage()    {}
func (*TLUserChangePhone) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{38}
}
func (m *TLUserChangePhone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserChangePhone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserChangePhone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserChangePhone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserChangePhone.Merge(m, src)
}
func (m *TLUserChangePhone) XXX_Size() int {
	return m.Size()
}
func (m *TLUserChangePhone) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserChangePhone.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserChangePhone proto.InternalMessageInfo

func (m *TLUserChangePhone) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserChangePhone) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserChangePhone) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLUserCreateNewPredefinedUser struct {
	Constructor          TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone                string             `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	FirstName            string             `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             *types.StringValue `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username             string             `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Code                 string             `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	Verified             bool               `protobuf:"varint,8,opt,name=verified,proto3" json:"verified,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLUserCreateNewPredefinedUser) Reset()         { *m = TLUserCreateNewPredefinedUser{} }
func (m *TLUserCreateNewPredefinedUser) String() string { return proto.CompactTextString(m) }
func (*TLUserCreateNewPredefinedUser) ProtoMessage()    {}
func (*TLUserCreateNewPredefinedUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{39}
}
func (m *TLUserCreateNewPredefinedUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserCreateNewPredefinedUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserCreateNewPredefinedUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserCreateNewPredefinedUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserCreateNewPredefinedUser.Merge(m, src)
}
func (m *TLUserCreateNewPredefinedUser) XXX_Size() int {
	return m.Size()
}
func (m *TLUserCreateNewPredefinedUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserCreateNewPredefinedUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserCreateNewPredefinedUser proto.InternalMessageInfo

func (m *TLUserCreateNewPredefinedUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserCreateNewPredefinedUser) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLUserCreateNewPredefinedUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLUserCreateNewPredefinedUser) GetLastName() *types.StringValue {
	if m != nil {
		return m.LastName
	}
	return nil
}

func (m *TLUserCreateNewPredefinedUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TLUserCreateNewPredefinedUser) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *TLUserCreateNewPredefinedUser) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

//--------------------------------------------------------------------------------------------
type TLUserGetPredefinedUser struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone                string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetPredefinedUser) Reset()         { *m = TLUserGetPredefinedUser{} }
func (m *TLUserGetPredefinedUser) String() string { return proto.CompactTextString(m) }
func (*TLUserGetPredefinedUser) ProtoMessage()    {}
func (*TLUserGetPredefinedUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{40}
}
func (m *TLUserGetPredefinedUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetPredefinedUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetPredefinedUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetPredefinedUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetPredefinedUser.Merge(m, src)
}
func (m *TLUserGetPredefinedUser) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetPredefinedUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetPredefinedUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetPredefinedUser proto.InternalMessageInfo

func (m *TLUserGetPredefinedUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetPredefinedUser) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLUserGetAllPredefinedUser struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetAllPredefinedUser) Reset()         { *m = TLUserGetAllPredefinedUser{} }
func (m *TLUserGetAllPredefinedUser) String() string { return proto.CompactTextString(m) }
func (*TLUserGetAllPredefinedUser) ProtoMessage()    {}
func (*TLUserGetAllPredefinedUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{41}
}
func (m *TLUserGetAllPredefinedUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetAllPredefinedUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetAllPredefinedUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetAllPredefinedUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetAllPredefinedUser.Merge(m, src)
}
func (m *TLUserGetAllPredefinedUser) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetAllPredefinedUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetAllPredefinedUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetAllPredefinedUser proto.InternalMessageInfo

func (m *TLUserGetAllPredefinedUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

//--------------------------------------------------------------------------------------------
type TLUserUpdatePredefinedFirstAndLastName struct {
	Constructor          TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone                string             `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	FirstName            string             `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             *types.StringValue `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLUserUpdatePredefinedFirstAndLastName) Reset() {
	*m = TLUserUpdatePredefinedFirstAndLastName{}
}
func (m *TLUserUpdatePredefinedFirstAndLastName) String() string { return proto.CompactTextString(m) }
func (*TLUserUpdatePredefinedFirstAndLastName) ProtoMessage()    {}
func (*TLUserUpdatePredefinedFirstAndLastName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{42}
}
func (m *TLUserUpdatePredefinedFirstAndLastName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUpdatePredefinedFirstAndLastName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUpdatePredefinedFirstAndLastName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUpdatePredefinedFirstAndLastName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUpdatePredefinedFirstAndLastName.Merge(m, src)
}
func (m *TLUserUpdatePredefinedFirstAndLastName) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUpdatePredefinedFirstAndLastName) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUpdatePredefinedFirstAndLastName.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUpdatePredefinedFirstAndLastName proto.InternalMessageInfo

func (m *TLUserUpdatePredefinedFirstAndLastName) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUpdatePredefinedFirstAndLastName) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLUserUpdatePredefinedFirstAndLastName) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLUserUpdatePredefinedFirstAndLastName) GetLastName() *types.StringValue {
	if m != nil {
		return m.LastName
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserUpdatePredefinedVerified struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone                string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Verified             bool          `protobuf:"varint,4,opt,name=verified,proto3" json:"verified,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserUpdatePredefinedVerified) Reset()         { *m = TLUserUpdatePredefinedVerified{} }
func (m *TLUserUpdatePredefinedVerified) String() string { return proto.CompactTextString(m) }
func (*TLUserUpdatePredefinedVerified) ProtoMessage()    {}
func (*TLUserUpdatePredefinedVerified) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{43}
}
func (m *TLUserUpdatePredefinedVerified) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUpdatePredefinedVerified) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUpdatePredefinedVerified.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUpdatePredefinedVerified) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUpdatePredefinedVerified.Merge(m, src)
}
func (m *TLUserUpdatePredefinedVerified) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUpdatePredefinedVerified) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUpdatePredefinedVerified.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUpdatePredefinedVerified proto.InternalMessageInfo

func (m *TLUserUpdatePredefinedVerified) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUpdatePredefinedVerified) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLUserUpdatePredefinedVerified) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

//--------------------------------------------------------------------------------------------
type TLUserUpdatePredefinedUsername struct {
	Constructor          TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone                string             `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Username             *types.StringValue `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLUserUpdatePredefinedUsername) Reset()         { *m = TLUserUpdatePredefinedUsername{} }
func (m *TLUserUpdatePredefinedUsername) String() string { return proto.CompactTextString(m) }
func (*TLUserUpdatePredefinedUsername) ProtoMessage()    {}
func (*TLUserUpdatePredefinedUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{44}
}
func (m *TLUserUpdatePredefinedUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUpdatePredefinedUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUpdatePredefinedUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUpdatePredefinedUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUpdatePredefinedUsername.Merge(m, src)
}
func (m *TLUserUpdatePredefinedUsername) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUpdatePredefinedUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUpdatePredefinedUsername.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUpdatePredefinedUsername proto.InternalMessageInfo

func (m *TLUserUpdatePredefinedUsername) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUpdatePredefinedUsername) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLUserUpdatePredefinedUsername) GetUsername() *types.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserUpdatePredefinedCode struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone                string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Code                 string        `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserUpdatePredefinedCode) Reset()         { *m = TLUserUpdatePredefinedCode{} }
func (m *TLUserUpdatePredefinedCode) String() string { return proto.CompactTextString(m) }
func (*TLUserUpdatePredefinedCode) ProtoMessage()    {}
func (*TLUserUpdatePredefinedCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{45}
}
func (m *TLUserUpdatePredefinedCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUpdatePredefinedCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUpdatePredefinedCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUpdatePredefinedCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUpdatePredefinedCode.Merge(m, src)
}
func (m *TLUserUpdatePredefinedCode) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUpdatePredefinedCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUpdatePredefinedCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUpdatePredefinedCode proto.InternalMessageInfo

func (m *TLUserUpdatePredefinedCode) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUpdatePredefinedCode) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLUserUpdatePredefinedCode) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLUserPredefinedBindRegisteredUserId struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone                string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	RegisteredUserId     int64         `protobuf:"varint,4,opt,name=registered_userId,json=registeredUserId,proto3" json:"registered_userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserPredefinedBindRegisteredUserId) Reset()         { *m = TLUserPredefinedBindRegisteredUserId{} }
func (m *TLUserPredefinedBindRegisteredUserId) String() string { return proto.CompactTextString(m) }
func (*TLUserPredefinedBindRegisteredUserId) ProtoMessage()    {}
func (*TLUserPredefinedBindRegisteredUserId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{46}
}
func (m *TLUserPredefinedBindRegisteredUserId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserPredefinedBindRegisteredUserId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserPredefinedBindRegisteredUserId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserPredefinedBindRegisteredUserId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserPredefinedBindRegisteredUserId.Merge(m, src)
}
func (m *TLUserPredefinedBindRegisteredUserId) XXX_Size() int {
	return m.Size()
}
func (m *TLUserPredefinedBindRegisteredUserId) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserPredefinedBindRegisteredUserId.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserPredefinedBindRegisteredUserId proto.InternalMessageInfo

func (m *TLUserPredefinedBindRegisteredUserId) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserPredefinedBindRegisteredUserId) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLUserPredefinedBindRegisteredUserId) GetRegisteredUserId() int64 {
	if m != nil {
		return m.RegisteredUserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserCreateNewUser struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	SecretKeyId          int64         `protobuf:"varint,3,opt,name=secret_key_id,json=secretKeyId,proto3" json:"secret_key_id,omitempty"`
	Phone                string        `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	CountryCode          string        `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	FirstName            string        `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string        `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserCreateNewUser) Reset()         { *m = TLUserCreateNewUser{} }
func (m *TLUserCreateNewUser) String() string { return proto.CompactTextString(m) }
func (*TLUserCreateNewUser) ProtoMessage()    {}
func (*TLUserCreateNewUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{47}
}
func (m *TLUserCreateNewUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserCreateNewUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserCreateNewUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserCreateNewUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserCreateNewUser.Merge(m, src)
}
func (m *TLUserCreateNewUser) XXX_Size() int {
	return m.Size()
}
func (m *TLUserCreateNewUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserCreateNewUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserCreateNewUser proto.InternalMessageInfo

func (m *TLUserCreateNewUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserCreateNewUser) GetSecretKeyId() int64 {
	if m != nil {
		return m.SecretKeyId
	}
	return 0
}

func (m *TLUserCreateNewUser) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *TLUserCreateNewUser) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *TLUserCreateNewUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLUserCreateNewUser) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLUserBlockPeer struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserBlockPeer) Reset()         { *m = TLUserBlockPeer{} }
func (m *TLUserBlockPeer) String() string { return proto.CompactTextString(m) }
func (*TLUserBlockPeer) ProtoMessage()    {}
func (*TLUserBlockPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{48}
}
func (m *TLUserBlockPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserBlockPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserBlockPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserBlockPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserBlockPeer.Merge(m, src)
}
func (m *TLUserBlockPeer) XXX_Size() int {
	return m.Size()
}
func (m *TLUserBlockPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserBlockPeer.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserBlockPeer proto.InternalMessageInfo

func (m *TLUserBlockPeer) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserBlockPeer) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserBlockPeer) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLUserBlockPeer) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserUnBlockPeer struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserUnBlockPeer) Reset()         { *m = TLUserUnBlockPeer{} }
func (m *TLUserUnBlockPeer) String() string { return proto.CompactTextString(m) }
func (*TLUserUnBlockPeer) ProtoMessage()    {}
func (*TLUserUnBlockPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{49}
}
func (m *TLUserUnBlockPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUnBlockPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUnBlockPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUnBlockPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUnBlockPeer.Merge(m, src)
}
func (m *TLUserUnBlockPeer) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUnBlockPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUnBlockPeer.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUnBlockPeer proto.InternalMessageInfo

func (m *TLUserUnBlockPeer) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUnBlockPeer) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserUnBlockPeer) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLUserUnBlockPeer) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserBlockedByUser struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerUserId           int64         `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserBlockedByUser) Reset()         { *m = TLUserBlockedByUser{} }
func (m *TLUserBlockedByUser) String() string { return proto.CompactTextString(m) }
func (*TLUserBlockedByUser) ProtoMessage()    {}
func (*TLUserBlockedByUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{50}
}
func (m *TLUserBlockedByUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserBlockedByUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserBlockedByUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserBlockedByUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserBlockedByUser.Merge(m, src)
}
func (m *TLUserBlockedByUser) XXX_Size() int {
	return m.Size()
}
func (m *TLUserBlockedByUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserBlockedByUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserBlockedByUser proto.InternalMessageInfo

func (m *TLUserBlockedByUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserBlockedByUser) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserBlockedByUser) GetPeerUserId() int64 {
	if m != nil {
		return m.PeerUserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserIsBlockedByUser struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerUserId           int64         `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserIsBlockedByUser) Reset()         { *m = TLUserIsBlockedByUser{} }
func (m *TLUserIsBlockedByUser) String() string { return proto.CompactTextString(m) }
func (*TLUserIsBlockedByUser) ProtoMessage()    {}
func (*TLUserIsBlockedByUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{51}
}
func (m *TLUserIsBlockedByUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserIsBlockedByUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserIsBlockedByUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserIsBlockedByUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserIsBlockedByUser.Merge(m, src)
}
func (m *TLUserIsBlockedByUser) XXX_Size() int {
	return m.Size()
}
func (m *TLUserIsBlockedByUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserIsBlockedByUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserIsBlockedByUser proto.InternalMessageInfo

func (m *TLUserIsBlockedByUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserIsBlockedByUser) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserIsBlockedByUser) GetPeerUserId() int64 {
	if m != nil {
		return m.PeerUserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserCheckBlockUserList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                   []int64       `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserCheckBlockUserList) Reset()         { *m = TLUserCheckBlockUserList{} }
func (m *TLUserCheckBlockUserList) String() string { return proto.CompactTextString(m) }
func (*TLUserCheckBlockUserList) ProtoMessage()    {}
func (*TLUserCheckBlockUserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{52}
}
func (m *TLUserCheckBlockUserList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserCheckBlockUserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserCheckBlockUserList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserCheckBlockUserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserCheckBlockUserList.Merge(m, src)
}
func (m *TLUserCheckBlockUserList) XXX_Size() int {
	return m.Size()
}
func (m *TLUserCheckBlockUserList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserCheckBlockUserList.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserCheckBlockUserList proto.InternalMessageInfo

func (m *TLUserCheckBlockUserList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserCheckBlockUserList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserCheckBlockUserList) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserGetBlockedList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset               int32         `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int32         `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetBlockedList) Reset()         { *m = TLUserGetBlockedList{} }
func (m *TLUserGetBlockedList) String() string { return proto.CompactTextString(m) }
func (*TLUserGetBlockedList) ProtoMessage()    {}
func (*TLUserGetBlockedList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{53}
}
func (m *TLUserGetBlockedList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetBlockedList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetBlockedList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetBlockedList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetBlockedList.Merge(m, src)
}
func (m *TLUserGetBlockedList) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetBlockedList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetBlockedList.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetBlockedList proto.InternalMessageInfo

func (m *TLUserGetBlockedList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetBlockedList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserGetBlockedList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLUserGetBlockedList) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetContactSignUpNotification struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetContactSignUpNotification) Reset()         { *m = TLUserGetContactSignUpNotification{} }
func (m *TLUserGetContactSignUpNotification) String() string { return proto.CompactTextString(m) }
func (*TLUserGetContactSignUpNotification) ProtoMessage()    {}
func (*TLUserGetContactSignUpNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{54}
}
func (m *TLUserGetContactSignUpNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetContactSignUpNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetContactSignUpNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetContactSignUpNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetContactSignUpNotification.Merge(m, src)
}
func (m *TLUserGetContactSignUpNotification) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetContactSignUpNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetContactSignUpNotification.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetContactSignUpNotification proto.InternalMessageInfo

func (m *TLUserGetContactSignUpNotification) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetContactSignUpNotification) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserSetContactSignUpNotification struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Silent               *mtproto.Bool `protobuf:"bytes,4,opt,name=silent,proto3" json:"silent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserSetContactSignUpNotification) Reset()         { *m = TLUserSetContactSignUpNotification{} }
func (m *TLUserSetContactSignUpNotification) String() string { return proto.CompactTextString(m) }
func (*TLUserSetContactSignUpNotification) ProtoMessage()    {}
func (*TLUserSetContactSignUpNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{55}
}
func (m *TLUserSetContactSignUpNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserSetContactSignUpNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserSetContactSignUpNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserSetContactSignUpNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserSetContactSignUpNotification.Merge(m, src)
}
func (m *TLUserSetContactSignUpNotification) XXX_Size() int {
	return m.Size()
}
func (m *TLUserSetContactSignUpNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserSetContactSignUpNotification.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserSetContactSignUpNotification proto.InternalMessageInfo

func (m *TLUserSetContactSignUpNotification) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserSetContactSignUpNotification) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserSetContactSignUpNotification) GetSilent() *mtproto.Bool {
	if m != nil {
		return m.Silent
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserGetContentSettings struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetContentSettings) Reset()         { *m = TLUserGetContentSettings{} }
func (m *TLUserGetContentSettings) String() string { return proto.CompactTextString(m) }
func (*TLUserGetContentSettings) ProtoMessage()    {}
func (*TLUserGetContentSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{56}
}
func (m *TLUserGetContentSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetContentSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetContentSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetContentSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetContentSettings.Merge(m, src)
}
func (m *TLUserGetContentSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetContentSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetContentSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetContentSettings proto.InternalMessageInfo

func (m *TLUserGetContentSettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetContentSettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserSetContentSettings struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SensitiveEnabled     bool          `protobuf:"varint,4,opt,name=sensitive_enabled,json=sensitiveEnabled,proto3" json:"sensitive_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserSetContentSettings) Reset()         { *m = TLUserSetContentSettings{} }
func (m *TLUserSetContentSettings) String() string { return proto.CompactTextString(m) }
func (*TLUserSetContentSettings) ProtoMessage()    {}
func (*TLUserSetContentSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{57}
}
func (m *TLUserSetContentSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserSetContentSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserSetContentSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserSetContentSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserSetContentSettings.Merge(m, src)
}
func (m *TLUserSetContentSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLUserSetContentSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserSetContentSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserSetContentSettings proto.InternalMessageInfo

func (m *TLUserSetContentSettings) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserSetContentSettings) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserSetContentSettings) GetSensitiveEnabled() bool {
	if m != nil {
		return m.SensitiveEnabled
	}
	return false
}

//--------------------------------------------------------------------------------------------
type TLUserDeleteContact struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                   int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserDeleteContact) Reset()         { *m = TLUserDeleteContact{} }
func (m *TLUserDeleteContact) String() string { return proto.CompactTextString(m) }
func (*TLUserDeleteContact) ProtoMessage()    {}
func (*TLUserDeleteContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{58}
}
func (m *TLUserDeleteContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserDeleteContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserDeleteContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserDeleteContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserDeleteContact.Merge(m, src)
}
func (m *TLUserDeleteContact) XXX_Size() int {
	return m.Size()
}
func (m *TLUserDeleteContact) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserDeleteContact.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserDeleteContact proto.InternalMessageInfo

func (m *TLUserDeleteContact) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserDeleteContact) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserDeleteContact) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetContactList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetContactList) Reset()         { *m = TLUserGetContactList{} }
func (m *TLUserGetContactList) String() string { return proto.CompactTextString(m) }
func (*TLUserGetContactList) ProtoMessage()    {}
func (*TLUserGetContactList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{59}
}
func (m *TLUserGetContactList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetContactList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetContactList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetContactList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetContactList.Merge(m, src)
}
func (m *TLUserGetContactList) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetContactList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetContactList.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetContactList proto.InternalMessageInfo

func (m *TLUserGetContactList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetContactList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetContactIdList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetContactIdList) Reset()         { *m = TLUserGetContactIdList{} }
func (m *TLUserGetContactIdList) String() string { return proto.CompactTextString(m) }
func (*TLUserGetContactIdList) ProtoMessage()    {}
func (*TLUserGetContactIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{60}
}
func (m *TLUserGetContactIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetContactIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetContactIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetContactIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetContactIdList.Merge(m, src)
}
func (m *TLUserGetContactIdList) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetContactIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetContactIdList.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetContactIdList proto.InternalMessageInfo

func (m *TLUserGetContactIdList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetContactIdList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetContact struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                   int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetContact) Reset()         { *m = TLUserGetContact{} }
func (m *TLUserGetContact) String() string { return proto.CompactTextString(m) }
func (*TLUserGetContact) ProtoMessage()    {}
func (*TLUserGetContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{61}
}
func (m *TLUserGetContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetContact.Merge(m, src)
}
func (m *TLUserGetContact) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetContact) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetContact.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetContact proto.InternalMessageInfo

func (m *TLUserGetContact) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetContact) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserGetContact) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserAddContact struct {
	Constructor              TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId                   int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AddPhonePrivacyException *mtproto.Bool `protobuf:"bytes,4,opt,name=add_phone_privacy_exception,json=addPhonePrivacyException,proto3" json:"add_phone_privacy_exception,omitempty"`
	Id                       int64         `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FirstName                string        `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName                 string        `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Phone                    string        `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}      `json:"-"`
	XXX_unrecognized         []byte        `json:"-"`
	XXX_sizecache            int32         `json:"-"`
}

func (m *TLUserAddContact) Reset()         { *m = TLUserAddContact{} }
func (m *TLUserAddContact) String() string { return proto.CompactTextString(m) }
func (*TLUserAddContact) ProtoMessage()    {}
func (*TLUserAddContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{62}
}
func (m *TLUserAddContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserAddContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserAddContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserAddContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserAddContact.Merge(m, src)
}
func (m *TLUserAddContact) XXX_Size() int {
	return m.Size()
}
func (m *TLUserAddContact) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserAddContact.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserAddContact proto.InternalMessageInfo

func (m *TLUserAddContact) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserAddContact) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserAddContact) GetAddPhonePrivacyException() *mtproto.Bool {
	if m != nil {
		return m.AddPhonePrivacyException
	}
	return nil
}

func (m *TLUserAddContact) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLUserAddContact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLUserAddContact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *TLUserAddContact) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLUserCheckContact struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                   int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserCheckContact) Reset()         { *m = TLUserCheckContact{} }
func (m *TLUserCheckContact) String() string { return proto.CompactTextString(m) }
func (*TLUserCheckContact) ProtoMessage()    {}
func (*TLUserCheckContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{63}
}
func (m *TLUserCheckContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserCheckContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserCheckContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserCheckContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserCheckContact.Merge(m, src)
}
func (m *TLUserCheckContact) XXX_Size() int {
	return m.Size()
}
func (m *TLUserCheckContact) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserCheckContact.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserCheckContact proto.InternalMessageInfo

func (m *TLUserCheckContact) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserCheckContact) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserCheckContact) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserImportContacts struct {
	Constructor          TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Contacts             []*mtproto.InputContact `protobuf:"bytes,4,rep,name=contacts,proto3" json:"contacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TLUserImportContacts) Reset()         { *m = TLUserImportContacts{} }
func (m *TLUserImportContacts) String() string { return proto.CompactTextString(m) }
func (*TLUserImportContacts) ProtoMessage()    {}
func (*TLUserImportContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{64}
}
func (m *TLUserImportContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserImportContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserImportContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserImportContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserImportContacts.Merge(m, src)
}
func (m *TLUserImportContacts) XXX_Size() int {
	return m.Size()
}
func (m *TLUserImportContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserImportContacts.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserImportContacts proto.InternalMessageInfo

func (m *TLUserImportContacts) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserImportContacts) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserImportContacts) GetContacts() []*mtproto.InputContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserGetCountryCode struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetCountryCode) Reset()         { *m = TLUserGetCountryCode{} }
func (m *TLUserGetCountryCode) String() string { return proto.CompactTextString(m) }
func (*TLUserGetCountryCode) ProtoMessage()    {}
func (*TLUserGetCountryCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{65}
}
func (m *TLUserGetCountryCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetCountryCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetCountryCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetCountryCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetCountryCode.Merge(m, src)
}
func (m *TLUserGetCountryCode) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetCountryCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetCountryCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetCountryCode proto.InternalMessageInfo

func (m *TLUserGetCountryCode) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetCountryCode) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserUpdateAbout struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	About                string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserUpdateAbout) Reset()         { *m = TLUserUpdateAbout{} }
func (m *TLUserUpdateAbout) String() string { return proto.CompactTextString(m) }
func (*TLUserUpdateAbout) ProtoMessage()    {}
func (*TLUserUpdateAbout) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{66}
}
func (m *TLUserUpdateAbout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUpdateAbout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUpdateAbout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUpdateAbout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUpdateAbout.Merge(m, src)
}
func (m *TLUserUpdateAbout) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUpdateAbout) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUpdateAbout.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUpdateAbout proto.InternalMessageInfo

func (m *TLUserUpdateAbout) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUpdateAbout) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserUpdateAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLUserUpdateFirstAndLastName struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FirstName            string        `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string        `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserUpdateFirstAndLastName) Reset()         { *m = TLUserUpdateFirstAndLastName{} }
func (m *TLUserUpdateFirstAndLastName) String() string { return proto.CompactTextString(m) }
func (*TLUserUpdateFirstAndLastName) ProtoMessage()    {}
func (*TLUserUpdateFirstAndLastName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{67}
}
func (m *TLUserUpdateFirstAndLastName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUpdateFirstAndLastName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUpdateFirstAndLastName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUpdateFirstAndLastName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUpdateFirstAndLastName.Merge(m, src)
}
func (m *TLUserUpdateFirstAndLastName) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUpdateFirstAndLastName) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUpdateFirstAndLastName.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUpdateFirstAndLastName proto.InternalMessageInfo

func (m *TLUserUpdateFirstAndLastName) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUpdateFirstAndLastName) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserUpdateFirstAndLastName) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLUserUpdateFirstAndLastName) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLUserUpdateVerified struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Verified             *mtproto.Bool `protobuf:"bytes,4,opt,name=verified,proto3" json:"verified,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserUpdateVerified) Reset()         { *m = TLUserUpdateVerified{} }
func (m *TLUserUpdateVerified) String() string { return proto.CompactTextString(m) }
func (*TLUserUpdateVerified) ProtoMessage()    {}
func (*TLUserUpdateVerified) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{68}
}
func (m *TLUserUpdateVerified) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUpdateVerified) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUpdateVerified.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUpdateVerified) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUpdateVerified.Merge(m, src)
}
func (m *TLUserUpdateVerified) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUpdateVerified) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUpdateVerified.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUpdateVerified proto.InternalMessageInfo

func (m *TLUserUpdateVerified) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUpdateVerified) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserUpdateVerified) GetVerified() *mtproto.Bool {
	if m != nil {
		return m.Verified
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserUpdateUsername struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username             string        `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserUpdateUsername) Reset()         { *m = TLUserUpdateUsername{} }
func (m *TLUserUpdateUsername) String() string { return proto.CompactTextString(m) }
func (*TLUserUpdateUsername) ProtoMessage()    {}
func (*TLUserUpdateUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{69}
}
func (m *TLUserUpdateUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUpdateUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUpdateUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUpdateUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUpdateUsername.Merge(m, src)
}
func (m *TLUserUpdateUsername) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUpdateUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUpdateUsername.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUpdateUsername proto.InternalMessageInfo

func (m *TLUserUpdateUsername) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUpdateUsername) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserUpdateUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLUserUpdateProfilePhoto struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                   int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserUpdateProfilePhoto) Reset()         { *m = TLUserUpdateProfilePhoto{} }
func (m *TLUserUpdateProfilePhoto) String() string { return proto.CompactTextString(m) }
func (*TLUserUpdateProfilePhoto) ProtoMessage()    {}
func (*TLUserUpdateProfilePhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{70}
}
func (m *TLUserUpdateProfilePhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserUpdateProfilePhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserUpdateProfilePhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserUpdateProfilePhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserUpdateProfilePhoto.Merge(m, src)
}
func (m *TLUserUpdateProfilePhoto) XXX_Size() int {
	return m.Size()
}
func (m *TLUserUpdateProfilePhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserUpdateProfilePhoto.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserUpdateProfilePhoto proto.InternalMessageInfo

func (m *TLUserUpdateProfilePhoto) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserUpdateProfilePhoto) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserUpdateProfilePhoto) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserDeleteProfilePhotos struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                   []int64       `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserDeleteProfilePhotos) Reset()         { *m = TLUserDeleteProfilePhotos{} }
func (m *TLUserDeleteProfilePhotos) String() string { return proto.CompactTextString(m) }
func (*TLUserDeleteProfilePhotos) ProtoMessage()    {}
func (*TLUserDeleteProfilePhotos) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{71}
}
func (m *TLUserDeleteProfilePhotos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserDeleteProfilePhotos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserDeleteProfilePhotos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserDeleteProfilePhotos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserDeleteProfilePhotos.Merge(m, src)
}
func (m *TLUserDeleteProfilePhotos) XXX_Size() int {
	return m.Size()
}
func (m *TLUserDeleteProfilePhotos) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserDeleteProfilePhotos.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserDeleteProfilePhotos proto.InternalMessageInfo

func (m *TLUserDeleteProfilePhotos) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserDeleteProfilePhotos) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserDeleteProfilePhotos) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserGetProfilePhotos struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetProfilePhotos) Reset()         { *m = TLUserGetProfilePhotos{} }
func (m *TLUserGetProfilePhotos) String() string { return proto.CompactTextString(m) }
func (*TLUserGetProfilePhotos) ProtoMessage()    {}
func (*TLUserGetProfilePhotos) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{72}
}
func (m *TLUserGetProfilePhotos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetProfilePhotos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetProfilePhotos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetProfilePhotos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetProfilePhotos.Merge(m, src)
}
func (m *TLUserGetProfilePhotos) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetProfilePhotos) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetProfilePhotos.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetProfilePhotos proto.InternalMessageInfo

func (m *TLUserGetProfilePhotos) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetProfilePhotos) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserSetBotCommands struct {
	Constructor          TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId               int64                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotId                int64                 `protobuf:"varint,4,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Commands             []*mtproto.BotCommand `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLUserSetBotCommands) Reset()         { *m = TLUserSetBotCommands{} }
func (m *TLUserSetBotCommands) String() string { return proto.CompactTextString(m) }
func (*TLUserSetBotCommands) ProtoMessage()    {}
func (*TLUserSetBotCommands) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{73}
}
func (m *TLUserSetBotCommands) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserSetBotCommands) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserSetBotCommands.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserSetBotCommands) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserSetBotCommands.Merge(m, src)
}
func (m *TLUserSetBotCommands) XXX_Size() int {
	return m.Size()
}
func (m *TLUserSetBotCommands) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserSetBotCommands.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserSetBotCommands proto.InternalMessageInfo

func (m *TLUserSetBotCommands) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserSetBotCommands) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUserSetBotCommands) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *TLUserSetBotCommands) GetCommands() []*mtproto.BotCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLUserIsBot struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id                   int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserIsBot) Reset()         { *m = TLUserIsBot{} }
func (m *TLUserIsBot) String() string { return proto.CompactTextString(m) }
func (*TLUserIsBot) ProtoMessage()    {}
func (*TLUserIsBot) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{74}
}
func (m *TLUserIsBot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserIsBot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserIsBot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserIsBot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserIsBot.Merge(m, src)
}
func (m *TLUserIsBot) XXX_Size() int {
	return m.Size()
}
func (m *TLUserIsBot) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserIsBot.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserIsBot proto.InternalMessageInfo

func (m *TLUserIsBot) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserIsBot) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetBotInfo struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	BotId                int64         `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetBotInfo) Reset()         { *m = TLUserGetBotInfo{} }
func (m *TLUserGetBotInfo) String() string { return proto.CompactTextString(m) }
func (*TLUserGetBotInfo) ProtoMessage()    {}
func (*TLUserGetBotInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{75}
}
func (m *TLUserGetBotInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetBotInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetBotInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetBotInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetBotInfo.Merge(m, src)
}
func (m *TLUserGetBotInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetBotInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetBotInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetBotInfo proto.InternalMessageInfo

func (m *TLUserGetBotInfo) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetBotInfo) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLUserGetFullUser struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	SelfUserId           int64         `protobuf:"varint,3,opt,name=self_user_id,json=selfUserId,proto3" json:"self_user_id,omitempty"`
	Id                   int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUserGetFullUser) Reset()         { *m = TLUserGetFullUser{} }
func (m *TLUserGetFullUser) String() string { return proto.CompactTextString(m) }
func (*TLUserGetFullUser) ProtoMessage()    {}
func (*TLUserGetFullUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{76}
}
func (m *TLUserGetFullUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserGetFullUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserGetFullUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserGetFullUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserGetFullUser.Merge(m, src)
}
func (m *TLUserGetFullUser) XXX_Size() int {
	return m.Size()
}
func (m *TLUserGetFullUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserGetFullUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserGetFullUser proto.InternalMessageInfo

func (m *TLUserGetFullUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUserGetFullUser) GetSelfUserId() int64 {
	if m != nil {
		return m.SelfUserId
	}
	return 0
}

func (m *TLUserGetFullUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// Vector api result type
type Vector_LastSeenData struct {
	Datas                []*LastSeenData `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Vector_LastSeenData) Reset()         { *m = Vector_LastSeenData{} }
func (m *Vector_LastSeenData) String() string { return proto.CompactTextString(m) }
func (*Vector_LastSeenData) ProtoMessage()    {}
func (*Vector_LastSeenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{77}
}
func (m *Vector_LastSeenData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_LastSeenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_LastSeenData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_LastSeenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_LastSeenData.Merge(m, src)
}
func (m *Vector_LastSeenData) XXX_Size() int {
	return m.Size()
}
func (m *Vector_LastSeenData) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_LastSeenData.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_LastSeenData proto.InternalMessageInfo

func (m *Vector_LastSeenData) GetDatas() []*LastSeenData {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_ImmutableUser struct {
	Datas                []*ImmutableUser `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Vector_ImmutableUser) Reset()         { *m = Vector_ImmutableUser{} }
func (m *Vector_ImmutableUser) String() string { return proto.CompactTextString(m) }
func (*Vector_ImmutableUser) ProtoMessage()    {}
func (*Vector_ImmutableUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{78}
}
func (m *Vector_ImmutableUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_ImmutableUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_ImmutableUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_ImmutableUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_ImmutableUser.Merge(m, src)
}
func (m *Vector_ImmutableUser) XXX_Size() int {
	return m.Size()
}
func (m *Vector_ImmutableUser) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_ImmutableUser.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_ImmutableUser proto.InternalMessageInfo

func (m *Vector_ImmutableUser) GetDatas() []*ImmutableUser {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_PeerPeerNotifySettings struct {
	Datas                []*PeerPeerNotifySettings `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Vector_PeerPeerNotifySettings) Reset()         { *m = Vector_PeerPeerNotifySettings{} }
func (m *Vector_PeerPeerNotifySettings) String() string { return proto.CompactTextString(m) }
func (*Vector_PeerPeerNotifySettings) ProtoMessage()    {}
func (*Vector_PeerPeerNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{79}
}
func (m *Vector_PeerPeerNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_PeerPeerNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_PeerPeerNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_PeerPeerNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_PeerPeerNotifySettings.Merge(m, src)
}
func (m *Vector_PeerPeerNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *Vector_PeerPeerNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_PeerPeerNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_PeerPeerNotifySettings proto.InternalMessageInfo

func (m *Vector_PeerPeerNotifySettings) GetDatas() []*PeerPeerNotifySettings {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_PrivacyRule struct {
	Datas                []*mtproto.PrivacyRule `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Vector_PrivacyRule) Reset()         { *m = Vector_PrivacyRule{} }
func (m *Vector_PrivacyRule) String() string { return proto.CompactTextString(m) }
func (*Vector_PrivacyRule) ProtoMessage()    {}
func (*Vector_PrivacyRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{80}
}
func (m *Vector_PrivacyRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_PrivacyRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_PrivacyRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_PrivacyRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_PrivacyRule.Merge(m, src)
}
func (m *Vector_PrivacyRule) XXX_Size() int {
	return m.Size()
}
func (m *Vector_PrivacyRule) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_PrivacyRule.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_PrivacyRule proto.InternalMessageInfo

func (m *Vector_PrivacyRule) GetDatas() []*mtproto.PrivacyRule {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_PredefinedUser struct {
	Datas                []*mtproto.PredefinedUser `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Vector_PredefinedUser) Reset()         { *m = Vector_PredefinedUser{} }
func (m *Vector_PredefinedUser) String() string { return proto.CompactTextString(m) }
func (*Vector_PredefinedUser) ProtoMessage()    {}
func (*Vector_PredefinedUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{81}
}
func (m *Vector_PredefinedUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_PredefinedUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_PredefinedUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_PredefinedUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_PredefinedUser.Merge(m, src)
}
func (m *Vector_PredefinedUser) XXX_Size() int {
	return m.Size()
}
func (m *Vector_PredefinedUser) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_PredefinedUser.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_PredefinedUser proto.InternalMessageInfo

func (m *Vector_PredefinedUser) GetDatas() []*mtproto.PredefinedUser {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_Long struct {
	Datas                []int64  `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector_Long) Reset()         { *m = Vector_Long{} }
func (m *Vector_Long) String() string { return proto.CompactTextString(m) }
func (*Vector_Long) ProtoMessage()    {}
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{82}
}
func (m *Vector_Long) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_Long) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_Long.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_Long) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_Long.Merge(m, src)
}
func (m *Vector_Long) XXX_Size() int {
	return m.Size()
}
func (m *Vector_Long) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_Long.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_Long proto.InternalMessageInfo

func (m *Vector_Long) GetDatas() []int64 {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_PeerBlocked struct {
	Datas                []*mtproto.PeerBlocked `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Vector_PeerBlocked) Reset()         { *m = Vector_PeerBlocked{} }
func (m *Vector_PeerBlocked) String() string { return proto.CompactTextString(m) }
func (*Vector_PeerBlocked) ProtoMessage()    {}
func (*Vector_PeerBlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{83}
}
func (m *Vector_PeerBlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_PeerBlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_PeerBlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_PeerBlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_PeerBlocked.Merge(m, src)
}
func (m *Vector_PeerBlocked) XXX_Size() int {
	return m.Size()
}
func (m *Vector_PeerBlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_PeerBlocked.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_PeerBlocked proto.InternalMessageInfo

func (m *Vector_PeerBlocked) GetDatas() []*mtproto.PeerBlocked {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_ContactData struct {
	Datas                []*ContactData `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Vector_ContactData) Reset()         { *m = Vector_ContactData{} }
func (m *Vector_ContactData) String() string { return proto.CompactTextString(m) }
func (*Vector_ContactData) ProtoMessage()    {}
func (*Vector_ContactData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e3d997b4637694, []int{84}
}
func (m *Vector_ContactData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_ContactData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_ContactData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_ContactData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_ContactData.Merge(m, src)
}
func (m *Vector_ContactData) XXX_Size() int {
	return m.Size()
}
func (m *Vector_ContactData) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_ContactData.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_ContactData proto.InternalMessageInfo

func (m *Vector_ContactData) GetDatas() []*ContactData {
	if m != nil {
		return m.Datas
	}
	return nil
}

func init() {
	proto.RegisterEnum("user.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*BotData)(nil), "user.BotData")
	proto.RegisterType((*TLBotData)(nil), "user.TL_botData")
	proto.RegisterType((*ContactData)(nil), "user.ContactData")
	proto.RegisterType((*TLContactData)(nil), "user.TL_contactData")
	proto.RegisterType((*ImmutableUser)(nil), "user.ImmutableUser")
	proto.RegisterType((*TLImmutableUser)(nil), "user.TL_immutableUser")
	proto.RegisterType((*LastSeenData)(nil), "user.LastSeenData")
	proto.RegisterType((*TLLastSeenData)(nil), "user.TL_lastSeenData")
	proto.RegisterType((*PeerPeerNotifySettings)(nil), "user.PeerPeerNotifySettings")
	proto.RegisterType((*TLPeerPeerNotifySettings)(nil), "user.TL_peerPeerNotifySettings")
	proto.RegisterType((*PrivacyKeyRules)(nil), "user.PrivacyKeyRules")
	proto.RegisterType((*TLPrivacyKeyRules)(nil), "user.TL_privacyKeyRules")
	proto.RegisterType((*UserData)(nil), "user.UserData")
	proto.RegisterType((*TLUserData)(nil), "user.TL_userData")
	proto.RegisterType((*UserImportedContacts)(nil), "user.UserImportedContacts")
	proto.RegisterType((*TLUserImportedContacts)(nil), "user.TL_userImportedContacts")
	proto.RegisterType((*TLUserGetLastSeens)(nil), "user.TL_user_getLastSeens")
	proto.RegisterType((*TLUserUpdateLastSeen)(nil), "user.TL_user_updateLastSeen")
	proto.RegisterType((*TLUserGetLastSeen)(nil), "user.TL_user_getLastSeen")
	proto.RegisterType((*TLUserGetImmutableUser)(nil), "user.TL_user_getImmutableUser")
	proto.RegisterType((*TLUserGetMutableUsers)(nil), "user.TL_user_getMutableUsers")
	proto.RegisterType((*TLUserGetImmutableUserByPhone)(nil), "user.TL_user_getImmutableUserByPhone")
	proto.RegisterType((*TLUserGetImmutableUserByToken)(nil), "user.TL_user_getImmutableUserByToken")
	proto.RegisterType((*TLUserSetAccountDaysTTL)(nil), "user.TL_user_setAccountDaysTTL")
	proto.RegisterType((*TLUserGetAccountDaysTTL)(nil), "user.TL_user_getAccountDaysTTL")
	proto.RegisterType((*TLUserGetNotifySettings)(nil), "user.TL_user_getNotifySettings")
	proto.RegisterType((*TLUserGetNotifySettingsList)(nil), "user.TL_user_getNotifySettingsList")
	proto.RegisterType((*TLUserSetNotifySettings)(nil), "user.TL_user_setNotifySettings")
	proto.RegisterType((*TLUserResetNotifySettings)(nil), "user.TL_user_resetNotifySettings")
	proto.RegisterType((*TLUserGetAllNotifySettings)(nil), "user.TL_user_getAllNotifySettings")
	proto.RegisterType((*TLUserGetGlobalPrivacySettings)(nil), "user.TL_user_getGlobalPrivacySettings")
	proto.RegisterType((*TLUserSetGlobalPrivacySettings)(nil), "user.TL_user_setGlobalPrivacySettings")
	proto.RegisterType((*TLUserGetPrivacy)(nil), "user.TL_user_getPrivacy")
	proto.RegisterType((*TLUserSetPrivacy)(nil), "user.TL_user_setPrivacy")
	proto.RegisterType((*TLUserCheckPrivacy)(nil), "user.TL_user_checkPrivacy")
	proto.RegisterType((*TLUserAddPeerSettings)(nil), "user.TL_user_addPeerSettings")
	proto.RegisterType((*TLUserGetPeerSettings)(nil), "user.TL_user_getPeerSettings")
	proto.RegisterType((*TLUserDeletePeerSettings)(nil), "user.TL_user_deletePeerSettings")
	proto.RegisterType((*TLUserChangePhone)(nil), "user.TL_user_changePhone")
	proto.RegisterType((*TLUserCreateNewPredefinedUser)(nil), "user.TL_user_createNewPredefinedUser")
	proto.RegisterType((*TLUserGetPredefinedUser)(nil), "user.TL_user_getPredefinedUser")
	proto.RegisterType((*TLUserGetAllPredefinedUser)(nil), "user.TL_user_getAllPredefinedUser")
	proto.RegisterType((*TLUserUpdatePredefinedFirstAndLastName)(nil), "user.TL_user_updatePredefinedFirstAndLastName")
	proto.RegisterType((*TLUserUpdatePredefinedVerified)(nil), "user.TL_user_updatePredefinedVerified")
	proto.RegisterType((*TLUserUpdatePredefinedUsername)(nil), "user.TL_user_updatePredefinedUsername")
	proto.RegisterType((*TLUserUpdatePredefinedCode)(nil), "user.TL_user_updatePredefinedCode")
	proto.RegisterType((*TLUserPredefinedBindRegisteredUserId)(nil), "user.TL_user_predefinedBindRegisteredUserId")
	proto.RegisterType((*TLUserCreateNewUser)(nil), "user.TL_user_createNewUser")
	proto.RegisterType((*TLUserBlockPeer)(nil), "user.TL_user_blockPeer")
	proto.RegisterType((*TLUserUnBlockPeer)(nil), "user.TL_user_unBlockPeer")
	proto.RegisterType((*TLUserBlockedByUser)(nil), "user.TL_user_blockedByUser")
	proto.RegisterType((*TLUserIsBlockedByUser)(nil), "user.TL_user_isBlockedByUser")
	proto.RegisterType((*TLUserCheckBlockUserList)(nil), "user.TL_user_checkBlockUserList")
	proto.RegisterType((*TLUserGetBlockedList)(nil), "user.TL_user_getBlockedList")
	proto.RegisterType((*TLUserGetContactSignUpNotification)(nil), "user.TL_user_getContactSignUpNotification")
	proto.RegisterType((*TLUserSetContactSignUpNotification)(nil), "user.TL_user_setContactSignUpNotification")
	proto.RegisterType((*TLUserGetContentSettings)(nil), "user.TL_user_getContentSettings")
	proto.RegisterType((*TLUserSetContentSettings)(nil), "user.TL_user_setContentSettings")
	proto.RegisterType((*TLUserDeleteContact)(nil), "user.TL_user_deleteContact")
	proto.RegisterType((*TLUserGetContactList)(nil), "user.TL_user_getContactList")
	proto.RegisterType((*TLUserGetContactIdList)(nil), "user.TL_user_getContactIdList")
	proto.RegisterType((*TLUserGetContact)(nil), "user.TL_user_getContact")
	proto.RegisterType((*TLUserAddContact)(nil), "user.TL_user_addContact")
	proto.RegisterType((*TLUserCheckContact)(nil), "user.TL_user_checkContact")
	proto.RegisterType((*TLUserImportContacts)(nil), "user.TL_user_importContacts")
	proto.RegisterType((*TLUserGetCountryCode)(nil), "user.TL_user_getCountryCode")
	proto.RegisterType((*TLUserUpdateAbout)(nil), "user.TL_user_updateAbout")
	proto.RegisterType((*TLUserUpdateFirstAndLastName)(nil), "user.TL_user_updateFirstAndLastName")
	proto.RegisterType((*TLUserUpdateVerified)(nil), "user.TL_user_updateVerified")
	proto.RegisterType((*TLUserUpdateUsername)(nil), "user.TL_user_updateUsername")
	proto.RegisterType((*TLUserUpdateProfilePhoto)(nil), "user.TL_user_updateProfilePhoto")
	proto.RegisterType((*TLUserDeleteProfilePhotos)(nil), "user.TL_user_deleteProfilePhotos")
	proto.RegisterType((*TLUserGetProfilePhotos)(nil), "user.TL_user_getProfilePhotos")
	proto.RegisterType((*TLUserSetBotCommands)(nil), "user.TL_user_setBotCommands")
	proto.RegisterType((*TLUserIsBot)(nil), "user.TL_user_isBot")
	proto.RegisterType((*TLUserGetBotInfo)(nil), "user.TL_user_getBotInfo")
	proto.RegisterType((*TLUserGetFullUser)(nil), "user.TL_user_getFullUser")
	proto.RegisterType((*Vector_LastSeenData)(nil), "user.Vector_LastSeenData")
	proto.RegisterType((*Vector_ImmutableUser)(nil), "user.Vector_ImmutableUser")
	proto.RegisterType((*Vector_PeerPeerNotifySettings)(nil), "user.Vector_PeerPeerNotifySettings")
	proto.RegisterType((*Vector_PrivacyRule)(nil), "user.Vector_PrivacyRule")
	proto.RegisterType((*Vector_PredefinedUser)(nil), "user.Vector_PredefinedUser")
	proto.RegisterType((*Vector_Long)(nil), "user.Vector_Long")
	proto.RegisterType((*Vector_PeerBlocked)(nil), "user.Vector_PeerBlocked")
	proto.RegisterType((*Vector_ContactData)(nil), "user.Vector_ContactData")
}

func init() { proto.RegisterFile("user.tl.proto", fileDescriptor_d6e3d997b4637694) }

var fileDescriptor_d6e3d997b4637694 = []byte{
	// 4614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3c, 0x6d, 0x74, 0x1c, 0xd5,
	0x75, 0x5a, 0xed, 0xae, 0x24, 0x3f, 0x59, 0xf2, 0xd3, 0x58, 0xb2, 0x47, 0x2b, 0x4b, 0x5e, 0x8f,
	0xbf, 0x64, 0x3b, 0x96, 0xc1, 0xa6, 0x1f, 0x49, 0x4a, 0x83, 0x25, 0x02, 0xa8, 0x08, 0xe3, 0xae,
	0x65, 0xb7, 0x27, 0x27, 0xed, 0x76, 0x76, 0xf7, 0x49, 0x9a, 0x6a, 0x35, 0xb3, 0x67, 0x66, 0xd6,
	0x44, 0x6d, 0xd3, 0x04, 0x12, 0x02, 0x39, 0x3e, 0x18, 0x4a, 0x09, 0x85, 0x10, 0x70, 0x13, 0x1c,
	0x52, 0x3e, 0xeb, 0xe4, 0xd0, 0x73, 0x38, 0x6e, 0xda, 0xe6, 0xa3, 0x27, 0x40, 0xe8, 0x21, 0x0e,
	0xc9, 0x31, 0x69, 0x7c, 0xc0, 0x01, 0xe3, 0xb8, 0x10, 0x0e, 0x49, 0xdb, 0xa4, 0xb1, 0x8b, 0x8d,
	0x7a, 0xe6, 0x7d, 0xcc, 0xbc, 0x37, 0xf3, 0x66, 0x25, 0x2c, 0xad, 0x71, 0x7f, 0xc0, 0xd9, 0x79,
	0xf7, 0xbe, 0x7b, 0xef, 0xbb, 0xef, 0xde, 0xf7, 0xee, 0xbd, 0xef, 0x5a, 0xa0, 0xad, 0xea, 0x20,
	0x7b, 0xc0, 0x2d, 0x0f, 0x54, 0x6c, 0xcb, 0xb5, 0x94, 0x94, 0xf7, 0x99, 0xd9, 0x3c, 0x6e, 0xb8,
	0x13, 0xd5, 0xc2, 0x40, 0xd1, 0x9a, 0xda, 0x32, 0x6e, 0x8d, 0x5b, 0x5b, 0x30, 0xb0, 0x50, 0x1d,
	0xc3, 0x5f, 0xf8, 0x03, 0xff, 0x22, 0x93, 0x32, 0x7d, 0xe3, 0x96, 0x35, 0x5e, 0x46, 0x01, 0xd6,
	0x0d, 0xb6, 0x5e, 0xa9, 0x20, 0xdb, 0xa1, 0xf0, 0x8c, 0x53, 0x9c, 0x40, 0x53, 0xba, 0xc7, 0xa5,
	0x68, 0xd9, 0x28, 0xef, 0x4e, 0x57, 0x10, 0x83, 0x75, 0x07, 0x30, 0xd7, 0xd6, 0x4d, 0xa7, 0x62,
	0xd9, 0x2e, 0x05, 0x75, 0x06, 0x20, 0x67, 0xda, 0x2c, 0x92, 0x51, 0xed, 0x07, 0x49, 0xd0, 0x3c,
	0x68, 0xb9, 0x57, 0xea, 0xae, 0xae, 0xac, 0x05, 0xed, 0x15, 0x1b, 0x95, 0x8c, 0xa2, 0xee, 0xa2,
	0xbc, 0xa9, 0x4f, 0x21, 0x35, 0x91, 0x4d, 0xf4, 0x2f, 0xca, 0xb5, 0xf9, 0xa3, 0x3b, 0xf4, 0x29,
	0xa4, 0xfc, 0x06, 0x68, 0x2d, 0x5a, 0xa6, 0xe3, 0xda, 0xd5, 0xa2, 0x6b, 0xd9, 0x6a, 0x63, 0x36,
	0xd1, 0xdf, 0xbe, 0x75, 0xe9, 0x00, 0x5e, 0xf9, 0xe8, 0xc8, 0x50, 0x00, 0xca, 0xf1, 0x78, 0x4a,
	0x3b, 0x68, 0x34, 0x4a, 0x6a, 0x32, 0x9b, 0xe8, 0x4f, 0xe6, 0x1a, 0x8d, 0x92, 0xd2, 0x0d, 0x5a,
	0x0a, 0x96, 0x8b, 0xa5, 0x57, 0x53, 0xd9, 0x44, 0x7f, 0x3a, 0xd7, 0x5c, 0xb0, 0xdc, 0xd1, 0xe9,
	0x0a, 0x52, 0x54, 0xd0, 0x5c, 0xb4, 0x91, 0xee, 0x51, 0x4f, 0x63, 0x7c, 0xf6, 0xa9, 0x74, 0x82,
	0xb4, 0x6b, 0x4d, 0x22, 0x53, 0x6d, 0xc2, 0x92, 0x91, 0x0f, 0x25, 0x0b, 0x5a, 0x4b, 0xc8, 0x29,
	0xda, 0x46, 0xc5, 0x35, 0x2c, 0x53, 0x6d, 0xc6, 0x30, 0x7e, 0x48, 0xe9, 0x07, 0xd0, 0x63, 0x56,
	0x9c, 0xd0, 0xdd, 0xfc, 0x84, 0xe1, 0xb8, 0x96, 0x3d, 0xad, 0xb6, 0x64, 0x13, 0xfd, 0x2d, 0xb9,
	0xf6, 0x82, 0xe5, 0x0e, 0x4d, 0xe8, 0xee, 0x35, 0x64, 0x54, 0x59, 0x09, 0x5a, 0x3d, 0x4c, 0xd3,
	0xf2, 0x70, 0x1d, 0x75, 0x11, 0x46, 0x02, 0x05, 0xcb, 0xdd, 0x41, 0x46, 0x94, 0x35, 0xc0, 0x9b,
	0x92, 0x37, 0xcc, 0xb2, 0x61, 0xa2, 0xfc, 0x38, 0xb2, 0x54, 0x80, 0x71, 0x16, 0x17, 0x2c, 0x77,
	0x18, 0x0f, 0x5e, 0x8d, 0x2c, 0xc6, 0xd0, 0x30, 0xc7, 0xac, 0xfc, 0x5e, 0x64, 0x3b, 0x9e, 0x5c,
	0xad, 0x78, 0x95, 0xed, 0x18, 0x6f, 0xcc, 0xda, 0x43, 0x46, 0x95, 0x1c, 0x58, 0xc6, 0xd1, 0xab,
	0x94, 0xf5, 0x22, 0x9a, 0xb0, 0xca, 0x25, 0x64, 0xab, 0x8b, 0xb3, 0x89, 0xfe, 0xd6, 0xad, 0x2b,
	0x06, 0x88, 0x3d, 0x0c, 0x30, 0x7b, 0x18, 0xd8, 0xe5, 0xda, 0x86, 0x39, 0xbe, 0x47, 0x2f, 0x57,
	0x51, 0xae, 0xd3, 0xe7, 0xba, 0x33, 0x98, 0xa9, 0x5d, 0x0a, 0xc0, 0xe8, 0x48, 0xbe, 0x40, 0xf7,
	0x75, 0x35, 0x48, 0x97, 0x74, 0x57, 0xdf, 0x8a, 0xb7, 0xb3, 0x75, 0x6b, 0x1b, 0xd9, 0x2a, 0xba,
	0xeb, 0x39, 0x02, 0xd3, 0x9e, 0x6b, 0x04, 0xad, 0x43, 0x96, 0xe9, 0xea, 0xc5, 0x0b, 0x61, 0x0c,
	0xcb, 0x41, 0xb3, 0x87, 0x92, 0xf7, 0x2d, 0xa2, 0xc9, 0xfb, 0x1c, 0x2e, 0x29, 0xeb, 0xc0, 0x92,
	0x22, 0x91, 0x22, 0xcf, 0x10, 0x52, 0x18, 0xa1, 0x8d, 0x0e, 0xef, 0x26, 0x78, 0x1f, 0x04, 0x60,
	0xcc, 0xb0, 0x1d, 0x97, 0x88, 0x96, 0x9e, 0x83, 0xa6, 0x16, 0x61, 0x7c, 0x2c, 0xf4, 0xfb, 0xc1,
	0xa2, 0xb2, 0xce, 0xe6, 0x36, 0xcd, 0x61, 0x6e, 0x8b, 0x87, 0x8e, 0xa7, 0xae, 0x05, 0xed, 0x53,
	0x55, 0xb7, 0xaa, 0x97, 0xf3, 0x54, 0x1e, 0x6c, 0x6d, 0x2d, 0xb9, 0x36, 0x32, 0x4a, 0x35, 0xa8,
	0xbd, 0x1f, 0xb4, 0x8f, 0x8e, 0x30, 0x14, 0xac, 0xcf, 0xf5, 0xe2, 0x26, 0x74, 0x10, 0x15, 0x71,
	0x1a, 0x67, 0x1b, 0xf1, 0x95, 0x46, 0xd0, 0x36, 0x3c, 0x35, 0x55, 0x75, 0xf5, 0x42, 0x19, 0x79,
	0xab, 0xad, 0xf3, 0x56, 0x68, 0x00, 0x9f, 0x52, 0x78, 0x1f, 0x5a, 0xb7, 0xb6, 0x13, 0x7c, 0x8f,
	0x2f, 0x16, 0x0a, 0xc3, 0x94, 0x2c, 0x58, 0x8c, 0x15, 0xe6, 0x20, 0x64, 0xe6, 0x75, 0x97, 0x6e,
	0x09, 0xf0, 0xc6, 0x76, 0x21, 0x64, 0x6e, 0x77, 0x95, 0xcd, 0xa0, 0x85, 0xae, 0xd6, 0x51, 0xd3,
	0xd9, 0xa4, 0x7c, 0x85, 0x3e, 0x8a, 0x32, 0x04, 0x94, 0x49, 0x34, 0xed, 0xe4, 0x2b, 0xb6, 0xb1,
	0x57, 0x2f, 0x4e, 0xe7, 0xed, 0x6a, 0x19, 0x39, 0x6a, 0x13, 0x9e, 0xd8, 0x45, 0x26, 0xee, 0x24,
	0xa0, 0x6b, 0xd1, 0x74, 0xce, 0x03, 0xe6, 0xa0, 0x37, 0x81, 0x0e, 0xe2, 0x11, 0xed, 0x72, 0x00,
	0x47, 0x47, 0xf2, 0x86, 0xa0, 0xab, 0x0d, 0xa2, 0x9a, 0xe9, 0xf2, 0x05, 0x7d, 0x32, 0x45, 0x7f,
	0x33, 0x01, 0x16, 0x8f, 0xd0, 0x15, 0xbc, 0x97, 0x26, 0x3f, 0xbb, 0x72, 0x55, 0xd0, 0x8c, 0x3e,
	0x56, 0x31, 0x6c, 0xe4, 0x60, 0x4b, 0x4f, 0xe7, 0xd8, 0xa7, 0xf6, 0x41, 0xb0, 0x64, 0x74, 0x24,
	0x5f, 0xe6, 0x57, 0xd1, 0x2f, 0x6a, 0x40, 0x21, 0x82, 0xf1, 0x0b, 0x65, 0x0a, 0x38, 0x99, 0x00,
	0xcb, 0x76, 0x22, 0x64, 0x7b, 0xff, 0xed, 0xb0, 0x5c, 0x63, 0x6c, 0x7a, 0x17, 0x72, 0x5d, 0xc3,
	0x1c, 0x77, 0xea, 0xac, 0x8a, 0x1e, 0xb0, 0xa8, 0x82, 0x90, 0x4d, 0xce, 0xfe, 0x24, 0x5e, 0x51,
	0x8b, 0x37, 0x80, 0x0f, 0xff, 0xe5, 0xa0, 0x19, 0x03, 0x7d, 0xcf, 0x6f, 0xf2, 0x3e, 0x87, 0x4b,
	0xca, 0x6f, 0x81, 0x16, 0x87, 0xca, 0x47, 0x1d, 0xbe, 0x67, 0x60, 0xca, 0xc5, 0xfe, 0x3a, 0x10,
	0x5d, 0x42, 0xce, 0x47, 0xd6, 0xae, 0x07, 0xdd, 0xa3, 0x23, 0xf9, 0x8a, 0x7c, 0xa5, 0x5b, 0x45,
	0x75, 0xad, 0xa0, 0xc6, 0x27, 0x45, 0x66, 0x8a, 0x7b, 0x3c, 0x01, 0x96, 0x84, 0xcc, 0xb3, 0xce,
	0x1a, 0x83, 0x20, 0x39, 0x89, 0xa6, 0xa9, 0xae, 0xbc, 0x9f, 0xca, 0x46, 0x90, 0x26, 0x4e, 0x93,
	0xc2, 0x4e, 0xd3, 0x19, 0xa8, 0x22, 0x70, 0x91, 0x1c, 0x41, 0xd1, 0xb6, 0x03, 0xc5, 0x53, 0x40,
	0x48, 0xe2, 0x4d, 0xe2, 0xca, 0x63, 0xdc, 0x8e, 0x2e, 0xf9, 0xbf, 0x9a, 0x40, 0x0b, 0x3b, 0x14,
	0x2e, 0x70, 0xa0, 0xb0, 0x12, 0xb4, 0xea, 0xc5, 0x22, 0x72, 0x9c, 0xfc, 0x84, 0xee, 0x4c, 0x30,
	0xf7, 0x20, 0x43, 0xd7, 0xe8, 0xce, 0x84, 0x67, 0x4e, 0xd8, 0xb3, 0xb0, 0x39, 0x11, 0x07, 0x69,
	0xf1, 0x06, 0xb0, 0x39, 0x69, 0xa0, 0xcd, 0x29, 0x22, 0x1b, 0xb9, 0xf9, 0x49, 0x34, 0xed, 0x19,
	0x55, 0x13, 0x9e, 0xdf, 0x4a, 0x06, 0xaf, 0x45, 0xd3, 0xc3, 0x25, 0xa5, 0x57, 0xb8, 0x4c, 0x48,
	0xf8, 0xc0, 0x5d, 0x17, 0x3d, 0xfc, 0x75, 0xd1, 0x82, 0xa1, 0xc1, 0x85, 0x90, 0x01, 0x98, 0x17,
	0x86, 0x2d, 0x22, 0x30, 0xf6, 0xed, 0x45, 0x2b, 0x95, 0x09, 0xcb, 0x44, 0x38, 0x42, 0x58, 0x94,
	0x23, 0x1f, 0xca, 0x36, 0xd0, 0x56, 0xb1, 0xad, 0x31, 0xa3, 0x8c, 0xf2, 0x95, 0x09, 0xcb, 0xb5,
	0x70, 0x5c, 0xe0, 0x9d, 0xbc, 0xfe, 0x0e, 0x7a, 0xa3, 0xb9, 0xc5, 0x14, 0x09, 0x7f, 0x29, 0x2b,
	0x41, 0xb2, 0x60, 0xb9, 0x34, 0x24, 0x08, 0xdd, 0xe0, 0x1e, 0x44, 0x59, 0x05, 0x16, 0x17, 0xad,
	0xaa, 0xe9, 0xda, 0xd3, 0xf9, 0xa2, 0x55, 0x42, 0x6a, 0x1b, 0x09, 0x82, 0xe8, 0xd8, 0x90, 0x55,
	0xc2, 0xa2, 0xee, 0x45, 0xb6, 0x31, 0x66, 0xa0, 0x92, 0xda, 0x8e, 0x6f, 0x2d, 0xff, 0xdb, 0x3b,
	0x62, 0x9c, 0x6a, 0xc5, 0x0b, 0x17, 0xd5, 0x25, 0x18, 0xc4, 0x3e, 0x15, 0x05, 0xa4, 0x9c, 0xa2,
	0x3e, 0xa5, 0x42, 0x3c, 0x8c, 0x7f, 0x7b, 0x63, 0x63, 0xfa, 0x24, 0x52, 0x3b, 0xc8, 0x98, 0xf7,
	0xdb, 0x73, 0x24, 0xbd, 0x60, 0x55, 0x5d, 0x55, 0x99, 0xc3, 0x85, 0x4a, 0x50, 0x95, 0x3e, 0x00,
	0x6c, 0xe4, 0xb8, 0xb6, 0x51, 0x74, 0x51, 0x49, 0x5d, 0x4a, 0x62, 0xad, 0x60, 0x44, 0x19, 0x06,
	0x0a, 0xfb, 0x32, 0x2c, 0x33, 0x6f, 0x23, 0xdd, 0xb1, 0x4c, 0xb5, 0x13, 0x5b, 0x7c, 0xc6, 0xd7,
	0x57, 0x2e, 0x40, 0xc9, 0x61, 0x8c, 0x5c, 0x87, 0x1d, 0x1e, 0x52, 0x36, 0x00, 0xc8, 0x6e, 0x1f,
	0x3f, 0x20, 0xeb, 0xc2, 0xb6, 0xc2, 0x02, 0x0e, 0x87, 0x45, 0x64, 0x9b, 0x40, 0x07, 0xf1, 0x15,
	0x03, 0x05, 0xb8, 0xcb, 0x30, 0x2e, 0xf4, 0x01, 0x0c, 0x59, 0x05, 0xcd, 0x25, 0x54, 0x46, 0x9e,
	0xfc, 0xcb, 0x89, 0xe2, 0xe8, 0xa7, 0x17, 0xca, 0x78, 0x81, 0x9d, 0xee, 0xba, 0x7a, 0x71, 0x22,
	0x3f, 0x85, 0xcc, 0xaa, 0xaa, 0x92, 0x58, 0xa1, 0x60, 0xb9, 0xdb, 0xf1, 0xe8, 0x75, 0xc8, 0xac,
	0x7a, 0x14, 0x2a, 0x36, 0x9a, 0x32, 0xaa, 0x53, 0x6a, 0x37, 0xa1, 0x40, 0x3f, 0xb5, 0x6d, 0xa0,
	0x75, 0x74, 0x04, 0xc7, 0x41, 0xd8, 0xed, 0xd6, 0x88, 0x0e, 0x1b, 0xbe, 0xaa, 0xa9, 0xa7, 0xbe,
	0xdc, 0x08, 0x3a, 0x71, 0x90, 0x34, 0xe5, 0x6d, 0x1f, 0x2a, 0x0d, 0xb1, 0x3b, 0xb7, 0xbe, 0x5e,
	0x7b, 0x19, 0x68, 0x31, 0x28, 0x47, 0x35, 0x89, 0x37, 0x48, 0xf5, 0x37, 0x28, 0x24, 0x4a, 0xce,
	0xc7, 0x54, 0xae, 0x00, 0x4b, 0x2a, 0x56, 0xa5, 0x5a, 0xd6, 0xed, 0xbc, 0x61, 0xee, 0x35, 0x5c,
	0xff, 0x3c, 0x5b, 0x1e, 0x78, 0x03, 0x81, 0xb3, 0xb9, 0xed, 0x14, 0x7f, 0x98, 0xa0, 0x7b, 0xab,
	0xb2, 0x11, 0xb1, 0x7a, 0x2e, 0xfc, 0x48, 0xe6, 0xda, 0xf0, 0xa8, 0xbf, 0xf8, 0xd5, 0x20, 0xed,
	0xad, 0x80, 0xc5, 0x18, 0x6d, 0x3e, 0x79, 0x12, 0x11, 0x60, 0x98, 0x17, 0xda, 0x57, 0x2b, 0x25,
	0x4f, 0x3d, 0x46, 0x29, 0x5f, 0x36, 0x1c, 0x2f, 0xb8, 0xf3, 0x68, 0x2d, 0x26, 0xa3, 0xc3, 0xa5,
	0x11, 0xc3, 0x71, 0xb5, 0x6b, 0xc1, 0x72, 0xba, 0x2b, 0x11, 0x15, 0x5f, 0x22, 0xee, 0x50, 0x26,
	0xd8, 0xa1, 0x30, 0x2a, 0xdb, 0xad, 0x3f, 0x02, 0x9d, 0x94, 0x58, 0x7e, 0x1c, 0xb9, 0xec, 0x96,
	0x76, 0xc2, 0xbb, 0x90, 0x78, 0x97, 0x67, 0x67, 0x92, 0x9c, 0x9d, 0xda, 0x7d, 0x09, 0xb0, 0x8c,
	0xd1, 0x27, 0x8b, 0x60, 0x2c, 0xe6, 0xcb, 0x81, 0x9d, 0xce, 0xf3, 0x89, 0x5e, 0x3e, 0x0a, 0x96,
	0x4a, 0x16, 0xbf, 0x40, 0x92, 0x69, 0x3a, 0x50, 0x39, 0xea, 0x62, 0x48, 0xbd, 0x40, 0x2c, 0x2a,
	0xbe, 0x29, 0x78, 0x2c, 0xae, 0x0b, 0x18, 0x2c, 0xd4, 0x06, 0x7a, 0xdf, 0xae, 0x85, 0x7d, 0x22,
	0x99, 0x6b, 0x74, 0x2d, 0xcd, 0x04, 0x2b, 0xe3, 0x16, 0x35, 0x38, 0xbd, 0x13, 0xdf, 0x2f, 0xe7,
	0xc9, 0xd9, 0xbf, 0xac, 0x92, 0xdc, 0x65, 0x55, 0x9b, 0xdf, 0x28, 0xce, 0xbe, 0xcf, 0x9f, 0x1f,
	0x49, 0xe5, 0x93, 0x5c, 0x2a, 0xaf, 0x7d, 0x1c, 0xc7, 0x6a, 0x98, 0x9f, 0x83, 0xdc, 0xed, 0x45,
	0x7c, 0x7f, 0x5d, 0xa9, 0x4f, 0x3b, 0xa3, 0xa3, 0x23, 0xe7, 0xcb, 0x29, 0x36, 0xf2, 0x86, 0x20,
	0xe9, 0xba, 0x65, 0x5a, 0x7d, 0xf0, 0x7e, 0x6a, 0x93, 0x01, 0xfb, 0xf1, 0x7a, 0xb3, 0xd7, 0xbe,
	0x98, 0x10, 0xb8, 0x85, 0x02, 0xd3, 0x85, 0x5e, 0xac, 0x10, 0x74, 0xa7, 0xe2, 0x83, 0xee, 0x34,
	0x1f, 0x74, 0x6b, 0xf7, 0x24, 0x40, 0x6f, 0xac, 0x8c, 0xde, 0x71, 0xb8, 0xe0, 0x72, 0xae, 0x07,
	0x69, 0x8f, 0x37, 0xbb, 0x08, 0x3a, 0x84, 0x18, 0x7f, 0xb7, 0x6b, 0x94, 0x73, 0x04, 0xae, 0xfd,
	0x38, 0x21, 0xd8, 0xca, 0xc5, 0xa8, 0x3e, 0x21, 0x67, 0x69, 0x7a, 0x37, 0x39, 0xcb, 0x14, 0xe8,
	0x61, 0x6b, 0xb3, 0x51, 0xdd, 0x57, 0xa7, 0x99, 0x60, 0x05, 0x6f, 0xf7, 0xe5, 0x72, 0x9d, 0xf9,
	0xd9, 0x20, 0xcb, 0xf1, 0xbb, 0xba, 0x6c, 0x15, 0xf4, 0x32, 0xcd, 0x3c, 0xea, 0xc6, 0xf3, 0x89,
	0x44, 0xc0, 0xd4, 0xb9, 0x40, 0x4c, 0x95, 0x0f, 0x70, 0x06, 0x90, 0xc2, 0x06, 0xd0, 0xe7, 0x1b,
	0x80, 0x54, 0x02, 0xce, 0x06, 0x3e, 0x81, 0xd3, 0x36, 0xa6, 0x24, 0x8a, 0xb7, 0xe0, 0x12, 0x76,
	0x83, 0x16, 0x2f, 0x33, 0xe2, 0xeb, 0xb0, 0x93, 0x68, 0xda, 0x33, 0x6b, 0xed, 0xd1, 0x44, 0x20,
	0x81, 0xf3, 0x5e, 0x48, 0x10, 0x64, 0xb9, 0xe9, 0xd9, 0xb3, 0xdc, 0xcf, 0x27, 0x82, 0x58, 0xaa,
	0x38, 0x81, 0x8a, 0x93, 0xef, 0x81, 0xbc, 0xb1, 0xe7, 0xe8, 0x0b, 0x89, 0x20, 0x54, 0xd0, 0x4b,
	0x25, 0xcf, 0xf7, 0x2f, 0xb2, 0xa3, 0xea, 0xd2, 0xc8, 0x51, 0xd5, 0x25, 0x1c, 0x55, 0x12, 0x03,
	0x3d, 0x90, 0x10, 0xe2, 0x9f, 0x8b, 0x6f, 0x51, 0xda, 0x97, 0x12, 0x20, 0xc3, 0x24, 0x24, 0x79,
	0xd9, 0x45, 0x28, 0xe4, 0x9f, 0x07, 0x61, 0x70, 0x71, 0x42, 0x37, 0xc7, 0xd1, 0xbc, 0xe2, 0xb8,
	0x58, 0xe1, 0xfc, 0x00, 0x2f, 0xc5, 0x07, 0x78, 0x77, 0x35, 0x06, 0x11, 0x1e, 0x7e, 0x65, 0x41,
	0x3b, 0xd0, 0x0d, 0x3b, 0x6d, 0x54, 0x42, 0x63, 0x86, 0x89, 0x4a, 0xf3, 0x89, 0x96, 0xa5, 0x11,
	0x65, 0xa8, 0xd8, 0x92, 0x0a, 0x17, 0x5b, 0x84, 0xda, 0x7c, 0xfa, 0x5d, 0xd5, 0xe6, 0xf9, 0x52,
	0x4c, 0x53, 0xa8, 0x14, 0xa3, 0x80, 0x14, 0x2e, 0x8b, 0x90, 0xe2, 0x0e, 0xfe, 0x2d, 0xd4, 0x43,
	0x5a, 0xc4, 0x7a, 0x88, 0x36, 0x21, 0x84, 0x66, 0x75, 0xd4, 0x87, 0xb6, 0x3b, 0x7c, 0xf5, 0x2e,
	0x08, 0x33, 0xed, 0xfb, 0x09, 0xd0, 0x2f, 0x66, 0x7e, 0x01, 0xdd, 0xab, 0x3c, 0x6d, 0x6f, 0x37,
	0x4b, 0x23, 0x4c, 0x73, 0xff, 0x3f, 0x36, 0x58, 0xdb, 0xc7, 0xdd, 0xe0, 0xe1, 0x35, 0xed, 0x61,
	0x95, 0xac, 0x05, 0x5d, 0x0b, 0x6f, 0x22, 0xa9, 0x90, 0x89, 0x3c, 0x5c, 0x43, 0x9a, 0xdd, 0xcc,
	0xee, 0x16, 0x54, 0x9a, 0xdf, 0xe6, 0x0c, 0x3c, 0x35, 0x17, 0xcd, 0x31, 0x6c, 0xed, 0x13, 0x81,
	0x91, 0x85, 0x45, 0xc5, 0xa5, 0xc1, 0x05, 0x15, 0x93, 0xf9, 0x5a, 0x2a, 0xf0, 0x35, 0xef, 0x20,
	0x5e, 0xc7, 0x24, 0xa8, 0xf8, 0xbc, 0x07, 0x0d, 0xb3, 0x94, 0x43, 0xe3, 0x86, 0xe3, 0x22, 0x9b,
	0x28, 0x6d, 0x78, 0x81, 0x37, 0x70, 0x13, 0xe8, 0xb0, 0x7d, 0x06, 0xa4, 0x68, 0xc3, 0xde, 0x15,
	0xa0, 0x1d, 0xe2, 0xac, 0x9d, 0x4a, 0x80, 0xae, 0xc8, 0x59, 0x38, 0x1f, 0x8f, 0xd7, 0x40, 0x9b,
	0x83, 0x8a, 0x5c, 0xf1, 0x39, 0x49, 0x8b, 0xcf, 0x78, 0x90, 0x14, 0x9f, 0xa5, 0xc7, 0x72, 0xa4,
	0x9c, 0x9b, 0x8e, 0x96, 0x73, 0x45, 0x3f, 0x6b, 0xaa, 0x59, 0xb5, 0x6e, 0x16, 0xab, 0xd6, 0xda,
	0xbd, 0x09, 0xd0, 0xc1, 0x56, 0x5a, 0x28, 0x5b, 0xc5, 0x49, 0xef, 0x5a, 0xbc, 0x48, 0xae, 0xc3,
	0xfb, 0x12, 0xc1, 0x7d, 0x58, 0x35, 0x07, 0x2f, 0x32, 0xe9, 0x3e, 0xcb, 0xd9, 0x08, 0xd6, 0x1c,
	0x2a, 0x0d, 0x4e, 0xcf, 0xc7, 0x46, 0x6a, 0xbd, 0x0b, 0x62, 0x11, 0xc4, 0x77, 0x70, 0xe0, 0x8d,
	0x51, 0x7b, 0xdd, 0xc7, 0xc5, 0x5f, 0x86, 0x33, 0xf8, 0x1e, 0x4b, 0xf3, 0x17, 0x41, 0xa8, 0x85,
	0xc3, 0x6f, 0x2c, 0x8f, 0x07, 0xab, 0x4b, 0x99, 0x80, 0x14, 0xca, 0x52, 0x7e, 0xa5, 0xf3, 0x6e,
	0xae, 0xd2, 0x39, 0x8e, 0x5c, 0xaa, 0x8c, 0xba, 0xb0, 0x5e, 0x06, 0x9a, 0xac, 0xb1, 0x31, 0x07,
	0xb9, 0xd4, 0x6a, 0xe8, 0x97, 0xe7, 0xc9, 0x65, 0x63, 0xca, 0x70, 0x69, 0x99, 0x93, 0x7c, 0x68,
	0x7b, 0xc1, 0x1a, 0x4e, 0x2e, 0x5a, 0xff, 0xdd, 0x65, 0x8c, 0x9b, 0xbb, 0x2b, 0x38, 0xc9, 0x36,
	0x8a, 0x3a, 0x6e, 0x51, 0x59, 0xe8, 0x74, 0xf7, 0xfe, 0x44, 0xc0, 0xd8, 0xb9, 0x80, 0x8c, 0x95,
	0xb5, 0xa0, 0xc9, 0x31, 0xca, 0xc8, 0x74, 0xe9, 0x1d, 0x15, 0xd4, 0xda, 0x07, 0x2d, 0xab, 0x9c,
	0xa3, 0x40, 0xad, 0x1c, 0x98, 0x0b, 0xd5, 0x0b, 0x32, 0xdd, 0xba, 0x25, 0xff, 0xf7, 0x72, 0x89,
	0x80, 0x53, 0x77, 0x76, 0xde, 0xb5, 0xe3, 0x20, 0xd3, 0x31, 0x5c, 0x63, 0x2f, 0xca, 0x23, 0x53,
	0x2f, 0x94, 0xfd, 0x00, 0x02, 0xfa, 0x80, 0x0f, 0x93, 0x71, 0xed, 0x86, 0xe0, 0x44, 0x21, 0x39,
	0x0a, 0xdd, 0xab, 0xba, 0xf9, 0x0c, 0x2b, 0x5f, 0x4f, 0x08, 0x2e, 0x43, 0xb9, 0xd6, 0xc3, 0x65,
	0xb4, 0x3f, 0x15, 0x6a, 0xf1, 0x94, 0xd3, 0x70, 0x5d, 0xdc, 0x53, 0x73, 0x85, 0xb2, 0xc9, 0x85,
	0xd2, 0xe5, 0x5d, 0x8d, 0x01, 0x5b, 0xbd, 0x54, 0xaa, 0x17, 0xdb, 0x11, 0xd0, 0xa3, 0x97, 0x4a,
	0x79, 0x1c, 0x24, 0xf8, 0xdd, 0x33, 0xe8, 0x63, 0x45, 0x44, 0x5a, 0xdf, 0xa4, 0x1e, 0xa7, 0xea,
	0xa5, 0x12, 0x4e, 0x29, 0x69, 0x41, 0xe4, 0xc3, 0x0c, 0x9d, 0x2e, 0x22, 0xed, 0x3f, 0xe6, 0xcc,
	0x23, 0xa4, 0x08, 0xe2, 0x98, 0x16, 0x3e, 0xbb, 0xd9, 0x1b, 0xaa, 0xc9, 0x5c, 0xa8, 0xed, 0xe0,
	0x1f, 0xbe, 0xc8, 0x6b, 0xa3, 0xff, 0x48, 0xb7, 0xd0, 0xac, 0x2f, 0xe5, 0x5a, 0x9f, 0x52, 0xb4,
	0x83, 0xc9, 0x7f, 0xf9, 0x34, 0x2b, 0x55, 0xd7, 0x7f, 0xf6, 0x64, 0x68, 0x11, 0xc7, 0x0b, 0x82,
	0xba, 0x85, 0x76, 0x06, 0xae, 0xb6, 0x40, 0x02, 0xff, 0xed, 0xf8, 0xe1, 0xbd, 0x0e, 0xb5, 0x05,
	0xf2, 0xf8, 0x4f, 0x83, 0x58, 0xfc, 0xa1, 0x3d, 0x96, 0x00, 0x7d, 0x22, 0xf7, 0x85, 0xca, 0x3c,
	0x63, 0x05, 0x99, 0x25, 0xf9, 0xec, 0x09, 0x27, 0x9f, 0x7c, 0x50, 0xfc, 0xd7, 0x91, 0xc7, 0xd2,
	0xf9, 0x26, 0x95, 0xb1, 0x62, 0x6e, 0x08, 0xe5, 0x95, 0x11, 0x9f, 0x0d, 0xd2, 0xcc, 0x4f, 0x47,
	0xa4, 0x9a, 0x6f, 0x72, 0x19, 0x2b, 0x55, 0x26, 0x94, 0x5f, 0x72, 0x05, 0x14, 0x3e, 0xba, 0x63,
	0x19, 0x24, 0xd7, 0x9e, 0x52, 0x6f, 0x77, 0xfe, 0x78, 0xf0, 0x1c, 0x42, 0xcb, 0x78, 0x1c, 0x77,
	0xa7, 0xee, 0xc1, 0xa5, 0x78, 0x7d, 0xd5, 0x95, 0xb7, 0x76, 0x88, 0xdb, 0x6f, 0x07, 0xb9, 0x83,
	0x96, 0x3b, 0x64, 0x4d, 0x4d, 0xe9, 0x66, 0x69, 0xe1, 0x97, 0xd9, 0x05, 0x9a, 0x70, 0xeb, 0x31,
	0xd3, 0x74, 0xba, 0x60, 0xb9, 0xc3, 0x25, 0x65, 0x8b, 0x77, 0xa0, 0x11, 0x96, 0xb4, 0xee, 0xbe,
	0x94, 0x33, 0x4e, 0x26, 0x4e, 0xce, 0x47, 0xd2, 0xf6, 0x80, 0x36, 0x2e, 0x0d, 0xb1, 0xdc, 0x85,
	0x7a, 0x5e, 0x2f, 0x08, 0x37, 0xf9, 0x20, 0xe9, 0x9b, 0x3e, 0x5f, 0xe2, 0xc1, 0x62, 0x93, 0xdc,
	0x62, 0xb5, 0xbf, 0x14, 0x7a, 0x10, 0xae, 0xaa, 0x96, 0xcb, 0xf3, 0x49, 0x9f, 0xb2, 0x60, 0xb1,
	0x83, 0xca, 0x63, 0x79, 0x51, 0xdf, 0xc0, 0x1b, 0xdb, 0x2d, 0xb7, 0xec, 0x0f, 0x81, 0xa5, 0x7b,
	0x90, 0x37, 0x37, 0x3f, 0x22, 0xe9, 0xe2, 0x74, 0xd4, 0x04, 0xde, 0x80, 0xd8, 0x2e, 0x4e, 0x47,
	0xdb, 0x0e, 0x3a, 0x29, 0x81, 0x61, 0x59, 0x27, 0x2c, 0xa3, 0x10, 0xdf, 0x09, 0xeb, 0x68, 0xbb,
	0x40, 0x2f, 0x25, 0xb1, 0xb3, 0x66, 0x93, 0x24, 0xa3, 0x35, 0x87, 0x26, 0x49, 0x47, 0xbb, 0x02,
	0x28, 0x8c, 0x68, 0xf0, 0x56, 0xa3, 0x6c, 0x14, 0x29, 0xc5, 0x3c, 0xe8, 0x10, 0x0a, 0x57, 0x81,
	0x2e, 0x9f, 0x82, 0x50, 0x12, 0xdd, 0x2c, 0x12, 0xe1, 0x7a, 0x85, 0x04, 0x3c, 0x46, 0x67, 0x35,
	0x68, 0x65, 0x2a, 0xb6, 0xcc, 0x71, 0xef, 0xae, 0x0a, 0x66, 0x27, 0x25, 0xe2, 0x22, 0x64, 0xd3,
	0xf4, 0xb1, 0x86, 0xb8, 0x01, 0x12, 0xa3, 0x70, 0xb9, 0x4f, 0x61, 0x28, 0xda, 0xf7, 0xcd, 0x28,
	0xc4, 0xf5, 0x7d, 0x3b, 0x1b, 0x7f, 0xd0, 0xe5, 0x79, 0x11, 0x67, 0x59, 0x4a, 0x07, 0x68, 0x1b,
	0xca, 0x0d, 0x6d, 0xdb, 0x9a, 0xdf, 0xbd, 0xe3, 0xda, 0x1d, 0xd7, 0xff, 0xc1, 0x0e, 0xd8, 0xa0,
	0xac, 0x01, 0x2b, 0xc8, 0x90, 0xbc, 0x9b, 0x15, 0x3e, 0x3c, 0xf3, 0x77, 0xb7, 0x34, 0x2b, 0x1a,
	0xe8, 0xa2, 0x58, 0x62, 0x33, 0x27, 0x3c, 0x7a, 0xec, 0xbb, 0x7f, 0x7b, 0x66, 0x66, 0x66, 0x66,
	0x26, 0xa1, 0xac, 0x04, 0x0a, 0xc1, 0xe1, 0x9b, 0x87, 0xe1, 0xf1, 0x6f, 0x7f, 0xe7, 0xfe, 0xb7,
	0x09, 0x42, 0x37, 0xe8, 0x20, 0x08, 0x5c, 0x17, 0x3b, 0x7c, 0xe4, 0x1b, 0x07, 0x7f, 0xd4, 0xa8,
	0x74, 0x32, 0xc1, 0xe8, 0xbf, 0x30, 0x80, 0x4f, 0x3d, 0x7b, 0x53, 0xab, 0xb2, 0x0c, 0xb4, 0x93,
	0x51, 0xd6, 0xb0, 0x06, 0x3f, 0xf7, 0xe6, 0x89, 0xb7, 0x9b, 0x95, 0x1e, 0xb0, 0x94, 0x8c, 0x0b,
	0x9d, 0xda, 0x70, 0xff, 0xbf, 0xdf, 0xf3, 0x58, 0x42, 0xd1, 0x40, 0x26, 0x98, 0x14, 0x6e, 0x92,
	0x82, 0xdf, 0xf8, 0xf5, 0xb9, 0xa3, 0x29, 0x65, 0x25, 0x58, 0x1e, 0xe0, 0x08, 0x6d, 0x52, 0xf0,
	0xc6, 0xb3, 0x37, 0x9f, 0x6c, 0x56, 0xd6, 0x81, 0x6e, 0x0e, 0x41, 0xec, 0x73, 0x82, 0x8f, 0x3f,
	0x79, 0xe3, 0x1b, 0x33, 0x64, 0x49, 0xab, 0xc1, 0x32, 0x39, 0x21, 0xf8, 0xf2, 0x5f, 0x9d, 0xba,
	0x95, 0x2a, 0xa6, 0x1f, 0xf4, 0x88, 0x48, 0x82, 0xcb, 0xc0, 0xe3, 0x4f, 0x3d, 0xf3, 0x3a, 0x25,
	0xb7, 0x9e, 0x97, 0x3d, 0xdc, 0x00, 0x04, 0x5f, 0x7c, 0xfa, 0xcd, 0xd7, 0x29, 0xc9, 0x2d, 0x40,
	0xab, 0x41, 0x92, 0xf6, 0xed, 0xc0, 0xd7, 0x8e, 0xdf, 0xf6, 0xfc, 0x3b, 0x73, 0x9b, 0x80, 0x1b,
	0x6f, 0xe0, 0x7f, 0x3f, 0x74, 0xfa, 0x0c, 0x15, 0x65, 0x03, 0xb3, 0x0b, 0x79, 0xe7, 0x0c, 0xfc,
	0xb7, 0xbb, 0x7f, 0x78, 0xe7, 0x39, 0x19, 0x6a, 0xa4, 0xcb, 0x05, 0xfe, 0xe4, 0xdc, 0x1d, 0x77,
	0x51, 0x13, 0x58, 0x13, 0x46, 0x0d, 0x59, 0xdb, 0x4f, 0xdf, 0x3a, 0x74, 0x73, 0x4a, 0xd9, 0x0c,
	0xb2, 0xb5, 0xb0, 0xbc, 0x1c, 0x0f, 0x7e, 0xe1, 0xd1, 0xbb, 0x1e, 0x7c, 0x27, 0x46, 0xd4, 0x10,
	0xd1, 0x93, 0xcf, 0xfd, 0xc3, 0xf7, 0xce, 0x12, 0xd4, 0xb5, 0xa0, 0x8f, 0x43, 0x95, 0xf4, 0x41,
	0xc0, 0x5f, 0x1e, 0x7e, 0xa0, 0xa2, 0xac, 0x07, 0x2b, 0x43, 0x2b, 0x0a, 0xf7, 0x2f, 0xc0, 0x5f,
	0x1d, 0x79, 0xf6, 0xb1, 0xb4, 0xb2, 0x09, 0xac, 0x16, 0x11, 0xa5, 0x2f, 0xf0, 0xf0, 0xce, 0x57,
	0x8f, 0xfd, 0x4b, 0xb3, 0x72, 0x89, 0x80, 0x1c, 0xd7, 0x30, 0x00, 0x9f, 0xf8, 0xf2, 0xd1, 0x93,
	0xa7, 0x89, 0xb8, 0xbe, 0xdb, 0x85, 0x9e, 0xec, 0xe1, 0x93, 0x4f, 0xdf, 0xf4, 0xc6, 0x19, 0x19,
	0x4e, 0xf0, 0xa8, 0x0e, 0x6f, 0x3f, 0x76, 0xf4, 0x5b, 0xa7, 0x99, 0xda, 0x79, 0x7b, 0xe7, 0x9f,
	0xb2, 0xe1, 0x23, 0xff, 0xf4, 0xd4, 0xa3, 0x67, 0x65, 0xd6, 0x17, 0x7a, 0x53, 0x86, 0x27, 0x9e,
	0xbf, 0xf5, 0x45, 0x8a, 0xb8, 0x2a, 0x6c, 0xa6, 0x02, 0xe2, 0xa9, 0x97, 0xf7, 0x4d, 0x28, 0x6b,
	0x41, 0x2f, 0x87, 0x12, 0x7d, 0x28, 0x85, 0xa7, 0xbe, 0x76, 0xf0, 0x97, 0xe9, 0x90, 0xff, 0x70,
	0x6f, 0x95, 0xf0, 0xd8, 0x13, 0xaf, 0xbf, 0x4d, 0x4d, 0x71, 0xa3, 0x60, 0xbb, 0x31, 0x4f, 0x8a,
	0xf0, 0x9b, 0xaf, 0x1d, 0x3c, 0x9c, 0x8e, 0x1a, 0x58, 0x08, 0xeb, 0xcb, 0x47, 0x5f, 0xfa, 0x62,
	0x52, 0x79, 0x9f, 0x64, 0x7f, 0x43, 0x88, 0x27, 0x67, 0x7e, 0xf8, 0x59, 0xba, 0xdc, 0x6d, 0x60,
	0x53, 0xe4, 0x30, 0x88, 0x7f, 0xfa, 0x82, 0x77, 0x3f, 0xf7, 0xc6, 0xf7, 0x93, 0xa1, 0xcd, 0x8e,
	0x7b, 0x5b, 0x82, 0xcf, 0xbe, 0x76, 0xf4, 0x45, 0xea, 0x1b, 0x9b, 0x6a, 0xce, 0x60, 0x21, 0x3a,
	0x7c, 0xe1, 0xdc, 0x03, 0x2f, 0xa5, 0x42, 0x16, 0x2a, 0x7b, 0x81, 0x81, 0xa7, 0x1e, 0xf8, 0xf1,
	0x2d, 0x4d, 0xca, 0x25, 0x60, 0x03, 0x87, 0x58, 0xfb, 0xa1, 0x04, 0x3e, 0xfc, 0xf3, 0xaf, 0x67,
	0x95, 0x2c, 0x50, 0x65, 0xea, 0xc6, 0x5a, 0xb9, 0xf1, 0xab, 0x9f, 0xfc, 0x5e, 0xb3, 0xb2, 0x0a,
	0x74, 0x72, 0x18, 0x7e, 0xb5, 0x1f, 0x1e, 0x7a, 0xe9, 0x9e, 0x5b, 0x4f, 0xcb, 0x0e, 0x46, 0xae,
	0xe8, 0x0e, 0x6f, 0x7b, 0xec, 0x0b, 0xbf, 0x3e, 0xc7, 0xbc, 0x51, 0x0d, 0xd3, 0x61, 0xd5, 0x66,
	0xb8, 0x7f, 0xdf, 0x27, 0x5f, 0x7a, 0x5b, 0x66, 0x97, 0xa1, 0xb2, 0x34, 0x3c, 0x7e, 0xe2, 0x30,
	0x73, 0x97, 0x8d, 0x82, 0xd1, 0x45, 0x4b, 0xc6, 0xf0, 0x17, 0xaf, 0xfc, 0xea, 0x80, 0x6f, 0xc3,
	0xdd, 0xa2, 0x09, 0x70, 0xf5, 0x5d, 0xf8, 0xcc, 0x67, 0x66, 0x0e, 0x34, 0x2a, 0x97, 0x81, 0xf5,
	0x22, 0x4a, 0x6c, 0xc5, 0x13, 0x1e, 0xfd, 0xca, 0xd3, 0x0f, 0xd1, 0xd3, 0x48, 0x9c, 0x55, 0xab,
	0x4e, 0x0a, 0x5f, 0xf9, 0xe9, 0xcd, 0x8f, 0x4b, 0x45, 0x8f, 0x96, 0x2f, 0xe1, 0x81, 0x63, 0xfb,
	0x1f, 0x3a, 0x23, 0xc3, 0x8d, 0xd6, 0x1e, 0xe1, 0xcf, 0xce, 0xde, 0xfe, 0xb3, 0x33, 0x32, 0x15,
	0x0b, 0xc5, 0x40, 0x78, 0xef, 0xa7, 0x3f, 0x73, 0x88, 0x6a, 0x63, 0x5d, 0x58, 0x1b, 0x5c, 0xe9,
	0x0e, 0xbe, 0xf2, 0xa5, 0xbf, 0x3f, 0x7c, 0x36, 0xe6, 0x2a, 0x13, 0x0a, 0x6f, 0xf0, 0x9f, 0x0f,
	0xfd, 0xcf, 0xfe, 0x99, 0x98, 0xa3, 0x8b, 0x71, 0x3d, 0xf1, 0x37, 0xdf, 0x3d, 0x46, 0xf7, 0xbf,
	0x57, 0xc0, 0x09, 0x6a, 0x5c, 0x70, 0xff, 0xff, 0xde, 0xf9, 0x7c, 0xb3, 0xec, 0xd4, 0x62, 0x08,
	0x07, 0xbf, 0x7a, 0xff, 0xe7, 0x4e, 0xcb, 0x44, 0x17, 0x2b, 0x33, 0xf0, 0xce, 0x9f, 0x7f, 0xea,
	0xc8, 0x99, 0x98, 0x0d, 0xe7, 0x8a, 0x24, 0xf0, 0x6b, 0x47, 0x6e, 0xbc, 0x23, 0x62, 0xb4, 0x41,
	0x75, 0x03, 0xde, 0x72, 0xe2, 0x53, 0x3f, 0xa2, 0x42, 0x0f, 0x80, 0x55, 0x11, 0xa4, 0xc8, 0x19,
	0xf0, 0xe6, 0xbe, 0xcf, 0x1f, 0x93, 0x1a, 0x9a, 0x58, 0x05, 0x80, 0x27, 0x5e, 0x38, 0xf8, 0x50,
	0xa3, 0x34, 0xda, 0xf0, 0xfd, 0xfd, 0x3f, 0xbf, 0xfe, 0xe4, 0x23, 0x33, 0x6c, 0x33, 0x7b, 0x25,
	0x4e, 0x1f, 0xa4, 0x8e, 0xf0, 0x96, 0x03, 0x47, 0x8e, 0x25, 0x95, 0x75, 0xc2, 0x25, 0x27, 0xc9,
	0x6e, 0xe1, 0xfe, 0x7f, 0xbd, 0xed, 0x78, 0x63, 0x74, 0x33, 0x45, 0xa4, 0xef, 0xdc, 0x74, 0xdf,
	0x89, 0x73, 0xb2, 0x35, 0x88, 0x39, 0x24, 0xbc, 0xfb, 0x85, 0xb7, 0x1e, 0x6e, 0x56, 0x7a, 0x01,
	0x14, 0x9d, 0xd4, 0x72, 0xe1, 0x5b, 0xb7, 0x3f, 0xf7, 0x8f, 0x67, 0x65, 0x5b, 0x1d, 0xe4, 0x5e,
	0xf0, 0x8e, 0xb7, 0xee, 0x79, 0x30, 0x19, 0x8d, 0xa3, 0x58, 0xda, 0x04, 0x0f, 0x7f, 0xeb, 0xdb,
	0xff, 0x41, 0x96, 0x9f, 0x49, 0xdd, 0xfa, 0x60, 0x5f, 0xc3, 0xd6, 0x27, 0xd7, 0x81, 0xe6, 0xdc,
	0xce, 0x21, 0x1c, 0xb6, 0x8f, 0x80, 0x8e, 0x68, 0xa3, 0x7b, 0x86, 0xe5, 0x54, 0xd1, 0xe8, 0x2e,
	0xd3, 0x4d, 0x60, 0x92, 0xfc, 0x48, 0x6b, 0x50, 0xae, 0x04, 0x4b, 0x65, 0x6d, 0xed, 0x2b, 0x44,
	0x7a, 0x22, 0x34, 0x23, 0x56, 0x59, 0xb4, 0x06, 0x65, 0x08, 0xc0, 0x48, 0xff, 0x79, 0x77, 0xac,
	0x48, 0x19, 0x49, 0x1e, 0xa6, 0x35, 0x28, 0x3b, 0x40, 0x97, 0xbc, 0xcd, 0xbc, 0x2f, 0x42, 0x49,
	0x80, 0x67, 0x64, 0x49, 0x99, 0xd6, 0xa0, 0xec, 0x02, 0x9d, 0xd2, 0x9e, 0xf2, 0xde, 0x08, 0x39,
	0x1e, 0x9c, 0xc9, 0x08, 0xea, 0x0a, 0x13, 0xfd, 0x28, 0x58, 0x51, 0xb3, 0x6d, 0x7c, 0x6d, 0x6d,
	0x59, 0x29, 0x5a, 0x9c, 0xc8, 0xf1, 0xd4, 0x49, 0x93, 0xf8, 0xac, 0xd4, 0x31, 0x5a, 0x1c, 0xf5,
	0xdf, 0x03, 0xcb, 0x62, 0x5a, 0xc2, 0x57, 0x8a, 0x74, 0x23, 0x08, 0xd1, 0x1d, 0x1f, 0xa5, 0xb4,
	0xc6, 0x67, 0xa3, 0x15, 0x41, 0xc8, 0x04, 0x89, 0xa6, 0x08, 0xd0, 0x1a, 0x94, 0x3f, 0x0c, 0xa8,
	0x86, 0x72, 0xe7, 0x28, 0x55, 0x11, 0x21, 0x53, 0xab, 0x23, 0x58, 0x6b, 0x50, 0x26, 0x40, 0xa6,
	0x46, 0xf7, 0xf5, 0xea, 0x59, 0xa8, 0x7b, 0x48, 0x99, 0xd5, 0x82, 0x61, 0xc8, 0xd3, 0x76, 0x51,
	0xcb, 0xb5, 0xd7, 0x10, 0x41, 0x88, 0x6a, 0x79, 0x07, 0x50, 0x63, 0x9b, 0x97, 0x57, 0x89, 0xd4,
	0x24, 0x28, 0x51, 0x7a, 0x63, 0xa0, 0x3b, 0xbe, 0x3b, 0x59, 0x8b, 0x6e, 0x5c, 0x18, 0x67, 0xae,
	0x3a, 0x30, 0x40, 0x6f, 0xed, 0xae, 0xe4, 0x75, 0x11, 0x5e, 0x52, 0xbc, 0xcc, 0x2c, 0x6d, 0xbe,
	0xd8, 0x64, 0x7a, 0x6b, 0xf7, 0x22, 0xaf, 0x8b, 0x68, 0x5d, 0xce, 0x2a, 0xa2, 0xac, 0xab, 0xc1,
	0x92, 0x70, 0xd7, 0xb0, 0x1a, 0x11, 0x9b, 0x42, 0x32, 0xaa, 0xa8, 0x98, 0xa0, 0x0c, 0xa3, 0x35,
	0x28, 0xbf, 0x43, 0x09, 0x39, 0xb1, 0x84, 0x02, 0x48, 0x54, 0x8c, 0x2b, 0xe8, 0x79, 0x2f, 0x34,
	0xe3, 0x86, 0xce, 0x7b, 0x1e, 0x16, 0xa5, 0x70, 0x15, 0x3d, 0x08, 0xc3, 0x1d, 0xb3, 0xa1, 0x83,
	0x30, 0x04, 0x96, 0x59, 0x63, 0xa7, 0xb4, 0x49, 0x35, 0x7a, 0xa0, 0x0a, 0x74, 0xe4, 0x0d, 0xb0,
	0x5a, 0x83, 0x32, 0x02, 0x96, 0xc7, 0xb5, 0x94, 0x66, 0x45, 0x92, 0x51, 0x8c, 0xa8, 0x74, 0xbf,
	0x4b, 0xef, 0x20, 0xbe, 0xf9, 0xb3, 0x3b, 0xac, 0x26, 0x1f, 0x14, 0x9d, 0xff, 0x27, 0xf4, 0xec,
	0x8d, 0x6b, 0xdf, 0x0c, 0x9d, 0xbd, 0x31, 0x68, 0x99, 0xb8, 0x32, 0x9a, 0x78, 0x66, 0x86, 0x68,
	0xaf, 0x94, 0xd8, 0xd5, 0x5c, 0xa9, 0xfe, 0xb1, 0xe0, 0xd3, 0x21, 0xc2, 0x52, 0x9f, 0x0e, 0xd1,
	0xee, 0x09, 0x99, 0x6e, 0x88, 0xbe, 0x0d, 0xd6, 0xce, 0xad, 0xfd, 0x71, 0x40, 0x16, 0x33, 0xc4,
	0xe3, 0xd7, 0x5a, 0x53, 0x81, 0x3a, 0x75, 0x6c, 0x7b, 0xe2, 0xba, 0xda, 0xbc, 0x18, 0xde, 0xf9,
	0xf0, 0xf0, 0xdf, 0x85, 0x66, 0xe1, 0xc1, 0xf0, 0x6a, 0xf1, 0xf8, 0x08, 0xdd, 0x1b, 0x69, 0xb7,
	0xa0, 0x56, 0x9b, 0xbe, 0x87, 0x53, 0x8b, 0x76, 0x09, 0xac, 0x9e, 0x4b, 0x1f, 0xe0, 0xfb, 0x44,
	0x2e, 0xb5, 0xb1, 0xa3, 0x5e, 0x71, 0x0d, 0x50, 0x24, 0x8d, 0x7c, 0x3d, 0x31, 0xbe, 0x50, 0x2b,
	0x1c, 0xfb, 0x00, 0x68, 0x0f, 0x35, 0xca, 0x2d, 0x17, 0xa9, 0xf8, 0x80, 0x78, 0xdf, 0xe6, 0x1b,
	0xd9, 0x42, 0xbe, 0xcd, 0x81, 0xa2, 0xf3, 0x07, 0xe9, 0x2a, 0xc4, 0x56, 0xb3, 0x1e, 0x09, 0x7f,
	0x06, 0x8c, 0x3f, 0x45, 0xc3, 0x2d, 0x62, 0xa1, 0xd3, 0x2f, 0x04, 0x8e, 0xd2, 0xd9, 0x49, 0x4f,
	0x3d, 0x49, 0x77, 0x57, 0x56, 0x72, 0xaa, 0x0b, 0x18, 0x99, 0x0e, 0x31, 0x96, 0xb7, 0xcc, 0x71,
	0xad, 0x41, 0xb9, 0x9e, 0xc6, 0xf0, 0xa1, 0x86, 0xad, 0x15, 0x11, 0xdf, 0xe7, 0xa0, 0xe1, 0x0b,
	0x2b, 0x28, 0xc4, 0xe3, 0xa3, 0x70, 0xd5, 0xec, 0x9d, 0x56, 0x1b, 0x23, 0xe4, 0x63, 0x71, 0x65,
	0x87, 0xed, 0xaa, 0xd9, 0x5b, 0xaa, 0x36, 0x46, 0x2e, 0xc9, 0x77, 0xc1, 0x21, 0x4f, 0xd5, 0x2c,
	0xe9, 0x8a, 0xca, 0x4a, 0x25, 0xe7, 0x30, 0x32, 0x59, 0x9f, 0x9a, 0x4e, 0x42, 0xd4, 0x7c, 0x08,
	0x83, 0xbb, 0xbd, 0x9c, 0x59, 0x19, 0x44, 0x31, 0xe2, 0x2d, 0x54, 0x6c, 0x5d, 0xea, 0x91, 0x5d,
	0x83, 0x14, 0x18, 0xa5, 0xc1, 0xd9, 0x01, 0xdf, 0x85, 0xb4, 0x22, 0x6e, 0xa3, 0x24, 0x76, 0xc0,
	0xbd, 0xa8, 0xe0, 0x25, 0x76, 0xc9, 0x9b, 0x8d, 0xfa, 0xe2, 0x48, 0x12, 0xb8, 0xdc, 0x4c, 0xaf,
	0x08, 0xe2, 0x29, 0xb6, 0x3e, 0x35, 0x8e, 0x4e, 0x26, 0xfa, 0xc2, 0xc3, 0x05, 0x52, 0x5c, 0x67,
	0x90, 0x1a, 0x89, 0x61, 0x62, 0xd5, 0x23, 0x04, 0x52, 0x6c, 0xbe, 0x2c, 0x90, 0x8a, 0xa5, 0xf0,
	0xfb, 0x54, 0xc1, 0xa1, 0x56, 0x98, 0x90, 0x82, 0x45, 0x68, 0xa6, 0xc6, 0x3f, 0x5f, 0xc7, 0xa7,
	0xca, 0x52, 0x59, 0x03, 0x8b, 0x6c, 0xcf, 0x7c, 0x68, 0x66, 0x89, 0x2f, 0x18, 0xe9, 0x53, 0xe7,
	0x4f, 0x48, 0xae, 0x3d, 0xa5, 0x5b, 0x76, 0xc1, 0x60, 0x90, 0x2c, 0x9f, 0xeb, 0xa9, 0xd5, 0x60,
	0xb2, 0x46, 0x46, 0x2a, 0x72, 0xa3, 0x47, 0xa8, 0x8a, 0xd5, 0x05, 0xff, 0xf6, 0x96, 0x56, 0x17,
	0xfc, 0x3b, 0x7b, 0x16, 0x2a, 0xfe, 0xfd, 0x2c, 0xa5, 0xe2, 0xdf, 0xca, 0x11, 0x2a, 0xd7, 0x51,
	0x7f, 0x95, 0xf4, 0x5d, 0x64, 0xe5, 0x37, 0x71, 0x80, 0x91, 0x69, 0xe7, 0x7a, 0x91, 0xdc, 0xdf,
	0xbc, 0x0c, 0x3b, 0x9b, 0x1a, 0xdb, 0x48, 0xb1, 0x4a, 0x1a, 0xbd, 0xf2, 0x28, 0x12, 0x82, 0x9c,
	0xb3, 0x89, 0xd4, 0xfa, 0x24, 0xc1, 0x21, 0x4f, 0x4a, 0xea, 0x6c, 0x4c, 0x67, 0xa1, 0xde, 0x87,
	0x15, 0x91, 0x93, 0x89, 0x83, 0x46, 0x75, 0xb6, 0x15, 0x00, 0xae, 0x1f, 0x61, 0x69, 0xe4, 0xa6,
	0xb3, 0x24, 0x96, 0xf4, 0xa1, 0xc0, 0xcd, 0x59, 0xaf, 0x41, 0xd4, 0xcd, 0x29, 0x24, 0x03, 0xf9,
	0x96, 0x08, 0x6f, 0x04, 0x87, 0x1c, 0x30, 0xd2, 0x48, 0x10, 0x2d, 0x26, 0x31, 0x10, 0x17, 0x22,
	0xe1, 0x3f, 0x3f, 0x91, 0xf7, 0x06, 0x3d, 0xa0, 0xd6, 0x30, 0x78, 0xfd, 0x2f, 0x5e, 0xe9, 0x4b,
	0x3c, 0xf3, 0x6a, 0x5f, 0xe2, 0xc8, 0xab, 0x7d, 0x89, 0x9f, 0xbc, 0xda, 0x97, 0xf8, 0xc8, 0xe5,
	0xdc, 0x1f, 0x11, 0x74, 0x91, 0x3e, 0x35, 0x6e, 0xeb, 0xc1, 0x8f, 0xcd, 0x0e, 0xb2, 0xf7, 0x22,
	0x7b, 0x8b, 0x5e, 0xa9, 0x6c, 0xf1, 0x7e, 0x1a, 0x45, 0xb4, 0xa5, 0x60, 0xfc, 0xd9, 0x16, 0x8f,
	0x2e, 0xfe, 0x5f, 0xa1, 0x09, 0x33, 0xda, 0xf6, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x21,
	0x8b, 0x07, 0xa1, 0x50, 0x00, 0x00,
}

func (this *BotData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&user.BotData{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "BotType: "+fmt.Sprintf("%#v", this.BotType)+",\n")
	s = append(s, "Creator: "+fmt.Sprintf("%#v", this.Creator)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "BotChatHistory: "+fmt.Sprintf("%#v", this.BotChatHistory)+",\n")
	s = append(s, "BotNochats: "+fmt.Sprintf("%#v", this.BotNochats)+",\n")
	s = append(s, "BotInlineGeo: "+fmt.Sprintf("%#v", this.BotInlineGeo)+",\n")
	s = append(s, "BotInfoVersion: "+fmt.Sprintf("%#v", this.BotInfoVersion)+",\n")
	if this.BotInlinePlaceholder != nil {
		s = append(s, "BotInlinePlaceholder: "+fmt.Sprintf("%#v", this.BotInlinePlaceholder)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLBotData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.TLBotData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContactData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&user.ContactData{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "ContactUserId: "+fmt.Sprintf("%#v", this.ContactUserId)+",\n")
	if this.FirstName != nil {
		s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	}
	if this.LastName != nil {
		s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	}
	s = append(s, "MutualContact: "+fmt.Sprintf("%#v", this.MutualContact)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLContactData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.TLContactData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImmutableUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&user.ImmutableUser{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	s = append(s, "LastSeenAt: "+fmt.Sprintf("%#v", this.LastSeenAt)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	if this.KeysPrivacyRules != nil {
		s = append(s, "KeysPrivacyRules: "+fmt.Sprintf("%#v", this.KeysPrivacyRules)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLImmutableUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.TLImmutableUser{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LastSeenData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&user.LastSeenData{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "LastSeenAt: "+fmt.Sprintf("%#v", this.LastSeenAt)+",\n")
	s = append(s, "Expires: "+fmt.Sprintf("%#v", this.Expires)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLLastSeenData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.TLLastSeenData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerPeerNotifySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&user.PeerPeerNotifySettings{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.Settings != nil {
		s = append(s, "Settings: "+fmt.Sprintf("%#v", this.Settings)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLPeerPeerNotifySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.TLPeerPeerNotifySettings{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrivacyKeyRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.PrivacyKeyRules{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLPrivacyKeyRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.TLPrivacyKeyRules{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 29)
	s = append(s, "&user.UserData{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "UserType: "+fmt.Sprintf("%#v", this.UserType)+",\n")
	s = append(s, "SceretKeyId: "+fmt.Sprintf("%#v", this.SceretKeyId)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	if this.ProfilePhoto != nil {
		s = append(s, "ProfilePhoto: "+fmt.Sprintf("%#v", this.ProfilePhoto)+",\n")
	}
	if this.Bot != nil {
		s = append(s, "Bot: "+fmt.Sprintf("%#v", this.Bot)+",\n")
	}
	s = append(s, "CountryCode: "+fmt.Sprintf("%#v", this.CountryCode)+",\n")
	s = append(s, "Verified: "+fmt.Sprintf("%#v", this.Verified)+",\n")
	s = append(s, "Support: "+fmt.Sprintf("%#v", this.Support)+",\n")
	s = append(s, "Scam: "+fmt.Sprintf("%#v", this.Scam)+",\n")
	s = append(s, "Fake: "+fmt.Sprintf("%#v", this.Fake)+",\n")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "Restricted: "+fmt.Sprintf("%#v", this.Restricted)+",\n")
	if this.RestrictionReason != nil {
		s = append(s, "RestrictionReason: "+fmt.Sprintf("%#v", this.RestrictionReason)+",\n")
	}
	s = append(s, "ContactsVersion: "+fmt.Sprintf("%#v", this.ContactsVersion)+",\n")
	s = append(s, "PrivaciesVersion: "+fmt.Sprintf("%#v", this.PrivaciesVersion)+",\n")
	s = append(s, "Deleted: "+fmt.Sprintf("%#v", this.Deleted)+",\n")
	s = append(s, "BotAttachMenu: "+fmt.Sprintf("%#v", this.BotAttachMenu)+",\n")
	s = append(s, "Premium: "+fmt.Sprintf("%#v", this.Premium)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.TLUserData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserImportedContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&user.UserImportedContacts{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Imported != nil {
		s = append(s, "Imported: "+fmt.Sprintf("%#v", this.Imported)+",\n")
	}
	if this.PopularInvites != nil {
		s = append(s, "PopularInvites: "+fmt.Sprintf("%#v", this.PopularInvites)+",\n")
	}
	s = append(s, "RetryContacts: "+fmt.Sprintf("%#v", this.RetryContacts)+",\n")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "UpdateIdList: "+fmt.Sprintf("%#v", this.UpdateIdList)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserImportedContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.TLUserImportedContacts{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetLastSeens) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetLastSeens{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUpdateLastSeen) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserUpdateLastSeen{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "LastSeenAt: "+fmt.Sprintf("%#v", this.LastSeenAt)+",\n")
	s = append(s, "Expires: "+fmt.Sprintf("%#v", this.Expires)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetLastSeen) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetLastSeen{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetImmutableUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetImmutableUser{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetMutableUsers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserGetMutableUsers{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetImmutableUserByPhone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetImmutableUserByPhone{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetImmutableUserByToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetImmutableUserByToken{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserSetAccountDaysTTL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserSetAccountDaysTTL{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Ttl: "+fmt.Sprintf("%#v", this.Ttl)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetAccountDaysTTL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetAccountDaysTTL{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetNotifySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserGetNotifySettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetNotifySettingsList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserGetNotifySettingsList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserSetNotifySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&user.TLUserSetNotifySettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.Settings != nil {
		s = append(s, "Settings: "+fmt.Sprintf("%#v", this.Settings)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserResetNotifySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserResetNotifySettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetAllNotifySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetAllNotifySettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetGlobalPrivacySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetGlobalPrivacySettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserSetGlobalPrivacySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserSetGlobalPrivacySettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Settings != nil {
		s = append(s, "Settings: "+fmt.Sprintf("%#v", this.Settings)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetPrivacy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserGetPrivacy{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "KeyType: "+fmt.Sprintf("%#v", this.KeyType)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserSetPrivacy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserSetPrivacy{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "KeyType: "+fmt.Sprintf("%#v", this.KeyType)+",\n")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserCheckPrivacy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserCheckPrivacy{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "KeyType: "+fmt.Sprintf("%#v", this.KeyType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserAddPeerSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&user.TLUserAddPeerSettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.Settings != nil {
		s = append(s, "Settings: "+fmt.Sprintf("%#v", this.Settings)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetPeerSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserGetPeerSettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserDeletePeerSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserDeletePeerSettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserChangePhone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserChangePhone{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserCreateNewPredefinedUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&user.TLUserCreateNewPredefinedUser{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	if this.LastName != nil {
		s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	}
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Verified: "+fmt.Sprintf("%#v", this.Verified)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetPredefinedUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetPredefinedUser{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetAllPredefinedUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.TLUserGetAllPredefinedUser{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUpdatePredefinedFirstAndLastName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserUpdatePredefinedFirstAndLastName{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	if this.LastName != nil {
		s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUpdatePredefinedVerified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserUpdatePredefinedVerified{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Verified: "+fmt.Sprintf("%#v", this.Verified)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUpdatePredefinedUsername) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserUpdatePredefinedUsername{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	if this.Username != nil {
		s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUpdatePredefinedCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserUpdatePredefinedCode{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserPredefinedBindRegisteredUserId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserPredefinedBindRegisteredUserId{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "RegisteredUserId: "+fmt.Sprintf("%#v", this.RegisteredUserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserCreateNewUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&user.TLUserCreateNewUser{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SecretKeyId: "+fmt.Sprintf("%#v", this.SecretKeyId)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "CountryCode: "+fmt.Sprintf("%#v", this.CountryCode)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserBlockPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserBlockPeer{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUnBlockPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserUnBlockPeer{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserBlockedByUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserBlockedByUser{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerUserId: "+fmt.Sprintf("%#v", this.PeerUserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserIsBlockedByUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserIsBlockedByUser{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerUserId: "+fmt.Sprintf("%#v", this.PeerUserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserCheckBlockUserList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserCheckBlockUserList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetBlockedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserGetBlockedList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetContactSignUpNotification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetContactSignUpNotification{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserSetContactSignUpNotification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserSetContactSignUpNotification{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Silent != nil {
		s = append(s, "Silent: "+fmt.Sprintf("%#v", this.Silent)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetContentSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetContentSettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserSetContentSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserSetContentSettings{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "SensitiveEnabled: "+fmt.Sprintf("%#v", this.SensitiveEnabled)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserDeleteContact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserDeleteContact{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetContactList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetContactList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetContactIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetContactIdList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetContact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserGetContact{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserAddContact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&user.TLUserAddContact{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.AddPhonePrivacyException != nil {
		s = append(s, "AddPhonePrivacyException: "+fmt.Sprintf("%#v", this.AddPhonePrivacyException)+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserCheckContact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserCheckContact{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserImportContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserImportContacts{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetCountryCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetCountryCode{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUpdateAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserUpdateAbout{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUpdateFirstAndLastName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserUpdateFirstAndLastName{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUpdateVerified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserUpdateVerified{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Verified != nil {
		s = append(s, "Verified: "+fmt.Sprintf("%#v", this.Verified)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUpdateUsername) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserUpdateUsername{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserUpdateProfilePhoto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserUpdateProfilePhoto{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserDeleteProfilePhotos) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserDeleteProfilePhotos{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetProfilePhotos) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetProfilePhotos{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserSetBotCommands) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.TLUserSetBotCommands{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "BotId: "+fmt.Sprintf("%#v", this.BotId)+",\n")
	if this.Commands != nil {
		s = append(s, "Commands: "+fmt.Sprintf("%#v", this.Commands)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserIsBot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserIsBot{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetBotInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TLUserGetBotInfo{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "BotId: "+fmt.Sprintf("%#v", this.BotId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserGetFullUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.TLUserGetFullUser{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfUserId: "+fmt.Sprintf("%#v", this.SelfUserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_LastSeenData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.Vector_LastSeenData{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_ImmutableUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.Vector_ImmutableUser{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_PeerPeerNotifySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.Vector_PeerPeerNotifySettings{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_PrivacyRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.Vector_PrivacyRule{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_PredefinedUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.Vector_PredefinedUser{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_Long) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.Vector_Long{")
	s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_PeerBlocked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.Vector_PeerBlocked{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_ContactData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.Vector_ContactData{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUserTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCUserClient is the client API for RPCUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCUserClient interface {
	UserGetLastSeens(ctx context.Context, in *TLUserGetLastSeens, opts ...grpc.CallOption) (*Vector_LastSeenData, error)
	UserUpdateLastSeen(ctx context.Context, in *TLUserUpdateLastSeen, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetLastSeen(ctx context.Context, in *TLUserGetLastSeen, opts ...grpc.CallOption) (*LastSeenData, error)
	UserGetImmutableUser(ctx context.Context, in *TLUserGetImmutableUser, opts ...grpc.CallOption) (*ImmutableUser, error)
	UserGetMutableUsers(ctx context.Context, in *TLUserGetMutableUsers, opts ...grpc.CallOption) (*Vector_ImmutableUser, error)
	UserGetImmutableUserByPhone(ctx context.Context, in *TLUserGetImmutableUserByPhone, opts ...grpc.CallOption) (*ImmutableUser, error)
	UserGetImmutableUserByToken(ctx context.Context, in *TLUserGetImmutableUserByToken, opts ...grpc.CallOption) (*ImmutableUser, error)
	UserSetAccountDaysTTL(ctx context.Context, in *TLUserSetAccountDaysTTL, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetAccountDaysTTL(ctx context.Context, in *TLUserGetAccountDaysTTL, opts ...grpc.CallOption) (*mtproto.AccountDaysTTL, error)
	UserGetNotifySettings(ctx context.Context, in *TLUserGetNotifySettings, opts ...grpc.CallOption) (*mtproto.PeerNotifySettings, error)
	UserGetNotifySettingsList(ctx context.Context, in *TLUserGetNotifySettingsList, opts ...grpc.CallOption) (*Vector_PeerPeerNotifySettings, error)
	UserSetNotifySettings(ctx context.Context, in *TLUserSetNotifySettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserResetNotifySettings(ctx context.Context, in *TLUserResetNotifySettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetAllNotifySettings(ctx context.Context, in *TLUserGetAllNotifySettings, opts ...grpc.CallOption) (*Vector_PeerPeerNotifySettings, error)
	UserGetGlobalPrivacySettings(ctx context.Context, in *TLUserGetGlobalPrivacySettings, opts ...grpc.CallOption) (*mtproto.GlobalPrivacySettings, error)
	UserSetGlobalPrivacySettings(ctx context.Context, in *TLUserSetGlobalPrivacySettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetPrivacy(ctx context.Context, in *TLUserGetPrivacy, opts ...grpc.CallOption) (*Vector_PrivacyRule, error)
	UserSetPrivacy(ctx context.Context, in *TLUserSetPrivacy, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserCheckPrivacy(ctx context.Context, in *TLUserCheckPrivacy, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserAddPeerSettings(ctx context.Context, in *TLUserAddPeerSettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetPeerSettings(ctx context.Context, in *TLUserGetPeerSettings, opts ...grpc.CallOption) (*mtproto.PeerSettings, error)
	UserDeletePeerSettings(ctx context.Context, in *TLUserDeletePeerSettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserChangePhone(ctx context.Context, in *TLUserChangePhone, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserCreateNewPredefinedUser(ctx context.Context, in *TLUserCreateNewPredefinedUser, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error)
	UserGetPredefinedUser(ctx context.Context, in *TLUserGetPredefinedUser, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error)
	UserGetAllPredefinedUser(ctx context.Context, in *TLUserGetAllPredefinedUser, opts ...grpc.CallOption) (*Vector_PredefinedUser, error)
	UserUpdatePredefinedFirstAndLastName(ctx context.Context, in *TLUserUpdatePredefinedFirstAndLastName, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error)
	UserUpdatePredefinedVerified(ctx context.Context, in *TLUserUpdatePredefinedVerified, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error)
	UserUpdatePredefinedUsername(ctx context.Context, in *TLUserUpdatePredefinedUsername, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error)
	UserUpdatePredefinedCode(ctx context.Context, in *TLUserUpdatePredefinedCode, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error)
	UserPredefinedBindRegisteredUserId(ctx context.Context, in *TLUserPredefinedBindRegisteredUserId, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserCreateNewUser(ctx context.Context, in *TLUserCreateNewUser, opts ...grpc.CallOption) (*ImmutableUser, error)
	UserBlockPeer(ctx context.Context, in *TLUserBlockPeer, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUnBlockPeer(ctx context.Context, in *TLUserUnBlockPeer, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserBlockedByUser(ctx context.Context, in *TLUserBlockedByUser, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserIsBlockedByUser(ctx context.Context, in *TLUserIsBlockedByUser, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserCheckBlockUserList(ctx context.Context, in *TLUserCheckBlockUserList, opts ...grpc.CallOption) (*Vector_Long, error)
	UserGetBlockedList(ctx context.Context, in *TLUserGetBlockedList, opts ...grpc.CallOption) (*Vector_PeerBlocked, error)
	UserGetContactSignUpNotification(ctx context.Context, in *TLUserGetContactSignUpNotification, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserSetContactSignUpNotification(ctx context.Context, in *TLUserSetContactSignUpNotification, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetContentSettings(ctx context.Context, in *TLUserGetContentSettings, opts ...grpc.CallOption) (*mtproto.Account_ContentSettings, error)
	UserSetContentSettings(ctx context.Context, in *TLUserSetContentSettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserDeleteContact(ctx context.Context, in *TLUserDeleteContact, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetContactList(ctx context.Context, in *TLUserGetContactList, opts ...grpc.CallOption) (*Vector_ContactData, error)
	UserGetContactIdList(ctx context.Context, in *TLUserGetContactIdList, opts ...grpc.CallOption) (*Vector_Long, error)
	UserGetContact(ctx context.Context, in *TLUserGetContact, opts ...grpc.CallOption) (*ContactData, error)
	UserAddContact(ctx context.Context, in *TLUserAddContact, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserCheckContact(ctx context.Context, in *TLUserCheckContact, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserImportContacts(ctx context.Context, in *TLUserImportContacts, opts ...grpc.CallOption) (*UserImportedContacts, error)
	UserGetCountryCode(ctx context.Context, in *TLUserGetCountryCode, opts ...grpc.CallOption) (*mtproto.String, error)
	UserUpdateAbout(ctx context.Context, in *TLUserUpdateAbout, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUpdateFirstAndLastName(ctx context.Context, in *TLUserUpdateFirstAndLastName, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUpdateVerified(ctx context.Context, in *TLUserUpdateVerified, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUpdateUsername(ctx context.Context, in *TLUserUpdateUsername, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUpdateProfilePhoto(ctx context.Context, in *TLUserUpdateProfilePhoto, opts ...grpc.CallOption) (*mtproto.Int64, error)
	UserDeleteProfilePhotos(ctx context.Context, in *TLUserDeleteProfilePhotos, opts ...grpc.CallOption) (*mtproto.Int64, error)
	UserGetProfilePhotos(ctx context.Context, in *TLUserGetProfilePhotos, opts ...grpc.CallOption) (*Vector_Long, error)
	UserSetBotCommands(ctx context.Context, in *TLUserSetBotCommands, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserIsBot(ctx context.Context, in *TLUserIsBot, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetBotInfo(ctx context.Context, in *TLUserGetBotInfo, opts ...grpc.CallOption) (*mtproto.BotInfo, error)
	UserGetFullUser(ctx context.Context, in *TLUserGetFullUser, opts ...grpc.CallOption) (*mtproto.Users_UserFull, error)
}

type rPCUserClient struct {
	cc *grpc.ClientConn
}

func NewRPCUserClient(cc *grpc.ClientConn) RPCUserClient {
	return &rPCUserClient{cc}
}

func (c *rPCUserClient) UserGetLastSeens(ctx context.Context, in *TLUserGetLastSeens, opts ...grpc.CallOption) (*Vector_LastSeenData, error) {
	out := new(Vector_LastSeenData)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getLastSeens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateLastSeen(ctx context.Context, in *TLUserUpdateLastSeen, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_updateLastSeen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetLastSeen(ctx context.Context, in *TLUserGetLastSeen, opts ...grpc.CallOption) (*LastSeenData, error) {
	out := new(LastSeenData)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getLastSeen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetImmutableUser(ctx context.Context, in *TLUserGetImmutableUser, opts ...grpc.CallOption) (*ImmutableUser, error) {
	out := new(ImmutableUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getImmutableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetMutableUsers(ctx context.Context, in *TLUserGetMutableUsers, opts ...grpc.CallOption) (*Vector_ImmutableUser, error) {
	out := new(Vector_ImmutableUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getMutableUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetImmutableUserByPhone(ctx context.Context, in *TLUserGetImmutableUserByPhone, opts ...grpc.CallOption) (*ImmutableUser, error) {
	out := new(ImmutableUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getImmutableUserByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetImmutableUserByToken(ctx context.Context, in *TLUserGetImmutableUserByToken, opts ...grpc.CallOption) (*ImmutableUser, error) {
	out := new(ImmutableUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getImmutableUserByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetAccountDaysTTL(ctx context.Context, in *TLUserSetAccountDaysTTL, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_setAccountDaysTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetAccountDaysTTL(ctx context.Context, in *TLUserGetAccountDaysTTL, opts ...grpc.CallOption) (*mtproto.AccountDaysTTL, error) {
	out := new(mtproto.AccountDaysTTL)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getAccountDaysTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetNotifySettings(ctx context.Context, in *TLUserGetNotifySettings, opts ...grpc.CallOption) (*mtproto.PeerNotifySettings, error) {
	out := new(mtproto.PeerNotifySettings)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetNotifySettingsList(ctx context.Context, in *TLUserGetNotifySettingsList, opts ...grpc.CallOption) (*Vector_PeerPeerNotifySettings, error) {
	out := new(Vector_PeerPeerNotifySettings)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getNotifySettingsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetNotifySettings(ctx context.Context, in *TLUserSetNotifySettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_setNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserResetNotifySettings(ctx context.Context, in *TLUserResetNotifySettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_resetNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetAllNotifySettings(ctx context.Context, in *TLUserGetAllNotifySettings, opts ...grpc.CallOption) (*Vector_PeerPeerNotifySettings, error) {
	out := new(Vector_PeerPeerNotifySettings)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getAllNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetGlobalPrivacySettings(ctx context.Context, in *TLUserGetGlobalPrivacySettings, opts ...grpc.CallOption) (*mtproto.GlobalPrivacySettings, error) {
	out := new(mtproto.GlobalPrivacySettings)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getGlobalPrivacySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetGlobalPrivacySettings(ctx context.Context, in *TLUserSetGlobalPrivacySettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_setGlobalPrivacySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetPrivacy(ctx context.Context, in *TLUserGetPrivacy, opts ...grpc.CallOption) (*Vector_PrivacyRule, error) {
	out := new(Vector_PrivacyRule)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetPrivacy(ctx context.Context, in *TLUserSetPrivacy, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_setPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCheckPrivacy(ctx context.Context, in *TLUserCheckPrivacy, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_checkPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserAddPeerSettings(ctx context.Context, in *TLUserAddPeerSettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_addPeerSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetPeerSettings(ctx context.Context, in *TLUserGetPeerSettings, opts ...grpc.CallOption) (*mtproto.PeerSettings, error) {
	out := new(mtproto.PeerSettings)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getPeerSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserDeletePeerSettings(ctx context.Context, in *TLUserDeletePeerSettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_deletePeerSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserChangePhone(ctx context.Context, in *TLUserChangePhone, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_changePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCreateNewPredefinedUser(ctx context.Context, in *TLUserCreateNewPredefinedUser, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error) {
	out := new(mtproto.PredefinedUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_createNewPredefinedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetPredefinedUser(ctx context.Context, in *TLUserGetPredefinedUser, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error) {
	out := new(mtproto.PredefinedUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getPredefinedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetAllPredefinedUser(ctx context.Context, in *TLUserGetAllPredefinedUser, opts ...grpc.CallOption) (*Vector_PredefinedUser, error) {
	out := new(Vector_PredefinedUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getAllPredefinedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdatePredefinedFirstAndLastName(ctx context.Context, in *TLUserUpdatePredefinedFirstAndLastName, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error) {
	out := new(mtproto.PredefinedUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_updatePredefinedFirstAndLastName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdatePredefinedVerified(ctx context.Context, in *TLUserUpdatePredefinedVerified, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error) {
	out := new(mtproto.PredefinedUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_updatePredefinedVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdatePredefinedUsername(ctx context.Context, in *TLUserUpdatePredefinedUsername, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error) {
	out := new(mtproto.PredefinedUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_updatePredefinedUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdatePredefinedCode(ctx context.Context, in *TLUserUpdatePredefinedCode, opts ...grpc.CallOption) (*mtproto.PredefinedUser, error) {
	out := new(mtproto.PredefinedUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_updatePredefinedCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserPredefinedBindRegisteredUserId(ctx context.Context, in *TLUserPredefinedBindRegisteredUserId, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_predefinedBindRegisteredUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCreateNewUser(ctx context.Context, in *TLUserCreateNewUser, opts ...grpc.CallOption) (*ImmutableUser, error) {
	out := new(ImmutableUser)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_createNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserBlockPeer(ctx context.Context, in *TLUserBlockPeer, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_blockPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUnBlockPeer(ctx context.Context, in *TLUserUnBlockPeer, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_unBlockPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserBlockedByUser(ctx context.Context, in *TLUserBlockedByUser, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_blockedByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserIsBlockedByUser(ctx context.Context, in *TLUserIsBlockedByUser, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_isBlockedByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCheckBlockUserList(ctx context.Context, in *TLUserCheckBlockUserList, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_checkBlockUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetBlockedList(ctx context.Context, in *TLUserGetBlockedList, opts ...grpc.CallOption) (*Vector_PeerBlocked, error) {
	out := new(Vector_PeerBlocked)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getBlockedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetContactSignUpNotification(ctx context.Context, in *TLUserGetContactSignUpNotification, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getContactSignUpNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetContactSignUpNotification(ctx context.Context, in *TLUserSetContactSignUpNotification, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_setContactSignUpNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetContentSettings(ctx context.Context, in *TLUserGetContentSettings, opts ...grpc.CallOption) (*mtproto.Account_ContentSettings, error) {
	out := new(mtproto.Account_ContentSettings)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getContentSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetContentSettings(ctx context.Context, in *TLUserSetContentSettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_setContentSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserDeleteContact(ctx context.Context, in *TLUserDeleteContact, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_deleteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetContactList(ctx context.Context, in *TLUserGetContactList, opts ...grpc.CallOption) (*Vector_ContactData, error) {
	out := new(Vector_ContactData)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getContactList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetContactIdList(ctx context.Context, in *TLUserGetContactIdList, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getContactIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetContact(ctx context.Context, in *TLUserGetContact, opts ...grpc.CallOption) (*ContactData, error) {
	out := new(ContactData)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserAddContact(ctx context.Context, in *TLUserAddContact, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_addContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCheckContact(ctx context.Context, in *TLUserCheckContact, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_checkContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserImportContacts(ctx context.Context, in *TLUserImportContacts, opts ...grpc.CallOption) (*UserImportedContacts, error) {
	out := new(UserImportedContacts)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_importContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetCountryCode(ctx context.Context, in *TLUserGetCountryCode, opts ...grpc.CallOption) (*mtproto.String, error) {
	out := new(mtproto.String)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getCountryCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateAbout(ctx context.Context, in *TLUserUpdateAbout, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_updateAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateFirstAndLastName(ctx context.Context, in *TLUserUpdateFirstAndLastName, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_updateFirstAndLastName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateVerified(ctx context.Context, in *TLUserUpdateVerified, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_updateVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateUsername(ctx context.Context, in *TLUserUpdateUsername, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_updateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateProfilePhoto(ctx context.Context, in *TLUserUpdateProfilePhoto, opts ...grpc.CallOption) (*mtproto.Int64, error) {
	out := new(mtproto.Int64)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_updateProfilePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserDeleteProfilePhotos(ctx context.Context, in *TLUserDeleteProfilePhotos, opts ...grpc.CallOption) (*mtproto.Int64, error) {
	out := new(mtproto.Int64)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_deleteProfilePhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetProfilePhotos(ctx context.Context, in *TLUserGetProfilePhotos, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getProfilePhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetBotCommands(ctx context.Context, in *TLUserSetBotCommands, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_setBotCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserIsBot(ctx context.Context, in *TLUserIsBot, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_isBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetBotInfo(ctx context.Context, in *TLUserGetBotInfo, opts ...grpc.CallOption) (*mtproto.BotInfo, error) {
	out := new(mtproto.BotInfo)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getBotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetFullUser(ctx context.Context, in *TLUserGetFullUser, opts ...grpc.CallOption) (*mtproto.Users_UserFull, error) {
	out := new(mtproto.Users_UserFull)
	err := c.cc.Invoke(ctx, "/user.RPCUser/user_getFullUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUserServer is the server API for RPCUser service.
type RPCUserServer interface {
	UserGetLastSeens(context.Context, *TLUserGetLastSeens) (*Vector_LastSeenData, error)
	UserUpdateLastSeen(context.Context, *TLUserUpdateLastSeen) (*mtproto.Bool, error)
	UserGetLastSeen(context.Context, *TLUserGetLastSeen) (*LastSeenData, error)
	UserGetImmutableUser(context.Context, *TLUserGetImmutableUser) (*ImmutableUser, error)
	UserGetMutableUsers(context.Context, *TLUserGetMutableUsers) (*Vector_ImmutableUser, error)
	UserGetImmutableUserByPhone(context.Context, *TLUserGetImmutableUserByPhone) (*ImmutableUser, error)
	UserGetImmutableUserByToken(context.Context, *TLUserGetImmutableUserByToken) (*ImmutableUser, error)
	UserSetAccountDaysTTL(context.Context, *TLUserSetAccountDaysTTL) (*mtproto.Bool, error)
	UserGetAccountDaysTTL(context.Context, *TLUserGetAccountDaysTTL) (*mtproto.AccountDaysTTL, error)
	UserGetNotifySettings(context.Context, *TLUserGetNotifySettings) (*mtproto.PeerNotifySettings, error)
	UserGetNotifySettingsList(context.Context, *TLUserGetNotifySettingsList) (*Vector_PeerPeerNotifySettings, error)
	UserSetNotifySettings(context.Context, *TLUserSetNotifySettings) (*mtproto.Bool, error)
	UserResetNotifySettings(context.Context, *TLUserResetNotifySettings) (*mtproto.Bool, error)
	UserGetAllNotifySettings(context.Context, *TLUserGetAllNotifySettings) (*Vector_PeerPeerNotifySettings, error)
	UserGetGlobalPrivacySettings(context.Context, *TLUserGetGlobalPrivacySettings) (*mtproto.GlobalPrivacySettings, error)
	UserSetGlobalPrivacySettings(context.Context, *TLUserSetGlobalPrivacySettings) (*mtproto.Bool, error)
	UserGetPrivacy(context.Context, *TLUserGetPrivacy) (*Vector_PrivacyRule, error)
	UserSetPrivacy(context.Context, *TLUserSetPrivacy) (*mtproto.Bool, error)
	UserCheckPrivacy(context.Context, *TLUserCheckPrivacy) (*mtproto.Bool, error)
	UserAddPeerSettings(context.Context, *TLUserAddPeerSettings) (*mtproto.Bool, error)
	UserGetPeerSettings(context.Context, *TLUserGetPeerSettings) (*mtproto.PeerSettings, error)
	UserDeletePeerSettings(context.Context, *TLUserDeletePeerSettings) (*mtproto.Bool, error)
	UserChangePhone(context.Context, *TLUserChangePhone) (*mtproto.Bool, error)
	UserCreateNewPredefinedUser(context.Context, *TLUserCreateNewPredefinedUser) (*mtproto.PredefinedUser, error)
	UserGetPredefinedUser(context.Context, *TLUserGetPredefinedUser) (*mtproto.PredefinedUser, error)
	UserGetAllPredefinedUser(context.Context, *TLUserGetAllPredefinedUser) (*Vector_PredefinedUser, error)
	UserUpdatePredefinedFirstAndLastName(context.Context, *TLUserUpdatePredefinedFirstAndLastName) (*mtproto.PredefinedUser, error)
	UserUpdatePredefinedVerified(context.Context, *TLUserUpdatePredefinedVerified) (*mtproto.PredefinedUser, error)
	UserUpdatePredefinedUsername(context.Context, *TLUserUpdatePredefinedUsername) (*mtproto.PredefinedUser, error)
	UserUpdatePredefinedCode(context.Context, *TLUserUpdatePredefinedCode) (*mtproto.PredefinedUser, error)
	UserPredefinedBindRegisteredUserId(context.Context, *TLUserPredefinedBindRegisteredUserId) (*mtproto.Bool, error)
	UserCreateNewUser(context.Context, *TLUserCreateNewUser) (*ImmutableUser, error)
	UserBlockPeer(context.Context, *TLUserBlockPeer) (*mtproto.Bool, error)
	UserUnBlockPeer(context.Context, *TLUserUnBlockPeer) (*mtproto.Bool, error)
	UserBlockedByUser(context.Context, *TLUserBlockedByUser) (*mtproto.Bool, error)
	UserIsBlockedByUser(context.Context, *TLUserIsBlockedByUser) (*mtproto.Bool, error)
	UserCheckBlockUserList(context.Context, *TLUserCheckBlockUserList) (*Vector_Long, error)
	UserGetBlockedList(context.Context, *TLUserGetBlockedList) (*Vector_PeerBlocked, error)
	UserGetContactSignUpNotification(context.Context, *TLUserGetContactSignUpNotification) (*mtproto.Bool, error)
	UserSetContactSignUpNotification(context.Context, *TLUserSetContactSignUpNotification) (*mtproto.Bool, error)
	UserGetContentSettings(context.Context, *TLUserGetContentSettings) (*mtproto.Account_ContentSettings, error)
	UserSetContentSettings(context.Context, *TLUserSetContentSettings) (*mtproto.Bool, error)
	UserDeleteContact(context.Context, *TLUserDeleteContact) (*mtproto.Bool, error)
	UserGetContactList(context.Context, *TLUserGetContactList) (*Vector_ContactData, error)
	UserGetContactIdList(context.Context, *TLUserGetContactIdList) (*Vector_Long, error)
	UserGetContact(context.Context, *TLUserGetContact) (*ContactData, error)
	UserAddContact(context.Context, *TLUserAddContact) (*mtproto.Bool, error)
	UserCheckContact(context.Context, *TLUserCheckContact) (*mtproto.Bool, error)
	UserImportContacts(context.Context, *TLUserImportContacts) (*UserImportedContacts, error)
	UserGetCountryCode(context.Context, *TLUserGetCountryCode) (*mtproto.String, error)
	UserUpdateAbout(context.Context, *TLUserUpdateAbout) (*mtproto.Bool, error)
	UserUpdateFirstAndLastName(context.Context, *TLUserUpdateFirstAndLastName) (*mtproto.Bool, error)
	UserUpdateVerified(context.Context, *TLUserUpdateVerified) (*mtproto.Bool, error)
	UserUpdateUsername(context.Context, *TLUserUpdateUsername) (*mtproto.Bool, error)
	UserUpdateProfilePhoto(context.Context, *TLUserUpdateProfilePhoto) (*mtproto.Int64, error)
	UserDeleteProfilePhotos(context.Context, *TLUserDeleteProfilePhotos) (*mtproto.Int64, error)
	UserGetProfilePhotos(context.Context, *TLUserGetProfilePhotos) (*Vector_Long, error)
	UserSetBotCommands(context.Context, *TLUserSetBotCommands) (*mtproto.Bool, error)
	UserIsBot(context.Context, *TLUserIsBot) (*mtproto.Bool, error)
	UserGetBotInfo(context.Context, *TLUserGetBotInfo) (*mtproto.BotInfo, error)
	UserGetFullUser(context.Context, *TLUserGetFullUser) (*mtproto.Users_UserFull, error)
}

// UnimplementedRPCUserServer can be embedded to have forward compatible implementations.
type UnimplementedRPCUserServer struct {
}

func (*UnimplementedRPCUserServer) UserGetLastSeens(ctx context.Context, req *TLUserGetLastSeens) (*Vector_LastSeenData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetLastSeens not implemented")
}
func (*UnimplementedRPCUserServer) UserUpdateLastSeen(ctx context.Context, req *TLUserUpdateLastSeen) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateLastSeen not implemented")
}
func (*UnimplementedRPCUserServer) UserGetLastSeen(ctx context.Context, req *TLUserGetLastSeen) (*LastSeenData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetLastSeen not implemented")
}
func (*UnimplementedRPCUserServer) UserGetImmutableUser(ctx context.Context, req *TLUserGetImmutableUser) (*ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetImmutableUser not implemented")
}
func (*UnimplementedRPCUserServer) UserGetMutableUsers(ctx context.Context, req *TLUserGetMutableUsers) (*Vector_ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetMutableUsers not implemented")
}
func (*UnimplementedRPCUserServer) UserGetImmutableUserByPhone(ctx context.Context, req *TLUserGetImmutableUserByPhone) (*ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetImmutableUserByPhone not implemented")
}
func (*UnimplementedRPCUserServer) UserGetImmutableUserByToken(ctx context.Context, req *TLUserGetImmutableUserByToken) (*ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetImmutableUserByToken not implemented")
}
func (*UnimplementedRPCUserServer) UserSetAccountDaysTTL(ctx context.Context, req *TLUserSetAccountDaysTTL) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetAccountDaysTTL not implemented")
}
func (*UnimplementedRPCUserServer) UserGetAccountDaysTTL(ctx context.Context, req *TLUserGetAccountDaysTTL) (*mtproto.AccountDaysTTL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetAccountDaysTTL not implemented")
}
func (*UnimplementedRPCUserServer) UserGetNotifySettings(ctx context.Context, req *TLUserGetNotifySettings) (*mtproto.PeerNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetNotifySettings not implemented")
}
func (*UnimplementedRPCUserServer) UserGetNotifySettingsList(ctx context.Context, req *TLUserGetNotifySettingsList) (*Vector_PeerPeerNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetNotifySettingsList not implemented")
}
func (*UnimplementedRPCUserServer) UserSetNotifySettings(ctx context.Context, req *TLUserSetNotifySettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetNotifySettings not implemented")
}
func (*UnimplementedRPCUserServer) UserResetNotifySettings(ctx context.Context, req *TLUserResetNotifySettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserResetNotifySettings not implemented")
}
func (*UnimplementedRPCUserServer) UserGetAllNotifySettings(ctx context.Context, req *TLUserGetAllNotifySettings) (*Vector_PeerPeerNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetAllNotifySettings not implemented")
}
func (*UnimplementedRPCUserServer) UserGetGlobalPrivacySettings(ctx context.Context, req *TLUserGetGlobalPrivacySettings) (*mtproto.GlobalPrivacySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetGlobalPrivacySettings not implemented")
}
func (*UnimplementedRPCUserServer) UserSetGlobalPrivacySettings(ctx context.Context, req *TLUserSetGlobalPrivacySettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetGlobalPrivacySettings not implemented")
}
func (*UnimplementedRPCUserServer) UserGetPrivacy(ctx context.Context, req *TLUserGetPrivacy) (*Vector_PrivacyRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetPrivacy not implemented")
}
func (*UnimplementedRPCUserServer) UserSetPrivacy(ctx context.Context, req *TLUserSetPrivacy) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetPrivacy not implemented")
}
func (*UnimplementedRPCUserServer) UserCheckPrivacy(ctx context.Context, req *TLUserCheckPrivacy) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckPrivacy not implemented")
}
func (*UnimplementedRPCUserServer) UserAddPeerSettings(ctx context.Context, req *TLUserAddPeerSettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddPeerSettings not implemented")
}
func (*UnimplementedRPCUserServer) UserGetPeerSettings(ctx context.Context, req *TLUserGetPeerSettings) (*mtproto.PeerSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetPeerSettings not implemented")
}
func (*UnimplementedRPCUserServer) UserDeletePeerSettings(ctx context.Context, req *TLUserDeletePeerSettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeletePeerSettings not implemented")
}
func (*UnimplementedRPCUserServer) UserChangePhone(ctx context.Context, req *TLUserChangePhone) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChangePhone not implemented")
}
func (*UnimplementedRPCUserServer) UserCreateNewPredefinedUser(ctx context.Context, req *TLUserCreateNewPredefinedUser) (*mtproto.PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreateNewPredefinedUser not implemented")
}
func (*UnimplementedRPCUserServer) UserGetPredefinedUser(ctx context.Context, req *TLUserGetPredefinedUser) (*mtproto.PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetPredefinedUser not implemented")
}
func (*UnimplementedRPCUserServer) UserGetAllPredefinedUser(ctx context.Context, req *TLUserGetAllPredefinedUser) (*Vector_PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetAllPredefinedUser not implemented")
}
func (*UnimplementedRPCUserServer) UserUpdatePredefinedFirstAndLastName(ctx context.Context, req *TLUserUpdatePredefinedFirstAndLastName) (*mtproto.PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdatePredefinedFirstAndLastName not implemented")
}
func (*UnimplementedRPCUserServer) UserUpdatePredefinedVerified(ctx context.Context, req *TLUserUpdatePredefinedVerified) (*mtproto.PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdatePredefinedVerified not implemented")
}
func (*UnimplementedRPCUserServer) UserUpdatePredefinedUsername(ctx context.Context, req *TLUserUpdatePredefinedUsername) (*mtproto.PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdatePredefinedUsername not implemented")
}
func (*UnimplementedRPCUserServer) UserUpdatePredefinedCode(ctx context.Context, req *TLUserUpdatePredefinedCode) (*mtproto.PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdatePredefinedCode not implemented")
}
func (*UnimplementedRPCUserServer) UserPredefinedBindRegisteredUserId(ctx context.Context, req *TLUserPredefinedBindRegisteredUserId) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPredefinedBindRegisteredUserId not implemented")
}
func (*UnimplementedRPCUserServer) UserCreateNewUser(ctx context.Context, req *TLUserCreateNewUser) (*ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreateNewUser not implemented")
}
func (*UnimplementedRPCUserServer) UserBlockPeer(ctx context.Context, req *TLUserBlockPeer) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBlockPeer not implemented")
}
func (*UnimplementedRPCUserServer) UserUnBlockPeer(ctx context.Context, req *TLUserUnBlockPeer) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUnBlockPeer not implemented")
}
func (*UnimplementedRPCUserServer) UserBlockedByUser(ctx context.Context, req *TLUserBlockedByUser) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBlockedByUser not implemented")
}
func (*UnimplementedRPCUserServer) UserIsBlockedByUser(ctx context.Context, req *TLUserIsBlockedByUser) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIsBlockedByUser not implemented")
}
func (*UnimplementedRPCUserServer) UserCheckBlockUserList(ctx context.Context, req *TLUserCheckBlockUserList) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckBlockUserList not implemented")
}
func (*UnimplementedRPCUserServer) UserGetBlockedList(ctx context.Context, req *TLUserGetBlockedList) (*Vector_PeerBlocked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetBlockedList not implemented")
}
func (*UnimplementedRPCUserServer) UserGetContactSignUpNotification(ctx context.Context, req *TLUserGetContactSignUpNotification) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetContactSignUpNotification not implemented")
}
func (*UnimplementedRPCUserServer) UserSetContactSignUpNotification(ctx context.Context, req *TLUserSetContactSignUpNotification) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetContactSignUpNotification not implemented")
}
func (*UnimplementedRPCUserServer) UserGetContentSettings(ctx context.Context, req *TLUserGetContentSettings) (*mtproto.Account_ContentSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetContentSettings not implemented")
}
func (*UnimplementedRPCUserServer) UserSetContentSettings(ctx context.Context, req *TLUserSetContentSettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetContentSettings not implemented")
}
func (*UnimplementedRPCUserServer) UserDeleteContact(ctx context.Context, req *TLUserDeleteContact) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteContact not implemented")
}
func (*UnimplementedRPCUserServer) UserGetContactList(ctx context.Context, req *TLUserGetContactList) (*Vector_ContactData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetContactList not implemented")
}
func (*UnimplementedRPCUserServer) UserGetContactIdList(ctx context.Context, req *TLUserGetContactIdList) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetContactIdList not implemented")
}
func (*UnimplementedRPCUserServer) UserGetContact(ctx context.Context, req *TLUserGetContact) (*ContactData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetContact not implemented")
}
func (*UnimplementedRPCUserServer) UserAddContact(ctx context.Context, req *TLUserAddContact) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddContact not implemented")
}
func (*UnimplementedRPCUserServer) UserCheckContact(ctx context.Context, req *TLUserCheckContact) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckContact not implemented")
}
func (*UnimplementedRPCUserServer) UserImportContacts(ctx context.Context, req *TLUserImportContacts) (*UserImportedContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserImportContacts not implemented")
}
func (*UnimplementedRPCUserServer) UserGetCountryCode(ctx context.Context, req *TLUserGetCountryCode) (*mtproto.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetCountryCode not implemented")
}
func (*UnimplementedRPCUserServer) UserUpdateAbout(ctx context.Context, req *TLUserUpdateAbout) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateAbout not implemented")
}
func (*UnimplementedRPCUserServer) UserUpdateFirstAndLastName(ctx context.Context, req *TLUserUpdateFirstAndLastName) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateFirstAndLastName not implemented")
}
func (*UnimplementedRPCUserServer) UserUpdateVerified(ctx context.Context, req *TLUserUpdateVerified) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateVerified not implemented")
}
func (*UnimplementedRPCUserServer) UserUpdateUsername(ctx context.Context, req *TLUserUpdateUsername) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateUsername not implemented")
}
func (*UnimplementedRPCUserServer) UserUpdateProfilePhoto(ctx context.Context, req *TLUserUpdateProfilePhoto) (*mtproto.Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateProfilePhoto not implemented")
}
func (*UnimplementedRPCUserServer) UserDeleteProfilePhotos(ctx context.Context, req *TLUserDeleteProfilePhotos) (*mtproto.Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteProfilePhotos not implemented")
}
func (*UnimplementedRPCUserServer) UserGetProfilePhotos(ctx context.Context, req *TLUserGetProfilePhotos) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetProfilePhotos not implemented")
}
func (*UnimplementedRPCUserServer) UserSetBotCommands(ctx context.Context, req *TLUserSetBotCommands) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetBotCommands not implemented")
}
func (*UnimplementedRPCUserServer) UserIsBot(ctx context.Context, req *TLUserIsBot) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIsBot not implemented")
}
func (*UnimplementedRPCUserServer) UserGetBotInfo(ctx context.Context, req *TLUserGetBotInfo) (*mtproto.BotInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetBotInfo not implemented")
}
func (*UnimplementedRPCUserServer) UserGetFullUser(ctx context.Context, req *TLUserGetFullUser) (*mtproto.Users_UserFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetFullUser not implemented")
}

func RegisterRPCUserServer(s *grpc.Server, srv RPCUserServer) {
	s.RegisterService(&_RPCUser_serviceDesc, srv)
}

func _RPCUser_UserGetLastSeens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetLastSeens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetLastSeens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetLastSeens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetLastSeens(ctx, req.(*TLUserGetLastSeens))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateLastSeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateLastSeen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateLastSeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUpdateLastSeen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateLastSeen(ctx, req.(*TLUserUpdateLastSeen))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetLastSeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetLastSeen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetLastSeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetLastSeen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetLastSeen(ctx, req.(*TLUserGetLastSeen))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetImmutableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetImmutableUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetImmutableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetImmutableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetImmutableUser(ctx, req.(*TLUserGetImmutableUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetMutableUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetMutableUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetMutableUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetMutableUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetMutableUsers(ctx, req.(*TLUserGetMutableUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetImmutableUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetImmutableUserByPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetImmutableUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetImmutableUserByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetImmutableUserByPhone(ctx, req.(*TLUserGetImmutableUserByPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetImmutableUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetImmutableUserByToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetImmutableUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetImmutableUserByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetImmutableUserByToken(ctx, req.(*TLUserGetImmutableUserByToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetAccountDaysTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetAccountDaysTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetAccountDaysTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserSetAccountDaysTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetAccountDaysTTL(ctx, req.(*TLUserSetAccountDaysTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetAccountDaysTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetAccountDaysTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetAccountDaysTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetAccountDaysTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetAccountDaysTTL(ctx, req.(*TLUserGetAccountDaysTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetNotifySettings(ctx, req.(*TLUserGetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetNotifySettingsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetNotifySettingsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetNotifySettingsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetNotifySettingsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetNotifySettingsList(ctx, req.(*TLUserGetNotifySettingsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserSetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetNotifySettings(ctx, req.(*TLUserSetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserResetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserResetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserResetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserResetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserResetNotifySettings(ctx, req.(*TLUserResetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetAllNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetAllNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetAllNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetAllNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetAllNotifySettings(ctx, req.(*TLUserGetAllNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetGlobalPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetGlobalPrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetGlobalPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetGlobalPrivacySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetGlobalPrivacySettings(ctx, req.(*TLUserGetGlobalPrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetGlobalPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetGlobalPrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetGlobalPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserSetGlobalPrivacySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetGlobalPrivacySettings(ctx, req.(*TLUserSetGlobalPrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetPrivacy(ctx, req.(*TLUserGetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserSetPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetPrivacy(ctx, req.(*TLUserSetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCheckPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCheckPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCheckPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserCheckPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCheckPrivacy(ctx, req.(*TLUserCheckPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserAddPeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserAddPeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserAddPeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserAddPeerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserAddPeerSettings(ctx, req.(*TLUserAddPeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetPeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetPeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetPeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetPeerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetPeerSettings(ctx, req.(*TLUserGetPeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserDeletePeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserDeletePeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserDeletePeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserDeletePeerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserDeletePeerSettings(ctx, req.(*TLUserDeletePeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserChangePhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserChangePhone(ctx, req.(*TLUserChangePhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCreateNewPredefinedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCreateNewPredefinedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCreateNewPredefinedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserCreateNewPredefinedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCreateNewPredefinedUser(ctx, req.(*TLUserCreateNewPredefinedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetPredefinedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetPredefinedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetPredefinedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetPredefinedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetPredefinedUser(ctx, req.(*TLUserGetPredefinedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetAllPredefinedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetAllPredefinedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetAllPredefinedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetAllPredefinedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetAllPredefinedUser(ctx, req.(*TLUserGetAllPredefinedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdatePredefinedFirstAndLastName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdatePredefinedFirstAndLastName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdatePredefinedFirstAndLastName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUpdatePredefinedFirstAndLastName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdatePredefinedFirstAndLastName(ctx, req.(*TLUserUpdatePredefinedFirstAndLastName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdatePredefinedVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdatePredefinedVerified)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdatePredefinedVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUpdatePredefinedVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdatePredefinedVerified(ctx, req.(*TLUserUpdatePredefinedVerified))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdatePredefinedUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdatePredefinedUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdatePredefinedUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUpdatePredefinedUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdatePredefinedUsername(ctx, req.(*TLUserUpdatePredefinedUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdatePredefinedCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdatePredefinedCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdatePredefinedCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUpdatePredefinedCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdatePredefinedCode(ctx, req.(*TLUserUpdatePredefinedCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserPredefinedBindRegisteredUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserPredefinedBindRegisteredUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserPredefinedBindRegisteredUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserPredefinedBindRegisteredUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserPredefinedBindRegisteredUserId(ctx, req.(*TLUserPredefinedBindRegisteredUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCreateNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCreateNewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCreateNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserCreateNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCreateNewUser(ctx, req.(*TLUserCreateNewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserBlockPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserBlockPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserBlockPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserBlockPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserBlockPeer(ctx, req.(*TLUserBlockPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUnBlockPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUnBlockPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUnBlockPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUnBlockPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUnBlockPeer(ctx, req.(*TLUserUnBlockPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserBlockedByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserBlockedByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserBlockedByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserBlockedByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserBlockedByUser(ctx, req.(*TLUserBlockedByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserIsBlockedByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserIsBlockedByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserIsBlockedByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserIsBlockedByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserIsBlockedByUser(ctx, req.(*TLUserIsBlockedByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCheckBlockUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCheckBlockUserList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCheckBlockUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserCheckBlockUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCheckBlockUserList(ctx, req.(*TLUserCheckBlockUserList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetBlockedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetBlockedList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetBlockedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetBlockedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetBlockedList(ctx, req.(*TLUserGetBlockedList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetContactSignUpNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetContactSignUpNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetContactSignUpNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetContactSignUpNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetContactSignUpNotification(ctx, req.(*TLUserGetContactSignUpNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetContactSignUpNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetContactSignUpNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetContactSignUpNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserSetContactSignUpNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetContactSignUpNotification(ctx, req.(*TLUserSetContactSignUpNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetContentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetContentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetContentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetContentSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetContentSettings(ctx, req.(*TLUserGetContentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetContentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetContentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetContentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserSetContentSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetContentSettings(ctx, req.(*TLUserSetContentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserDeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserDeleteContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserDeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserDeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserDeleteContact(ctx, req.(*TLUserDeleteContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetContactList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetContactList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetContactList(ctx, req.(*TLUserGetContactList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetContactIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetContactIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetContactIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetContactIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetContactIdList(ctx, req.(*TLUserGetContactIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetContact(ctx, req.(*TLUserGetContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserAddContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserAddContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserAddContact(ctx, req.(*TLUserAddContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCheckContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCheckContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCheckContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserCheckContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCheckContact(ctx, req.(*TLUserCheckContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserImportContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserImportContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserImportContacts(ctx, req.(*TLUserImportContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetCountryCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetCountryCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetCountryCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetCountryCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetCountryCode(ctx, req.(*TLUserGetCountryCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUpdateAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateAbout(ctx, req.(*TLUserUpdateAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateFirstAndLastName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateFirstAndLastName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateFirstAndLastName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUpdateFirstAndLastName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateFirstAndLastName(ctx, req.(*TLUserUpdateFirstAndLastName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateVerified)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUpdateVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateVerified(ctx, req.(*TLUserUpdateVerified))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateUsername(ctx, req.(*TLUserUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserUpdateProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateProfilePhoto(ctx, req.(*TLUserUpdateProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserDeleteProfilePhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserDeleteProfilePhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserDeleteProfilePhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserDeleteProfilePhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserDeleteProfilePhotos(ctx, req.(*TLUserDeleteProfilePhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetProfilePhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetProfilePhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetProfilePhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetProfilePhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetProfilePhotos(ctx, req.(*TLUserGetProfilePhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetBotCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetBotCommands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetBotCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserSetBotCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetBotCommands(ctx, req.(*TLUserSetBotCommands))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserIsBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserIsBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserIsBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserIsBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserIsBot(ctx, req.(*TLUserIsBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetBotInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetBotInfo(ctx, req.(*TLUserGetBotInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetFullUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RPCUser/UserGetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetFullUser(ctx, req.(*TLUserGetFullUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.RPCUser",
	HandlerType: (*RPCUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "user_getLastSeens",
			Handler:    _RPCUser_UserGetLastSeens_Handler,
		},
		{
			MethodName: "user_updateLastSeen",
			Handler:    _RPCUser_UserUpdateLastSeen_Handler,
		},
		{
			MethodName: "user_getLastSeen",
			Handler:    _RPCUser_UserGetLastSeen_Handler,
		},
		{
			MethodName: "user_getImmutableUser",
			Handler:    _RPCUser_UserGetImmutableUser_Handler,
		},
		{
			MethodName: "user_getMutableUsers",
			Handler:    _RPCUser_UserGetMutableUsers_Handler,
		},
		{
			MethodName: "user_getImmutableUserByPhone",
			Handler:    _RPCUser_UserGetImmutableUserByPhone_Handler,
		},
		{
			MethodName: "user_getImmutableUserByToken",
			Handler:    _RPCUser_UserGetImmutableUserByToken_Handler,
		},
		{
			MethodName: "user_setAccountDaysTTL",
			Handler:    _RPCUser_UserSetAccountDaysTTL_Handler,
		},
		{
			MethodName: "user_getAccountDaysTTL",
			Handler:    _RPCUser_UserGetAccountDaysTTL_Handler,
		},
		{
			MethodName: "user_getNotifySettings",
			Handler:    _RPCUser_UserGetNotifySettings_Handler,
		},
		{
			MethodName: "user_getNotifySettingsList",
			Handler:    _RPCUser_UserGetNotifySettingsList_Handler,
		},
		{
			MethodName: "user_setNotifySettings",
			Handler:    _RPCUser_UserSetNotifySettings_Handler,
		},
		{
			MethodName: "user_resetNotifySettings",
			Handler:    _RPCUser_UserResetNotifySettings_Handler,
		},
		{
			MethodName: "user_getAllNotifySettings",
			Handler:    _RPCUser_UserGetAllNotifySettings_Handler,
		},
		{
			MethodName: "user_getGlobalPrivacySettings",
			Handler:    _RPCUser_UserGetGlobalPrivacySettings_Handler,
		},
		{
			MethodName: "user_setGlobalPrivacySettings",
			Handler:    _RPCUser_UserSetGlobalPrivacySettings_Handler,
		},
		{
			MethodName: "user_getPrivacy",
			Handler:    _RPCUser_UserGetPrivacy_Handler,
		},
		{
			MethodName: "user_setPrivacy",
			Handler:    _RPCUser_UserSetPrivacy_Handler,
		},
		{
			MethodName: "user_checkPrivacy",
			Handler:    _RPCUser_UserCheckPrivacy_Handler,
		},
		{
			MethodName: "user_addPeerSettings",
			Handler:    _RPCUser_UserAddPeerSettings_Handler,
		},
		{
			MethodName: "user_getPeerSettings",
			Handler:    _RPCUser_UserGetPeerSettings_Handler,
		},
		{
			MethodName: "user_deletePeerSettings",
			Handler:    _RPCUser_UserDeletePeerSettings_Handler,
		},
		{
			MethodName: "user_changePhone",
			Handler:    _RPCUser_UserChangePhone_Handler,
		},
		{
			MethodName: "user_createNewPredefinedUser",
			Handler:    _RPCUser_UserCreateNewPredefinedUser_Handler,
		},
		{
			MethodName: "user_getPredefinedUser",
			Handler:    _RPCUser_UserGetPredefinedUser_Handler,
		},
		{
			MethodName: "user_getAllPredefinedUser",
			Handler:    _RPCUser_UserGetAllPredefinedUser_Handler,
		},
		{
			MethodName: "user_updatePredefinedFirstAndLastName",
			Handler:    _RPCUser_UserUpdatePredefinedFirstAndLastName_Handler,
		},
		{
			MethodName: "user_updatePredefinedVerified",
			Handler:    _RPCUser_UserUpdatePredefinedVerified_Handler,
		},
		{
			MethodName: "user_updatePredefinedUsername",
			Handler:    _RPCUser_UserUpdatePredefinedUsername_Handler,
		},
		{
			MethodName: "user_updatePredefinedCode",
			Handler:    _RPCUser_UserUpdatePredefinedCode_Handler,
		},
		{
			MethodName: "user_predefinedBindRegisteredUserId",
			Handler:    _RPCUser_UserPredefinedBindRegisteredUserId_Handler,
		},
		{
			MethodName: "user_createNewUser",
			Handler:    _RPCUser_UserCreateNewUser_Handler,
		},
		{
			MethodName: "user_blockPeer",
			Handler:    _RPCUser_UserBlockPeer_Handler,
		},
		{
			MethodName: "user_unBlockPeer",
			Handler:    _RPCUser_UserUnBlockPeer_Handler,
		},
		{
			MethodName: "user_blockedByUser",
			Handler:    _RPCUser_UserBlockedByUser_Handler,
		},
		{
			MethodName: "user_isBlockedByUser",
			Handler:    _RPCUser_UserIsBlockedByUser_Handler,
		},
		{
			MethodName: "user_checkBlockUserList",
			Handler:    _RPCUser_UserCheckBlockUserList_Handler,
		},
		{
			MethodName: "user_getBlockedList",
			Handler:    _RPCUser_UserGetBlockedList_Handler,
		},
		{
			MethodName: "user_getContactSignUpNotification",
			Handler:    _RPCUser_UserGetContactSignUpNotification_Handler,
		},
		{
			MethodName: "user_setContactSignUpNotification",
			Handler:    _RPCUser_UserSetContactSignUpNotification_Handler,
		},
		{
			MethodName: "user_getContentSettings",
			Handler:    _RPCUser_UserGetContentSettings_Handler,
		},
		{
			MethodName: "user_setContentSettings",
			Handler:    _RPCUser_UserSetContentSettings_Handler,
		},
		{
			MethodName: "user_deleteContact",
			Handler:    _RPCUser_UserDeleteContact_Handler,
		},
		{
			MethodName: "user_getContactList",
			Handler:    _RPCUser_UserGetContactList_Handler,
		},
		{
			MethodName: "user_getContactIdList",
			Handler:    _RPCUser_UserGetContactIdList_Handler,
		},
		{
			MethodName: "user_getContact",
			Handler:    _RPCUser_UserGetContact_Handler,
		},
		{
			MethodName: "user_addContact",
			Handler:    _RPCUser_UserAddContact_Handler,
		},
		{
			MethodName: "user_checkContact",
			Handler:    _RPCUser_UserCheckContact_Handler,
		},
		{
			MethodName: "user_importContacts",
			Handler:    _RPCUser_UserImportContacts_Handler,
		},
		{
			MethodName: "user_getCountryCode",
			Handler:    _RPCUser_UserGetCountryCode_Handler,
		},
		{
			MethodName: "user_updateAbout",
			Handler:    _RPCUser_UserUpdateAbout_Handler,
		},
		{
			MethodName: "user_updateFirstAndLastName",
			Handler:    _RPCUser_UserUpdateFirstAndLastName_Handler,
		},
		{
			MethodName: "user_updateVerified",
			Handler:    _RPCUser_UserUpdateVerified_Handler,
		},
		{
			MethodName: "user_updateUsername",
			Handler:    _RPCUser_UserUpdateUsername_Handler,
		},
		{
			MethodName: "user_updateProfilePhoto",
			Handler:    _RPCUser_UserUpdateProfilePhoto_Handler,
		},
		{
			MethodName: "user_deleteProfilePhotos",
			Handler:    _RPCUser_UserDeleteProfilePhotos_Handler,
		},
		{
			MethodName: "user_getProfilePhotos",
			Handler:    _RPCUser_UserGetProfilePhotos_Handler,
		},
		{
			MethodName: "user_setBotCommands",
			Handler:    _RPCUser_UserSetBotCommands_Handler,
		},
		{
			MethodName: "user_isBot",
			Handler:    _RPCUser_UserIsBot_Handler,
		},
		{
			MethodName: "user_getBotInfo",
			Handler:    _RPCUser_UserGetBotInfo_Handler,
		},
		{
			MethodName: "user_getFullUser",
			Handler:    _RPCUser_UserGetFullUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.tl.proto",
}

func (m *BotData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BotInlinePlaceholder != nil {
		{
			size, err := m.BotInlinePlaceholder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.BotInfoVersion != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.BotInfoVersion))
		i--
		dAtA[i] = 0x58
	}
	if m.BotInlineGeo {
		i--
		if m.BotInlineGeo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.BotNochats {
		i--
		if m.BotNochats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.BotChatHistory {
		i--
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x32
	}
	if m.Creator != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Creator))
		i--
		dAtA[i] = 0x28
	}
	if m.BotType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.BotType))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLBotData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLBotData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLBotData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MutualContact {
		i--
		if m.MutualContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.LastName != nil {
		{
			size, err := m.LastName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.FirstName != nil {
		{
			size, err := m.FirstName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ContactUserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.ContactUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImmutableUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImmutableUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImmutableUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeysPrivacyRules) > 0 {
		for iNdEx := len(m.KeysPrivacyRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeysPrivacyRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LastSeenAt != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.LastSeenAt))
		i--
		dAtA[i] = 0x20
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLImmutableUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLImmutableUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLImmutableUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LastSeenData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastSeenData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastSeenData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expires != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Expires))
		i--
		dAtA[i] = 0x28
	}
	if m.LastSeenAt != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.LastSeenAt))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLLastSeenData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLastSeenData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLastSeenData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerPeerNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerPeerNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerPeerNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PeerId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x20
	}
	if m.PeerType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPeerPeerNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPeerPeerNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPeerPeerNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivacyKeyRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivacyKeyRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivacyKeyRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Key != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPrivacyKeyRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPrivacyKeyRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPrivacyKeyRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Premium {
		i--
		if m.Premium {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.BotAttachMenu {
		i--
		if m.BotAttachMenu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.PrivaciesVersion != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PrivaciesVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.ContactsVersion != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.ContactsVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.RestrictionReason) > 0 {
		for iNdEx := len(m.RestrictionReason) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RestrictionReason[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.Restricted {
		i--
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Fake {
		i--
		if m.Fake {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Scam {
		i--
		if m.Scam {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Support {
		i--
		if m.Support {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Bot != nil {
		{
			size, err := m.Bot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.ProfilePhoto != nil {
		{
			size, err := m.ProfilePhoto.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SceretKeyId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.SceretKeyId))
		i--
		dAtA[i] = 0x30
	}
	if m.UserType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x28
	}
	if m.AccessHash != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserImportedContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserImportedContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserImportedContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateIdList) > 0 {
		dAtA17 := make([]byte, len(m.UpdateIdList)*10)
		var j16 int
		for _, num1 := range m.UpdateIdList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintUserTl(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RetryContacts) > 0 {
		dAtA19 := make([]byte, len(m.RetryContacts)*10)
		var j18 int
		for _, num1 := range m.RetryContacts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintUserTl(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PopularInvites) > 0 {
		for iNdEx := len(m.PopularInvites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PopularInvites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Imported) > 0 {
		for iNdEx := len(m.Imported) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Imported[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUserImportedContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserImportedContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserImportedContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetLastSeens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetLastSeens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetLastSeens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA22 := make([]byte, len(m.Id)*10)
		var j21 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintUserTl(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUpdateLastSeen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUpdateLastSeen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUpdateLastSeen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expires != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Expires))
		i--
		dAtA[i] = 0x28
	}
	if m.LastSeenAt != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.LastSeenAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetLastSeen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetLastSeen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetLastSeen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetImmutableUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetImmutableUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetImmutableUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetMutableUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetMutableUsers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetMutableUsers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.To) > 0 {
		dAtA24 := make([]byte, len(m.To)*10)
		var j23 int
		for _, num1 := range m.To {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		i -= j23
		copy(dAtA[i:], dAtA24[:j23])
		i = encodeVarintUserTl(dAtA, i, uint64(j23))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		dAtA26 := make([]byte, len(m.Id)*10)
		var j25 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		i -= j25
		copy(dAtA[i:], dAtA26[:j25])
		i = encodeVarintUserTl(dAtA, i, uint64(j25))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetImmutableUserByPhone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetImmutableUserByPhone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetImmutableUserByPhone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetImmutableUserByToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetImmutableUserByToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetImmutableUserByToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserSetAccountDaysTTL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserSetAccountDaysTTL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserSetAccountDaysTTL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ttl != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetAccountDaysTTL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetAccountDaysTTL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetAccountDaysTTL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetNotifySettingsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetNotifySettingsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetNotifySettingsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserSetNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserSetNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserSetNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PeerId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserResetNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserResetNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserResetNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetAllNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetAllNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetAllNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetGlobalPrivacySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetGlobalPrivacySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetGlobalPrivacySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserSetGlobalPrivacySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserSetGlobalPrivacySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserSetGlobalPrivacySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetPrivacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetPrivacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetPrivacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.KeyType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserSetPrivacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserSetPrivacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserSetPrivacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.KeyType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserCheckPrivacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserCheckPrivacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserCheckPrivacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.KeyType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserAddPeerSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserAddPeerSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserAddPeerSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PeerId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetPeerSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetPeerSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetPeerSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserDeletePeerSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserDeletePeerSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserDeletePeerSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserChangePhone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserChangePhone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserChangePhone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserCreateNewPredefinedUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserCreateNewPredefinedUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserCreateNewPredefinedUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x32
	}
	if m.LastName != nil {
		{
			size, err := m.LastName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetPredefinedUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetPredefinedUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetPredefinedUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetAllPredefinedUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetAllPredefinedUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetAllPredefinedUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUpdatePredefinedFirstAndLastName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUpdatePredefinedFirstAndLastName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUpdatePredefinedFirstAndLastName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastName != nil {
		{
			size, err := m.LastName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUpdatePredefinedVerified) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUpdatePredefinedVerified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUpdatePredefinedVerified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUpdatePredefinedUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUpdatePredefinedUsername) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUpdatePredefinedUsername) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Username != nil {
		{
			size, err := m.Username.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUpdatePredefinedCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUpdatePredefinedCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUpdatePredefinedCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserPredefinedBindRegisteredUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserPredefinedBindRegisteredUserId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserPredefinedBindRegisteredUserId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RegisteredUserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.RegisteredUserId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserCreateNewUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserCreateNewUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserCreateNewUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x22
	}
	if m.SecretKeyId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.SecretKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserBlockPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserBlockPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserBlockPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUnBlockPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUnBlockPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUnBlockPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserBlockedByUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserBlockedByUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserBlockedByUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerUserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserIsBlockedByUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserIsBlockedByUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserIsBlockedByUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerUserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.PeerUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserCheckBlockUserList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserCheckBlockUserList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserCheckBlockUserList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA34 := make([]byte, len(m.Id)*10)
		var j33 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		i -= j33
		copy(dAtA[i:], dAtA34[:j33])
		i = encodeVarintUserTl(dAtA, i, uint64(j33))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetBlockedList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetBlockedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetBlockedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Offset != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetContactSignUpNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetContactSignUpNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetContactSignUpNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserSetContactSignUpNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserSetContactSignUpNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserSetContactSignUpNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Silent != nil {
		{
			size, err := m.Silent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetContentSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetContentSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetContentSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserSetContentSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserSetContentSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserSetContentSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SensitiveEnabled {
		i--
		if m.SensitiveEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserDeleteContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserDeleteContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserDeleteContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetContactList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetContactList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetContactList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetContactIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetContactIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetContactIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserAddContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserAddContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserAddContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if m.AddPhonePrivacyException != nil {
		{
			size, err := m.AddPhonePrivacyException.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserCheckContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserCheckContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserCheckContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserImportContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserImportContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserImportContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetCountryCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetCountryCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetCountryCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUpdateAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUpdateAbout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUpdateAbout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUpdateFirstAndLastName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUpdateFirstAndLastName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUpdateFirstAndLastName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUpdateVerified) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUpdateVerified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUpdateVerified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Verified != nil {
		{
			size, err := m.Verified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUpdateUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUpdateUsername) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUpdateUsername) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintUserTl(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserUpdateProfilePhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserUpdateProfilePhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserUpdateProfilePhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserDeleteProfilePhotos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserDeleteProfilePhotos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserDeleteProfilePhotos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA39 := make([]byte, len(m.Id)*10)
		var j38 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA39[j38] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j38++
			}
			dAtA39[j38] = uint8(num)
			j38++
		}
		i -= j38
		copy(dAtA[i:], dAtA39[:j38])
		i = encodeVarintUserTl(dAtA, i, uint64(j38))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetProfilePhotos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetProfilePhotos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetProfilePhotos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserSetBotCommands) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserSetBotCommands) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserSetBotCommands) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BotId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserIsBot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserIsBot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserIsBot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetBotInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetBotInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetBotInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BotId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUserGetFullUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserGetFullUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserGetFullUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfUserId != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.SelfUserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUserTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vector_LastSeenData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_LastSeenData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_LastSeenData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_ImmutableUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_ImmutableUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_ImmutableUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_PeerPeerNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_PeerPeerNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_PeerPeerNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_PrivacyRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_PrivacyRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_PrivacyRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_PredefinedUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_PredefinedUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_PredefinedUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_Long) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_Long) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_Long) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		dAtA41 := make([]byte, len(m.Datas)*10)
		var j40 int
		for _, num1 := range m.Datas {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA41[j40] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j40++
			}
			dAtA41[j40] = uint8(num)
			j40++
		}
		i -= j40
		copy(dAtA[i:], dAtA41[:j40])
		i = encodeVarintUserTl(dAtA, i, uint64(j40))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vector_PeerBlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_PeerBlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_PeerBlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_ContactData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_ContactData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_ContactData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BotData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.BotType != 0 {
		n += 1 + sovUserTl(uint64(m.BotType))
	}
	if m.Creator != 0 {
		n += 1 + sovUserTl(uint64(m.Creator))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNochats {
		n += 2
	}
	if m.BotInlineGeo {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovUserTl(uint64(m.BotInfoVersion))
	}
	if m.BotInlinePlaceholder != nil {
		l = m.BotInlinePlaceholder.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLBotData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.ContactUserId != 0 {
		n += 1 + sovUserTl(uint64(m.ContactUserId))
	}
	if m.FirstName != nil {
		l = m.FirstName.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.LastName != nil {
		l = m.LastName.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.MutualContact {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLContactData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImmutableUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.LastSeenAt != 0 {
		n += 1 + sovUserTl(uint64(m.LastSeenAt))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if len(m.KeysPrivacyRules) > 0 {
		for _, e := range m.KeysPrivacyRules {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLImmutableUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LastSeenData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.LastSeenAt != 0 {
		n += 1 + sovUserTl(uint64(m.LastSeenAt))
	}
	if m.Expires != 0 {
		n += 1 + sovUserTl(uint64(m.Expires))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLLastSeenData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PeerPeerNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.PeerType != 0 {
		n += 1 + sovUserTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerId))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLPeerPeerNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivacyKeyRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.Key != 0 {
		n += 1 + sovUserTl(uint64(m.Key))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLPrivacyKeyRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserTl(uint64(m.AccessHash))
	}
	if m.UserType != 0 {
		n += 1 + sovUserTl(uint64(m.UserType))
	}
	if m.SceretKeyId != 0 {
		n += 1 + sovUserTl(uint64(m.SceretKeyId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.ProfilePhoto != nil {
		l = m.ProfilePhoto.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Bot != nil {
		l = m.Bot.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	if m.Support {
		n += 2
	}
	if m.Scam {
		n += 3
	}
	if m.Fake {
		n += 3
	}
	if m.About != nil {
		l = m.About.Size()
		n += 2 + l + sovUserTl(uint64(l))
	}
	if m.Restricted {
		n += 3
	}
	if len(m.RestrictionReason) > 0 {
		for _, e := range m.RestrictionReason {
			l = e.Size()
			n += 2 + l + sovUserTl(uint64(l))
		}
	}
	if m.ContactsVersion != 0 {
		n += 2 + sovUserTl(uint64(m.ContactsVersion))
	}
	if m.PrivaciesVersion != 0 {
		n += 2 + sovUserTl(uint64(m.PrivaciesVersion))
	}
	if m.Deleted {
		n += 3
	}
	if m.BotAttachMenu {
		n += 3
	}
	if m.Premium {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserImportedContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if len(m.Imported) > 0 {
		for _, e := range m.Imported {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if len(m.PopularInvites) > 0 {
		for _, e := range m.PopularInvites {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if len(m.RetryContacts) > 0 {
		l = 0
		for _, e := range m.RetryContacts {
			l += sovUserTl(uint64(e))
		}
		n += 1 + sovUserTl(uint64(l)) + l
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if len(m.UpdateIdList) > 0 {
		l = 0
		for _, e := range m.UpdateIdList {
			l += sovUserTl(uint64(e))
		}
		n += 1 + sovUserTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserImportedContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetLastSeens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovUserTl(uint64(e))
		}
		n += 1 + sovUserTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUpdateLastSeen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.LastSeenAt != 0 {
		n += 1 + sovUserTl(uint64(m.LastSeenAt))
	}
	if m.Expires != 0 {
		n += 1 + sovUserTl(uint64(m.Expires))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetLastSeen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetImmutableUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetMutableUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovUserTl(uint64(e))
		}
		n += 1 + sovUserTl(uint64(l)) + l
	}
	if len(m.To) > 0 {
		l = 0
		for _, e := range m.To {
			l += sovUserTl(uint64(e))
		}
		n += 1 + sovUserTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetImmutableUserByPhone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetImmutableUserByToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserSetAccountDaysTTL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.Ttl != 0 {
		n += 1 + sovUserTl(uint64(m.Ttl))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetAccountDaysTTL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovUserTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetNotifySettingsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserSetNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovUserTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerId))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserResetNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetAllNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetGlobalPrivacySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserSetGlobalPrivacySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetPrivacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.KeyType != 0 {
		n += 1 + sovUserTl(uint64(m.KeyType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserSetPrivacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.KeyType != 0 {
		n += 1 + sovUserTl(uint64(m.KeyType))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserCheckPrivacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.KeyType != 0 {
		n += 1 + sovUserTl(uint64(m.KeyType))
	}
	if m.PeerId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserAddPeerSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovUserTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerId))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetPeerSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovUserTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserDeletePeerSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovUserTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserChangePhone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserCreateNewPredefinedUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.LastName != nil {
		l = m.LastName.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetPredefinedUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetAllPredefinedUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUpdatePredefinedFirstAndLastName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.LastName != nil {
		l = m.LastName.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUpdatePredefinedVerified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUpdatePredefinedUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Username != nil {
		l = m.Username.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUpdatePredefinedCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserPredefinedBindRegisteredUserId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.RegisteredUserId != 0 {
		n += 1 + sovUserTl(uint64(m.RegisteredUserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserCreateNewUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.SecretKeyId != 0 {
		n += 1 + sovUserTl(uint64(m.SecretKeyId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserBlockPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovUserTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUnBlockPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.PeerType != 0 {
		n += 1 + sovUserTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserBlockedByUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.PeerUserId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerUserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserIsBlockedByUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.PeerUserId != 0 {
		n += 1 + sovUserTl(uint64(m.PeerUserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserCheckBlockUserList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovUserTl(uint64(e))
		}
		n += 1 + sovUserTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetBlockedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.Offset != 0 {
		n += 1 + sovUserTl(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovUserTl(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetContactSignUpNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserSetContactSignUpNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.Silent != nil {
		l = m.Silent.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetContentSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserSetContentSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.SensitiveEnabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserDeleteContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetContactList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetContactIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserAddContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.AddPhonePrivacyException != nil {
		l = m.AddPhonePrivacyException.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserCheckContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserImportContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetCountryCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUpdateAbout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUpdateFirstAndLastName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUpdateVerified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.Verified != nil {
		l = m.Verified.Size()
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUpdateUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovUserTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserUpdateProfilePhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserDeleteProfilePhotos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovUserTl(uint64(e))
		}
		n += 1 + sovUserTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetProfilePhotos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserSetBotCommands) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTl(uint64(m.UserId))
	}
	if m.BotId != 0 {
		n += 1 + sovUserTl(uint64(m.BotId))
	}
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserIsBot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetBotInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.BotId != 0 {
		n += 1 + sovUserTl(uint64(m.BotId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserGetFullUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUserTl(uint64(m.Constructor))
	}
	if m.SelfUserId != 0 {
		n += 1 + sovUserTl(uint64(m.SelfUserId))
	}
	if m.Id != 0 {
		n += 1 + sovUserTl(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_LastSeenData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_ImmutableUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_PeerPeerNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_PrivacyRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_PredefinedUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_Long) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		l = 0
		for _, e := range m.Datas {
			l += sovUserTl(uint64(e))
		}
		n += 1 + sovUserTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_PeerBlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_ContactData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovUserTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUserTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserTl(x uint64) (n int) {
	return sovUserTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BotData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotType", wireType)
			}
			m.BotType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNochats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNochats = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInlineGeo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotInlineGeo = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInlinePlaceholder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BotInlinePlaceholder == nil {
				m.BotInlinePlaceholder = &types.StringValue{}
			}
			if err := m.BotInlinePlaceholder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLBotData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_botData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_botData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &BotData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactUserId", wireType)
			}
			m.ContactUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstName == nil {
				m.FirstName = &types.StringValue{}
			}
			if err := m.FirstName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastName == nil {
				m.LastName = &types.StringValue{}
			}
			if err := m.LastName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutualContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MutualContact = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contactData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contactData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &ContactData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImmutableUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImmutableUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImmutableUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserData{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAt", wireType)
			}
			m.LastSeenAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeenAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &ContactData{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysPrivacyRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeysPrivacyRules = append(m.KeysPrivacyRules, &PrivacyKeyRules{})
			if err := m.KeysPrivacyRules[len(m.KeysPrivacyRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLImmutableUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_immutableUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_immutableUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &ImmutableUser{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastSeenData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastSeenData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastSeenData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAt", wireType)
			}
			m.LastSeenAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeenAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLastSeenData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_lastSeenData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_lastSeenData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &LastSeenData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerPeerNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerPeerNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerPeerNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &mtproto.PeerNotifySettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPeerPeerNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_peerPeerNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_peerPeerNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &PeerPeerNotifySettings{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivacyKeyRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivacyKeyRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivacyKeyRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &mtproto.PrivacyRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPrivacyKeyRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_privacyKeyRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_privacyKeyRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &PrivacyKeyRules{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceretKeyId", wireType)
			}
			m.SceretKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceretKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilePhoto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProfilePhoto == nil {
				m.ProfilePhoto = &mtproto.Photo{}
			}
			if err := m.ProfilePhoto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bot == nil {
				m.Bot = &BotData{}
			}
			if err := m.Bot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Support", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Support = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Scam = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fake", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fake = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = append(m.RestrictionReason, &mtproto.RestrictionReason{})
			if err := m.RestrictionReason[len(m.RestrictionReason)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactsVersion", wireType)
			}
			m.ContactsVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactsVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivaciesVersion", wireType)
			}
			m.PrivaciesVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivaciesVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotAttachMenu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotAttachMenu = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premium", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Premium = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_userData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_userData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &UserData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserImportedContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserImportedContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserImportedContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imported", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imported = append(m.Imported, &mtproto.ImportedContact{})
			if err := m.Imported[len(m.Imported)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopularInvites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PopularInvites = append(m.PopularInvites, &mtproto.PopularContact{})
			if err := m.PopularInvites[len(m.PopularInvites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RetryContacts = append(m.RetryContacts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUserTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RetryContacts) == 0 {
					m.RetryContacts = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RetryContacts = append(m.RetryContacts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryContacts", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &mtproto.User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UpdateIdList = append(m.UpdateIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUserTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UpdateIdList) == 0 {
					m.UpdateIdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UpdateIdList = append(m.UpdateIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserImportedContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_userImportedContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_userImportedContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &UserImportedContacts{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetLastSeens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getLastSeens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getLastSeens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUserTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUpdateLastSeen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_updateLastSeen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_updateLastSeen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAt", wireType)
			}
			m.LastSeenAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeenAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetLastSeen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getLastSeen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getLastSeen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetImmutableUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getImmutableUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getImmutableUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetMutableUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getMutableUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getMutableUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUserTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.To = append(m.To, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUserTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.To) == 0 {
					m.To = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.To = append(m.To, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetImmutableUserByPhone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getImmutableUserByPhone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getImmutableUserByPhone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetImmutableUserByToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getImmutableUserByToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getImmutableUserByToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserSetAccountDaysTTL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_setAccountDaysTTL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_setAccountDaysTTL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetAccountDaysTTL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getAccountDaysTTL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getAccountDaysTTL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetNotifySettingsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getNotifySettingsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getNotifySettingsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &mtproto.PeerUtil{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserSetNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_setNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_setNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &mtproto.PeerNotifySettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserResetNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_resetNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_resetNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetAllNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getAllNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getAllNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetGlobalPrivacySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getGlobalPrivacySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getGlobalPrivacySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserSetGlobalPrivacySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_setGlobalPrivacySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_setGlobalPrivacySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &mtproto.GlobalPrivacySettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetPrivacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getPrivacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getPrivacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserSetPrivacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_setPrivacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_setPrivacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &mtproto.PrivacyRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserCheckPrivacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_checkPrivacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_checkPrivacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserAddPeerSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_addPeerSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_addPeerSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &mtproto.PeerSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetPeerSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getPeerSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getPeerSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserDeletePeerSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_deletePeerSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_deletePeerSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserChangePhone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_changePhone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_changePhone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserCreateNewPredefinedUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_createNewPredefinedUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_createNewPredefinedUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastName == nil {
				m.LastName = &types.StringValue{}
			}
			if err := m.LastName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetPredefinedUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getPredefinedUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getPredefinedUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetAllPredefinedUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getAllPredefinedUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getAllPredefinedUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUpdatePredefinedFirstAndLastName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_updatePredefinedFirstAndLastName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_updatePredefinedFirstAndLastName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastName == nil {
				m.LastName = &types.StringValue{}
			}
			if err := m.LastName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUpdatePredefinedVerified) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_updatePredefinedVerified: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_updatePredefinedVerified: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUpdatePredefinedUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_updatePredefinedUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_updatePredefinedUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Username == nil {
				m.Username = &types.StringValue{}
			}
			if err := m.Username.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUpdatePredefinedCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_updatePredefinedCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_updatePredefinedCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserPredefinedBindRegisteredUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_predefinedBindRegisteredUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_predefinedBindRegisteredUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredUserId", wireType)
			}
			m.RegisteredUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisteredUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserCreateNewUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_createNewUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_createNewUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretKeyId", wireType)
			}
			m.SecretKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserBlockPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_blockPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_blockPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUnBlockPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_unBlockPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_unBlockPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserBlockedByUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_blockedByUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_blockedByUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerUserId", wireType)
			}
			m.PeerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserIsBlockedByUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_isBlockedByUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_isBlockedByUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerUserId", wireType)
			}
			m.PeerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserCheckBlockUserList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_checkBlockUserList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_checkBlockUserList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUserTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetBlockedList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getBlockedList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getBlockedList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetContactSignUpNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getContactSignUpNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getContactSignUpNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserSetContactSignUpNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_setContactSignUpNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_setContactSignUpNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Silent == nil {
				m.Silent = &mtproto.Bool{}
			}
			if err := m.Silent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetContentSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getContentSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getContentSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserSetContentSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_setContentSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_setContentSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SensitiveEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserDeleteContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_deleteContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_deleteContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetContactList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getContactList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getContactList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetContactIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getContactIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getContactIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserAddContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_addContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_addContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPhonePrivacyException", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddPhonePrivacyException == nil {
				m.AddPhonePrivacyException = &mtproto.Bool{}
			}
			if err := m.AddPhonePrivacyException.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserCheckContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_checkContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_checkContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserImportContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_importContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_importContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &mtproto.InputContact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetCountryCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getCountryCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getCountryCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUpdateAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_updateAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_updateAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUpdateFirstAndLastName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_updateFirstAndLastName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_updateFirstAndLastName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUpdateVerified) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_updateVerified: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_updateVerified: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Verified == nil {
				m.Verified = &mtproto.Bool{}
			}
			if err := m.Verified.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUpdateUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_updateUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_updateUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserUpdateProfilePhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_updateProfilePhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_updateProfilePhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserDeleteProfilePhotos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_deleteProfilePhotos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_deleteProfilePhotos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUserTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetProfilePhotos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getProfilePhotos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getProfilePhotos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserSetBotCommands) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_setBotCommands: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_setBotCommands: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &mtproto.BotCommand{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserIsBot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_isBot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_isBot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetBotInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getBotInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getBotInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserGetFullUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_user_getFullUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_user_getFullUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfUserId", wireType)
			}
			m.SelfUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_LastSeenData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_LastSeenData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_LastSeenData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &LastSeenData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_ImmutableUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_ImmutableUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_ImmutableUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &ImmutableUser{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_PeerPeerNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_PeerPeerNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_PeerPeerNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &PeerPeerNotifySettings{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_PrivacyRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_PrivacyRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_PrivacyRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &mtproto.PrivacyRule{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_PredefinedUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_PredefinedUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_PredefinedUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &mtproto.PredefinedUser{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_Long) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_Long: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_Long: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Datas = append(m.Datas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUserTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Datas) == 0 {
					m.Datas = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Datas = append(m.Datas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_PeerBlocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_PeerBlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_PeerBlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &mtproto.PeerBlocked{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_ContactData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_ContactData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_ContactData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &ContactData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserTl = fmt.Errorf("proto: unexpected end of group")
)
