// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: report.tl.proto

package report

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                            TLConstructor = 0
	CRC32_report_accountReportPeer           TLConstructor = 1976979630
	CRC32_report_accountReportProfilePhoto   TLConstructor = -1206920954
	CRC32_report_messagesReportSpam          TLConstructor = -2120170998
	CRC32_report_messagesReport              TLConstructor = -1299590501
	CRC32_report_messagesReportEncryptedSpam TLConstructor = 762034535
	CRC32_report_channelsReportSpam          TLConstructor = 2010319160
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	1976979630:  "CRC32_report_accountReportPeer",
	-1206920954: "CRC32_report_accountReportProfilePhoto",
	-2120170998: "CRC32_report_messagesReportSpam",
	-1299590501: "CRC32_report_messagesReport",
	762034535:   "CRC32_report_messagesReportEncryptedSpam",
	2010319160:  "CRC32_report_channelsReportSpam",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                            0,
	"CRC32_report_accountReportPeer":           1976979630,
	"CRC32_report_accountReportProfilePhoto":   -1206920954,
	"CRC32_report_messagesReportSpam":          -2120170998,
	"CRC32_report_messagesReport":              -1299590501,
	"CRC32_report_messagesReportEncryptedSpam": 762034535,
	"CRC32_report_channelsReportSpam":          2010319160,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2ef0beb11a60b0a5, []int{0}
}

//--------------------------------------------------------------------------------------------
// report.accountReportPeer reporter:long peer_type:int peer_id:long reason:ReportReason message:string = Bool;
type TLReportAccountReportPeer struct {
	Constructor          TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=report.TLConstructor" json:"constructor,omitempty"`
	Reporter             int64                 `protobuf:"varint,3,opt,name=reporter,proto3" json:"reporter,omitempty"`
	PeerType             int32                 `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64                 `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Reason               *mtproto.ReportReason `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	Message              string                `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLReportAccountReportPeer) Reset()         { *m = TLReportAccountReportPeer{} }
func (m *TLReportAccountReportPeer) String() string { return proto.CompactTextString(m) }
func (*TLReportAccountReportPeer) ProtoMessage()    {}
func (*TLReportAccountReportPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef0beb11a60b0a5, []int{0}
}
func (m *TLReportAccountReportPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReportAccountReportPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReportAccountReportPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLReportAccountReportPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReportAccountReportPeer.Merge(m, src)
}
func (m *TLReportAccountReportPeer) XXX_Size() int {
	return m.Size()
}
func (m *TLReportAccountReportPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReportAccountReportPeer.DiscardUnknown(m)
}

var xxx_messageInfo_TLReportAccountReportPeer proto.InternalMessageInfo

func (m *TLReportAccountReportPeer) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLReportAccountReportPeer) GetReporter() int64 {
	if m != nil {
		return m.Reporter
	}
	return 0
}

func (m *TLReportAccountReportPeer) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLReportAccountReportPeer) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLReportAccountReportPeer) GetReason() *mtproto.ReportReason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (m *TLReportAccountReportPeer) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//--------------------------------------------------------------------------------------------
// report.accountReportProfilePhoto reporter:long peer_type:int peer_id:long photo_id:long reason:ReportReason message:string = Bool;
type TLReportAccountReportProfilePhoto struct {
	Constructor          TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=report.TLConstructor" json:"constructor,omitempty"`
	Reporter             int64                 `protobuf:"varint,3,opt,name=reporter,proto3" json:"reporter,omitempty"`
	PeerType             int32                 `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64                 `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	PhotoId              int64                 `protobuf:"varint,6,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
	Reason               *mtproto.ReportReason `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	Message              string                `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLReportAccountReportProfilePhoto) Reset()         { *m = TLReportAccountReportProfilePhoto{} }
func (m *TLReportAccountReportProfilePhoto) String() string { return proto.CompactTextString(m) }
func (*TLReportAccountReportProfilePhoto) ProtoMessage()    {}
func (*TLReportAccountReportProfilePhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef0beb11a60b0a5, []int{1}
}
func (m *TLReportAccountReportProfilePhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReportAccountReportProfilePhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReportAccountReportProfilePhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLReportAccountReportProfilePhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReportAccountReportProfilePhoto.Merge(m, src)
}
func (m *TLReportAccountReportProfilePhoto) XXX_Size() int {
	return m.Size()
}
func (m *TLReportAccountReportProfilePhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReportAccountReportProfilePhoto.DiscardUnknown(m)
}

var xxx_messageInfo_TLReportAccountReportProfilePhoto proto.InternalMessageInfo

func (m *TLReportAccountReportProfilePhoto) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLReportAccountReportProfilePhoto) GetReporter() int64 {
	if m != nil {
		return m.Reporter
	}
	return 0
}

func (m *TLReportAccountReportProfilePhoto) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLReportAccountReportProfilePhoto) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLReportAccountReportProfilePhoto) GetPhotoId() int64 {
	if m != nil {
		return m.PhotoId
	}
	return 0
}

func (m *TLReportAccountReportProfilePhoto) GetReason() *mtproto.ReportReason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (m *TLReportAccountReportProfilePhoto) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//--------------------------------------------------------------------------------------------
// report.messagesReportSpam reporter:long peer_type:int peer_id:long = Bool;
type TLReportMessagesReportSpam struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=report.TLConstructor" json:"constructor,omitempty"`
	Reporter             int64         `protobuf:"varint,3,opt,name=reporter,proto3" json:"reporter,omitempty"`
	PeerType             int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLReportMessagesReportSpam) Reset()         { *m = TLReportMessagesReportSpam{} }
func (m *TLReportMessagesReportSpam) String() string { return proto.CompactTextString(m) }
func (*TLReportMessagesReportSpam) ProtoMessage()    {}
func (*TLReportMessagesReportSpam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef0beb11a60b0a5, []int{2}
}
func (m *TLReportMessagesReportSpam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReportMessagesReportSpam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReportMessagesReportSpam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLReportMessagesReportSpam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReportMessagesReportSpam.Merge(m, src)
}
func (m *TLReportMessagesReportSpam) XXX_Size() int {
	return m.Size()
}
func (m *TLReportMessagesReportSpam) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReportMessagesReportSpam.DiscardUnknown(m)
}

var xxx_messageInfo_TLReportMessagesReportSpam proto.InternalMessageInfo

func (m *TLReportMessagesReportSpam) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLReportMessagesReportSpam) GetReporter() int64 {
	if m != nil {
		return m.Reporter
	}
	return 0
}

func (m *TLReportMessagesReportSpam) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLReportMessagesReportSpam) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// report.messagesReport reporter:long peer_type:int peer_id:long id:Vector<int> reason:ReportReason message:string = Bool;
type TLReportMessagesReport struct {
	Constructor          TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=report.TLConstructor" json:"constructor,omitempty"`
	Reporter             int64                 `protobuf:"varint,3,opt,name=reporter,proto3" json:"reporter,omitempty"`
	PeerType             int32                 `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64                 `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Id                   []int32               `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
	Reason               *mtproto.ReportReason `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	Message              string                `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TLReportMessagesReport) Reset()         { *m = TLReportMessagesReport{} }
func (m *TLReportMessagesReport) String() string { return proto.CompactTextString(m) }
func (*TLReportMessagesReport) ProtoMessage()    {}
func (*TLReportMessagesReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef0beb11a60b0a5, []int{3}
}
func (m *TLReportMessagesReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReportMessagesReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReportMessagesReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLReportMessagesReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReportMessagesReport.Merge(m, src)
}
func (m *TLReportMessagesReport) XXX_Size() int {
	return m.Size()
}
func (m *TLReportMessagesReport) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReportMessagesReport.DiscardUnknown(m)
}

var xxx_messageInfo_TLReportMessagesReport proto.InternalMessageInfo

func (m *TLReportMessagesReport) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLReportMessagesReport) GetReporter() int64 {
	if m != nil {
		return m.Reporter
	}
	return 0
}

func (m *TLReportMessagesReport) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *TLReportMessagesReport) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *TLReportMessagesReport) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLReportMessagesReport) GetReason() *mtproto.ReportReason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (m *TLReportMessagesReport) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//--------------------------------------------------------------------------------------------
// report.messagesReportEncryptedSpam reporter:long chat_id:int = Bool;
type TLReportMessagesReportEncryptedSpam struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=report.TLConstructor" json:"constructor,omitempty"`
	Reporter             int64         `protobuf:"varint,3,opt,name=reporter,proto3" json:"reporter,omitempty"`
	ChatId               int32         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLReportMessagesReportEncryptedSpam) Reset()         { *m = TLReportMessagesReportEncryptedSpam{} }
func (m *TLReportMessagesReportEncryptedSpam) String() string { return proto.CompactTextString(m) }
func (*TLReportMessagesReportEncryptedSpam) ProtoMessage()    {}
func (*TLReportMessagesReportEncryptedSpam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef0beb11a60b0a5, []int{4}
}
func (m *TLReportMessagesReportEncryptedSpam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReportMessagesReportEncryptedSpam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReportMessagesReportEncryptedSpam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLReportMessagesReportEncryptedSpam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReportMessagesReportEncryptedSpam.Merge(m, src)
}
func (m *TLReportMessagesReportEncryptedSpam) XXX_Size() int {
	return m.Size()
}
func (m *TLReportMessagesReportEncryptedSpam) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReportMessagesReportEncryptedSpam.DiscardUnknown(m)
}

var xxx_messageInfo_TLReportMessagesReportEncryptedSpam proto.InternalMessageInfo

func (m *TLReportMessagesReportEncryptedSpam) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLReportMessagesReportEncryptedSpam) GetReporter() int64 {
	if m != nil {
		return m.Reporter
	}
	return 0
}

func (m *TLReportMessagesReportEncryptedSpam) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// report.channelsReportSpam reporter:long channel_id:long user_id:long id:Vector<int> = Bool;
type TLReportChannelsReportSpam struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=report.TLConstructor" json:"constructor,omitempty"`
	Reporter             int64         `protobuf:"varint,3,opt,name=reporter,proto3" json:"reporter,omitempty"`
	ChannelId            int64         `protobuf:"varint,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId               int64         `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                   []int32       `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLReportChannelsReportSpam) Reset()         { *m = TLReportChannelsReportSpam{} }
func (m *TLReportChannelsReportSpam) String() string { return proto.CompactTextString(m) }
func (*TLReportChannelsReportSpam) ProtoMessage()    {}
func (*TLReportChannelsReportSpam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef0beb11a60b0a5, []int{5}
}
func (m *TLReportChannelsReportSpam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReportChannelsReportSpam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReportChannelsReportSpam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLReportChannelsReportSpam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReportChannelsReportSpam.Merge(m, src)
}
func (m *TLReportChannelsReportSpam) XXX_Size() int {
	return m.Size()
}
func (m *TLReportChannelsReportSpam) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReportChannelsReportSpam.DiscardUnknown(m)
}

var xxx_messageInfo_TLReportChannelsReportSpam proto.InternalMessageInfo

func (m *TLReportChannelsReportSpam) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLReportChannelsReportSpam) GetReporter() int64 {
	if m != nil {
		return m.Reporter
	}
	return 0
}

func (m *TLReportChannelsReportSpam) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *TLReportChannelsReportSpam) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLReportChannelsReportSpam) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterEnum("report.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*TLReportAccountReportPeer)(nil), "report.TL_report_accountReportPeer")
	proto.RegisterType((*TLReportAccountReportProfilePhoto)(nil), "report.TL_report_accountReportProfilePhoto")
	proto.RegisterType((*TLReportMessagesReportSpam)(nil), "report.TL_report_messagesReportSpam")
	proto.RegisterType((*TLReportMessagesReport)(nil), "report.TL_report_messagesReport")
	proto.RegisterType((*TLReportMessagesReportEncryptedSpam)(nil), "report.TL_report_messagesReportEncryptedSpam")
	proto.RegisterType((*TLReportChannelsReportSpam)(nil), "report.TL_report_channelsReportSpam")
}

func init() { proto.RegisterFile("report.tl.proto", fileDescriptor_2ef0beb11a60b0a5) }

var fileDescriptor_2ef0beb11a60b0a5 = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x31, 0x6c, 0xd3, 0x4a,
	0x18, 0xee, 0x25, 0x6d, 0x9c, 0xfc, 0x55, 0xfb, 0xf2, 0xac, 0x57, 0xd5, 0x4d, 0xdf, 0xcb, 0xb3,
	0x52, 0x28, 0x16, 0x10, 0x07, 0xa5, 0x03, 0x33, 0x8d, 0x18, 0x0a, 0x55, 0x89, 0xdc, 0x22, 0x24,
	0x96, 0xe0, 0x38, 0x57, 0xc7, 0x52, 0xec, 0xb3, 0xce, 0x0e, 0x28, 0xac, 0x20, 0x84, 0x90, 0x58,
	0x50, 0x19, 0x10, 0x13, 0x42, 0x08, 0xb1, 0x74, 0x60, 0xaa, 0x84, 0x04, 0x8c, 0x0c, 0x0c, 0xac,
	0x6c, 0xd0, 0x85, 0x81, 0x05, 0x98, 0x90, 0x90, 0x08, 0xf2, 0xd9, 0x69, 0x6a, 0x5c, 0x27, 0x20,
	0x51, 0xa9, 0x53, 0xee, 0xff, 0xbf, 0xcf, 0xff, 0x7d, 0xf7, 0xfd, 0x77, 0x7f, 0xe0, 0x2f, 0x8a,
	0x6d, 0x42, 0x5d, 0xd9, 0x6d, 0xc9, 0x36, 0x25, 0x2e, 0xe1, 0x53, 0x7e, 0x22, 0x57, 0xd4, 0x0d,
	0xb7, 0xd9, 0xae, 0xcb, 0x1a, 0x31, 0x4b, 0x3a, 0xd1, 0x49, 0x89, 0xc1, 0xf5, 0xf6, 0x3a, 0x8b,
	0x58, 0xc0, 0x56, 0xfe, 0x67, 0xb9, 0xbc, 0x4e, 0x88, 0xde, 0xc2, 0x7d, 0xd6, 0x15, 0xaa, 0xda,
	0x36, 0xa6, 0x4e, 0x80, 0xe7, 0x1c, 0xad, 0x89, 0x4d, 0xd5, 0xdb, 0x47, 0x23, 0x14, 0xd7, 0xdc,
	0x8e, 0x8d, 0x7b, 0xd8, 0x4c, 0x1f, 0x73, 0xa9, 0x6a, 0x39, 0x4c, 0x90, 0x0f, 0xfd, 0xd3, 0x87,
	0x9c, 0x8e, 0xa5, 0xf9, 0xd9, 0xc2, 0x67, 0x04, 0xb3, 0x6b, 0xcb, 0x35, 0x5f, 0x69, 0x4d, 0xd5,
	0x34, 0xd2, 0xb6, 0x5c, 0x85, 0x45, 0x55, 0x8c, 0x29, 0x7f, 0x12, 0xc6, 0x35, 0x62, 0x39, 0x2e,
	0x6d, 0x6b, 0x2e, 0xa1, 0x02, 0x12, 0x91, 0x34, 0x59, 0x9e, 0x92, 0x83, 0xa3, 0xae, 0x2d, 0x57,
	0xfa, 0xa0, 0xb2, 0x9b, 0xc9, 0xe7, 0x20, 0xed, 0x93, 0x30, 0x15, 0x92, 0x22, 0x92, 0x92, 0xca,
	0x4e, 0xcc, 0xcf, 0x42, 0xc6, 0xc6, 0x98, 0x32, 0xe5, 0xc2, 0xa8, 0x88, 0xa4, 0x31, 0x25, 0xed,
	0x25, 0xd6, 0x3a, 0x36, 0xe6, 0xa7, 0x81, 0x63, 0xa0, 0xd1, 0x10, 0xc6, 0xd8, 0x77, 0x29, 0x2f,
	0x5c, 0x6a, 0xf0, 0x45, 0x48, 0x51, 0xac, 0x3a, 0xc4, 0x12, 0x52, 0x22, 0x92, 0xc6, 0xcb, 0x53,
	0xb2, 0xe9, 0xb2, 0x43, 0xc8, 0xbe, 0x5e, 0x85, 0x81, 0x4a, 0x40, 0xe2, 0x05, 0xe0, 0x4c, 0xec,
	0x38, 0xaa, 0x8e, 0x05, 0x4e, 0x44, 0x52, 0x46, 0xe9, 0x85, 0x85, 0x8d, 0x04, 0xcc, 0xc5, 0x9d,
	0x99, 0x92, 0x75, 0xa3, 0x85, 0xab, 0x4d, 0xaf, 0x7f, 0x07, 0xe8, 0xec, 0x33, 0x90, 0xb6, 0x3d,
	0x4d, 0x1e, 0x92, 0x62, 0x08, 0xc7, 0xe2, 0x90, 0x2d, 0xdc, 0x6f, 0xda, 0x92, 0x0e, 0xdb, 0xf2,
	0x04, 0xc1, 0xbf, 0x7d, 0x5b, 0x82, 0xac, 0xe3, 0x17, 0x59, 0xb5, 0x55, 0xf3, 0x00, 0xf9, 0x51,
	0xf8, 0x8e, 0x40, 0x88, 0xd3, 0x7a, 0x90, 0xfa, 0x36, 0x09, 0x09, 0xd6, 0xb1, 0xa4, 0x34, 0xa6,
	0x24, 0x8c, 0x3f, 0xd8, 0xac, 0xbb, 0x08, 0x0e, 0xc7, 0x19, 0x70, 0xda, 0xd2, 0x68, 0xc7, 0x76,
	0x71, 0x63, 0xff, 0xba, 0x36, 0x0d, 0x9c, 0xd6, 0x54, 0x5d, 0xef, 0xc0, 0xbe, 0x17, 0x29, 0x2f,
	0x5c, 0x6a, 0x14, 0x9e, 0x85, 0x2e, 0x91, 0xd6, 0x54, 0x2d, 0x0b, 0xb7, 0xf6, 0xfd, 0x12, 0xfd,
	0x07, 0x10, 0x6c, 0xd5, 0x53, 0x94, 0x54, 0x32, 0x41, 0x66, 0xa9, 0xe1, 0xa9, 0x6d, 0x3b, 0xa1,
	0xf6, 0x78, 0x61, 0xb4, 0x3d, 0x47, 0xb7, 0x12, 0x30, 0x11, 0x92, 0xc0, 0xff, 0x0d, 0x13, 0x15,
	0xa5, 0xb2, 0x50, 0xae, 0x9d, 0x5f, 0x39, 0xbb, 0x72, 0xee, 0xc2, 0x4a, 0x76, 0x84, 0x9f, 0x87,
	0xbc, 0x9f, 0x8a, 0x1b, 0x9a, 0xd9, 0xcd, 0x07, 0x6f, 0x37, 0x39, 0x7e, 0x01, 0xe6, 0x07, 0xf0,
	0x76, 0x0d, 0x9a, 0xec, 0x8d, 0xa7, 0x2f, 0x5e, 0x7e, 0xeb, 0x76, 0xbb, 0x5d, 0xc4, 0x1f, 0x87,
	0xff, 0x43, 0x1f, 0x45, 0x9f, 0x61, 0xf6, 0xd6, 0xf5, 0x6b, 0xb7, 0xbf, 0xfa, 0x6c, 0x09, 0x66,
	0x07, 0xb0, 0xb3, 0xf7, 0x1f, 0x3d, 0xde, 0x08, 0xea, 0x9e, 0x00, 0x69, 0x00, 0x33, 0x74, 0x63,
	0xb2, 0x1f, 0xbe, 0x6c, 0x7e, 0x4c, 0xf0, 0x47, 0x7e, 0x52, 0x12, 0xed, 0x65, 0x76, 0xeb, 0xce,
	0xeb, 0xe7, 0x5c, 0x6e, 0xf4, 0xe6, 0xc3, 0xfc, 0x48, 0xf9, 0xde, 0x28, 0x64, 0x94, 0x6a, 0x25,
	0x78, 0x82, 0x55, 0x10, 0x62, 0xff, 0x52, 0xe6, 0xfa, 0xcd, 0x8e, 0xb5, 0x30, 0x37, 0xb1, 0xf3,
	0x30, 0x16, 0x09, 0x69, 0x15, 0x46, 0xf8, 0x4b, 0x20, 0x0e, 0x1d, 0xd8, 0xc7, 0x86, 0x55, 0xde,
	0x45, 0x8e, 0xee, 0xa0, 0xc0, 0x4c, 0xfc, 0xec, 0x3b, 0x14, 0x2d, 0x1d, 0x65, 0x45, 0x6b, 0x9e,
	0x81, 0xa9, 0xbd, 0x67, 0x94, 0x38, 0xac, 0x5e, 0xb4, 0x56, 0x03, 0x0a, 0xbf, 0xf0, 0xdc, 0x8b,
	0xc3, 0x0a, 0x87, 0xe8, 0x83, 0x5c, 0xd8, 0xe3, 0xf1, 0xee, 0xe1, 0x42, 0x94, 0x15, 0xa9, 0xb9,
	0xb8, 0xfa, 0xe9, 0x7d, 0x1e, 0xbd, 0xda, 0xce, 0xa3, 0x37, 0xdb, 0x79, 0xf4, 0x6e, 0x3b, 0x8f,
	0x2e, 0x9e, 0x72, 0xb1, 0x6a, 0xea, 0x54, 0x35, 0x65, 0x83, 0x94, 0x7a, 0xeb, 0xa2, 0x83, 0xe9,
	0x65, 0x4c, 0x4b, 0xaa, 0x6d, 0x97, 0xbc, 0xa5, 0xa1, 0xe1, 0x52, 0xdd, 0xb8, 0x5a, 0xeb, 0xad,
	0xfd, 0x1d, 0x83, 0x9f, 0x7a, 0x8a, 0x6d, 0xb1, 0xf0, 0x23, 0x00, 0x00, 0xff, 0xff, 0x94, 0xb6,
	0x67, 0x76, 0x77, 0x09, 0x00, 0x00,
}

func (this *TLReportAccountReportPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&report.TLReportAccountReportPeer{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Reporter: "+fmt.Sprintf("%#v", this.Reporter)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.Reason != nil {
		s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	}
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLReportAccountReportProfilePhoto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&report.TLReportAccountReportProfilePhoto{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Reporter: "+fmt.Sprintf("%#v", this.Reporter)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "PhotoId: "+fmt.Sprintf("%#v", this.PhotoId)+",\n")
	if this.Reason != nil {
		s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	}
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLReportMessagesReportSpam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&report.TLReportMessagesReportSpam{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Reporter: "+fmt.Sprintf("%#v", this.Reporter)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLReportMessagesReport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&report.TLReportMessagesReport{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Reporter: "+fmt.Sprintf("%#v", this.Reporter)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Reason != nil {
		s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	}
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLReportMessagesReportEncryptedSpam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&report.TLReportMessagesReportEncryptedSpam{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Reporter: "+fmt.Sprintf("%#v", this.Reporter)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLReportChannelsReportSpam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&report.TLReportChannelsReportSpam{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Reporter: "+fmt.Sprintf("%#v", this.Reporter)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReportTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCReportClient is the client API for RPCReport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCReportClient interface {
	// report.accountReportPeer reporter:long peer_type:int peer_id:long reason:ReportReason message:string = Bool;
	ReportAccountReportPeer(ctx context.Context, in *TLReportAccountReportPeer, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// report.accountReportProfilePhoto reporter:long peer_type:int peer_id:long photo_id:long reason:ReportReason message:string = Bool;
	ReportAccountReportProfilePhoto(ctx context.Context, in *TLReportAccountReportProfilePhoto, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// report.messagesReportSpam reporter:long peer_type:int peer_id:long = Bool;
	ReportMessagesReportSpam(ctx context.Context, in *TLReportMessagesReportSpam, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// report.messagesReport reporter:long peer_type:int peer_id:long id:Vector<int> reason:ReportReason message:string = Bool;
	ReportMessagesReport(ctx context.Context, in *TLReportMessagesReport, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// report.messagesReportEncryptedSpam reporter:long chat_id:int = Bool;
	ReportMessagesReportEncryptedSpam(ctx context.Context, in *TLReportMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// report.channelsReportSpam reporter:long channel_id:long user_id:long id:Vector<int> = Bool;
	ReportChannelsReportSpam(ctx context.Context, in *TLReportChannelsReportSpam, opts ...grpc.CallOption) (*mtproto.Bool, error)
}

type rPCReportClient struct {
	cc *grpc.ClientConn
}

func NewRPCReportClient(cc *grpc.ClientConn) RPCReportClient {
	return &rPCReportClient{cc}
}

func (c *rPCReportClient) ReportAccountReportPeer(ctx context.Context, in *TLReportAccountReportPeer, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/report.RPCReport/report_accountReportPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportClient) ReportAccountReportProfilePhoto(ctx context.Context, in *TLReportAccountReportProfilePhoto, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/report.RPCReport/report_accountReportProfilePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportClient) ReportMessagesReportSpam(ctx context.Context, in *TLReportMessagesReportSpam, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/report.RPCReport/report_messagesReportSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportClient) ReportMessagesReport(ctx context.Context, in *TLReportMessagesReport, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/report.RPCReport/report_messagesReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportClient) ReportMessagesReportEncryptedSpam(ctx context.Context, in *TLReportMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/report.RPCReport/report_messagesReportEncryptedSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportClient) ReportChannelsReportSpam(ctx context.Context, in *TLReportChannelsReportSpam, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/report.RPCReport/report_channelsReportSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCReportServer is the server API for RPCReport service.
type RPCReportServer interface {
	// report.accountReportPeer reporter:long peer_type:int peer_id:long reason:ReportReason message:string = Bool;
	ReportAccountReportPeer(context.Context, *TLReportAccountReportPeer) (*mtproto.Bool, error)
	// report.accountReportProfilePhoto reporter:long peer_type:int peer_id:long photo_id:long reason:ReportReason message:string = Bool;
	ReportAccountReportProfilePhoto(context.Context, *TLReportAccountReportProfilePhoto) (*mtproto.Bool, error)
	// report.messagesReportSpam reporter:long peer_type:int peer_id:long = Bool;
	ReportMessagesReportSpam(context.Context, *TLReportMessagesReportSpam) (*mtproto.Bool, error)
	// report.messagesReport reporter:long peer_type:int peer_id:long id:Vector<int> reason:ReportReason message:string = Bool;
	ReportMessagesReport(context.Context, *TLReportMessagesReport) (*mtproto.Bool, error)
	// report.messagesReportEncryptedSpam reporter:long chat_id:int = Bool;
	ReportMessagesReportEncryptedSpam(context.Context, *TLReportMessagesReportEncryptedSpam) (*mtproto.Bool, error)
	// report.channelsReportSpam reporter:long channel_id:long user_id:long id:Vector<int> = Bool;
	ReportChannelsReportSpam(context.Context, *TLReportChannelsReportSpam) (*mtproto.Bool, error)
}

// UnimplementedRPCReportServer can be embedded to have forward compatible implementations.
type UnimplementedRPCReportServer struct {
}

func (*UnimplementedRPCReportServer) ReportAccountReportPeer(ctx context.Context, req *TLReportAccountReportPeer) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAccountReportPeer not implemented")
}
func (*UnimplementedRPCReportServer) ReportAccountReportProfilePhoto(ctx context.Context, req *TLReportAccountReportProfilePhoto) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAccountReportProfilePhoto not implemented")
}
func (*UnimplementedRPCReportServer) ReportMessagesReportSpam(ctx context.Context, req *TLReportMessagesReportSpam) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMessagesReportSpam not implemented")
}
func (*UnimplementedRPCReportServer) ReportMessagesReport(ctx context.Context, req *TLReportMessagesReport) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMessagesReport not implemented")
}
func (*UnimplementedRPCReportServer) ReportMessagesReportEncryptedSpam(ctx context.Context, req *TLReportMessagesReportEncryptedSpam) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMessagesReportEncryptedSpam not implemented")
}
func (*UnimplementedRPCReportServer) ReportChannelsReportSpam(ctx context.Context, req *TLReportChannelsReportSpam) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportChannelsReportSpam not implemented")
}

func RegisterRPCReportServer(s *grpc.Server, srv RPCReportServer) {
	s.RegisterService(&_RPCReport_serviceDesc, srv)
}

func _RPCReport_ReportAccountReportPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReportAccountReportPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportServer).ReportAccountReportPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/report.RPCReport/ReportAccountReportPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportServer).ReportAccountReportPeer(ctx, req.(*TLReportAccountReportPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReport_ReportAccountReportProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReportAccountReportProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportServer).ReportAccountReportProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/report.RPCReport/ReportAccountReportProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportServer).ReportAccountReportProfilePhoto(ctx, req.(*TLReportAccountReportProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReport_ReportMessagesReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReportMessagesReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportServer).ReportMessagesReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/report.RPCReport/ReportMessagesReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportServer).ReportMessagesReportSpam(ctx, req.(*TLReportMessagesReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReport_ReportMessagesReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReportMessagesReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportServer).ReportMessagesReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/report.RPCReport/ReportMessagesReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportServer).ReportMessagesReport(ctx, req.(*TLReportMessagesReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReport_ReportMessagesReportEncryptedSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReportMessagesReportEncryptedSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportServer).ReportMessagesReportEncryptedSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/report.RPCReport/ReportMessagesReportEncryptedSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportServer).ReportMessagesReportEncryptedSpam(ctx, req.(*TLReportMessagesReportEncryptedSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReport_ReportChannelsReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLReportChannelsReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportServer).ReportChannelsReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/report.RPCReport/ReportChannelsReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportServer).ReportChannelsReportSpam(ctx, req.(*TLReportChannelsReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCReport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "report.RPCReport",
	HandlerType: (*RPCReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "report_accountReportPeer",
			Handler:    _RPCReport_ReportAccountReportPeer_Handler,
		},
		{
			MethodName: "report_accountReportProfilePhoto",
			Handler:    _RPCReport_ReportAccountReportProfilePhoto_Handler,
		},
		{
			MethodName: "report_messagesReportSpam",
			Handler:    _RPCReport_ReportMessagesReportSpam_Handler,
		},
		{
			MethodName: "report_messagesReport",
			Handler:    _RPCReport_ReportMessagesReport_Handler,
		},
		{
			MethodName: "report_messagesReportEncryptedSpam",
			Handler:    _RPCReport_ReportMessagesReportEncryptedSpam_Handler,
		},
		{
			MethodName: "report_channelsReportSpam",
			Handler:    _RPCReport_ReportChannelsReportSpam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report.tl.proto",
}

func (m *TLReportAccountReportPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReportAccountReportPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLReportAccountReportPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintReportTl(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Reason != nil {
		{
			size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PeerId != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.Reporter != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Reporter))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLReportAccountReportProfilePhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReportAccountReportProfilePhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLReportAccountReportProfilePhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintReportTl(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	if m.Reason != nil {
		{
			size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PhotoId != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.PhotoId))
		i--
		dAtA[i] = 0x30
	}
	if m.PeerId != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.Reporter != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Reporter))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLReportMessagesReportSpam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReportMessagesReportSpam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLReportMessagesReportSpam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.Reporter != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Reporter))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLReportMessagesReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReportMessagesReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLReportMessagesReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintReportTl(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	if m.Reason != nil {
		{
			size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Id) > 0 {
		dAtA5 := make([]byte, len(m.Id)*10)
		var j4 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintReportTl(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x32
	}
	if m.PeerId != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PeerType != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.Reporter != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Reporter))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLReportMessagesReportEncryptedSpam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReportMessagesReportEncryptedSpam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLReportMessagesReportEncryptedSpam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChatId != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.Reporter != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Reporter))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLReportChannelsReportSpam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReportChannelsReportSpam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLReportChannelsReportSpam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA7 := make([]byte, len(m.Id)*10)
		var j6 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintReportTl(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x32
	}
	if m.UserId != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if m.ChannelId != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.Reporter != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Reporter))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintReportTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReportTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovReportTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TLReportAccountReportPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovReportTl(uint64(m.Constructor))
	}
	if m.Reporter != 0 {
		n += 1 + sovReportTl(uint64(m.Reporter))
	}
	if m.PeerType != 0 {
		n += 1 + sovReportTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovReportTl(uint64(m.PeerId))
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovReportTl(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovReportTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLReportAccountReportProfilePhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovReportTl(uint64(m.Constructor))
	}
	if m.Reporter != 0 {
		n += 1 + sovReportTl(uint64(m.Reporter))
	}
	if m.PeerType != 0 {
		n += 1 + sovReportTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovReportTl(uint64(m.PeerId))
	}
	if m.PhotoId != 0 {
		n += 1 + sovReportTl(uint64(m.PhotoId))
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovReportTl(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovReportTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLReportMessagesReportSpam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovReportTl(uint64(m.Constructor))
	}
	if m.Reporter != 0 {
		n += 1 + sovReportTl(uint64(m.Reporter))
	}
	if m.PeerType != 0 {
		n += 1 + sovReportTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovReportTl(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLReportMessagesReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovReportTl(uint64(m.Constructor))
	}
	if m.Reporter != 0 {
		n += 1 + sovReportTl(uint64(m.Reporter))
	}
	if m.PeerType != 0 {
		n += 1 + sovReportTl(uint64(m.PeerType))
	}
	if m.PeerId != 0 {
		n += 1 + sovReportTl(uint64(m.PeerId))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovReportTl(uint64(e))
		}
		n += 1 + sovReportTl(uint64(l)) + l
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovReportTl(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovReportTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLReportMessagesReportEncryptedSpam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovReportTl(uint64(m.Constructor))
	}
	if m.Reporter != 0 {
		n += 1 + sovReportTl(uint64(m.Reporter))
	}
	if m.ChatId != 0 {
		n += 1 + sovReportTl(uint64(m.ChatId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLReportChannelsReportSpam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovReportTl(uint64(m.Constructor))
	}
	if m.Reporter != 0 {
		n += 1 + sovReportTl(uint64(m.Reporter))
	}
	if m.ChannelId != 0 {
		n += 1 + sovReportTl(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovReportTl(uint64(m.UserId))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovReportTl(uint64(e))
		}
		n += 1 + sovReportTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReportTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReportTl(x uint64) (n int) {
	return sovReportTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TLReportAccountReportPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_report_accountReportPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_report_accountReportPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			m.Reporter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reporter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &mtproto.ReportReason{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLReportAccountReportProfilePhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_report_accountReportProfilePhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_report_accountReportProfilePhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			m.Reporter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reporter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoId", wireType)
			}
			m.PhotoId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &mtproto.ReportReason{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLReportMessagesReportSpam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_report_messagesReportSpam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_report_messagesReportSpam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			m.Reporter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reporter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReportTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLReportMessagesReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_report_messagesReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_report_messagesReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			m.Reporter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reporter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReportTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReportTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &mtproto.ReportReason{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLReportMessagesReportEncryptedSpam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_report_messagesReportEncryptedSpam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_report_messagesReportEncryptedSpam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			m.Reporter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reporter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReportTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLReportChannelsReportSpam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_report_channelsReportSpam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_report_channelsReportSpam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			m.Reporter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reporter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReportTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReportTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReportTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReportTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReportTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReportTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReportTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReportTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReportTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReportTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReportTl = fmt.Errorf("proto: unexpected end of group")
)
