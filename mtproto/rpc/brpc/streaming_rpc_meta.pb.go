// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streaming_rpc_meta.proto

package brpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FrameType int32

const (
	FrameType_FRAME_TYPE_UNKNOWN  FrameType = 0
	FrameType_FRAME_TYPE_RST      FrameType = 1
	FrameType_FRAME_TYPE_CLOSE    FrameType = 2
	FrameType_FRAME_TYPE_DATA     FrameType = 3
	FrameType_FRAME_TYPE_FEEDBACK FrameType = 4
)

var FrameType_name = map[int32]string{
	0: "FRAME_TYPE_UNKNOWN",
	1: "FRAME_TYPE_RST",
	2: "FRAME_TYPE_CLOSE",
	3: "FRAME_TYPE_DATA",
	4: "FRAME_TYPE_FEEDBACK",
}
var FrameType_value = map[string]int32{
	"FRAME_TYPE_UNKNOWN":  0,
	"FRAME_TYPE_RST":      1,
	"FRAME_TYPE_CLOSE":    2,
	"FRAME_TYPE_DATA":     3,
	"FRAME_TYPE_FEEDBACK": 4,
}

func (x FrameType) Enum() *FrameType {
	p := new(FrameType)
	*p = x
	return p
}
func (x FrameType) String() string {
	return proto.EnumName(FrameType_name, int32(x))
}
func (x *FrameType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FrameType_value, data, "FrameType")
	if err != nil {
		return err
	}
	*x = FrameType(value)
	return nil
}
func (FrameType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_streaming_rpc_meta_4e95ff42ec032e6c, []int{0}
}

type StreamSettings struct {
	StreamId             *int64   `protobuf:"varint,1,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	NeedFeedback         *bool    `protobuf:"varint,2,opt,name=need_feedback,json=needFeedback,def=0" json:"need_feedback,omitempty"`
	Writable             *bool    `protobuf:"varint,3,opt,name=writable,def=0" json:"writable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamSettings) Reset()         { *m = StreamSettings{} }
func (m *StreamSettings) String() string { return proto.CompactTextString(m) }
func (*StreamSettings) ProtoMessage()    {}
func (*StreamSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_streaming_rpc_meta_4e95ff42ec032e6c, []int{0}
}
func (m *StreamSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamSettings.Unmarshal(m, b)
}
func (m *StreamSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamSettings.Marshal(b, m, deterministic)
}
func (dst *StreamSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamSettings.Merge(dst, src)
}
func (m *StreamSettings) XXX_Size() int {
	return xxx_messageInfo_StreamSettings.Size(m)
}
func (m *StreamSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamSettings.DiscardUnknown(m)
}

var xxx_messageInfo_StreamSettings proto.InternalMessageInfo

const Default_StreamSettings_NeedFeedback bool = false
const Default_StreamSettings_Writable bool = false

func (m *StreamSettings) GetStreamId() int64 {
	if m != nil && m.StreamId != nil {
		return *m.StreamId
	}
	return 0
}

func (m *StreamSettings) GetNeedFeedback() bool {
	if m != nil && m.NeedFeedback != nil {
		return *m.NeedFeedback
	}
	return Default_StreamSettings_NeedFeedback
}

func (m *StreamSettings) GetWritable() bool {
	if m != nil && m.Writable != nil {
		return *m.Writable
	}
	return Default_StreamSettings_Writable
}

type StreamFrameMeta struct {
	StreamId             *int64     `protobuf:"varint,1,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	SourceStreamId       *int64     `protobuf:"varint,2,opt,name=source_stream_id,json=sourceStreamId" json:"source_stream_id,omitempty"`
	FrameType            *FrameType `protobuf:"varint,3,opt,name=frame_type,json=frameType,enum=brpc.FrameType" json:"frame_type,omitempty"`
	HasContinuation      *bool      `protobuf:"varint,4,opt,name=has_continuation,json=hasContinuation" json:"has_continuation,omitempty"`
	Feedback             *Feedback  `protobuf:"bytes,5,opt,name=feedback" json:"feedback,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StreamFrameMeta) Reset()         { *m = StreamFrameMeta{} }
func (m *StreamFrameMeta) String() string { return proto.CompactTextString(m) }
func (*StreamFrameMeta) ProtoMessage()    {}
func (*StreamFrameMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_streaming_rpc_meta_4e95ff42ec032e6c, []int{1}
}
func (m *StreamFrameMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamFrameMeta.Unmarshal(m, b)
}
func (m *StreamFrameMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamFrameMeta.Marshal(b, m, deterministic)
}
func (dst *StreamFrameMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamFrameMeta.Merge(dst, src)
}
func (m *StreamFrameMeta) XXX_Size() int {
	return xxx_messageInfo_StreamFrameMeta.Size(m)
}
func (m *StreamFrameMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamFrameMeta.DiscardUnknown(m)
}

var xxx_messageInfo_StreamFrameMeta proto.InternalMessageInfo

func (m *StreamFrameMeta) GetStreamId() int64 {
	if m != nil && m.StreamId != nil {
		return *m.StreamId
	}
	return 0
}

func (m *StreamFrameMeta) GetSourceStreamId() int64 {
	if m != nil && m.SourceStreamId != nil {
		return *m.SourceStreamId
	}
	return 0
}

func (m *StreamFrameMeta) GetFrameType() FrameType {
	if m != nil && m.FrameType != nil {
		return *m.FrameType
	}
	return FrameType_FRAME_TYPE_UNKNOWN
}

func (m *StreamFrameMeta) GetHasContinuation() bool {
	if m != nil && m.HasContinuation != nil {
		return *m.HasContinuation
	}
	return false
}

func (m *StreamFrameMeta) GetFeedback() *Feedback {
	if m != nil {
		return m.Feedback
	}
	return nil
}

type Feedback struct {
	ConsumedSize         *int64   `protobuf:"varint,1,opt,name=consumed_size,json=consumedSize" json:"consumed_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feedback) Reset()         { *m = Feedback{} }
func (m *Feedback) String() string { return proto.CompactTextString(m) }
func (*Feedback) ProtoMessage()    {}
func (*Feedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_streaming_rpc_meta_4e95ff42ec032e6c, []int{2}
}
func (m *Feedback) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feedback.Unmarshal(m, b)
}
func (m *Feedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feedback.Marshal(b, m, deterministic)
}
func (dst *Feedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feedback.Merge(dst, src)
}
func (m *Feedback) XXX_Size() int {
	return xxx_messageInfo_Feedback.Size(m)
}
func (m *Feedback) XXX_DiscardUnknown() {
	xxx_messageInfo_Feedback.DiscardUnknown(m)
}

var xxx_messageInfo_Feedback proto.InternalMessageInfo

func (m *Feedback) GetConsumedSize() int64 {
	if m != nil && m.ConsumedSize != nil {
		return *m.ConsumedSize
	}
	return 0
}

func init() {
	proto.RegisterType((*StreamSettings)(nil), "brpc.StreamSettings")
	proto.RegisterType((*StreamFrameMeta)(nil), "brpc.StreamFrameMeta")
	proto.RegisterType((*Feedback)(nil), "brpc.Feedback")
	proto.RegisterEnum("brpc.FrameType", FrameType_name, FrameType_value)
}

func init() {
	proto.RegisterFile("streaming_rpc_meta.proto", fileDescriptor_streaming_rpc_meta_4e95ff42ec032e6c)
}

var fileDescriptor_streaming_rpc_meta_4e95ff42ec032e6c = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0xd3, 0x40,
	0x10, 0x85, 0x71, 0x92, 0x4a, 0xce, 0xd0, 0x38, 0xcb, 0x16, 0x81, 0x05, 0x42, 0x0a, 0xe1, 0x12,
	0x72, 0x08, 0x52, 0x8f, 0xdc, 0x92, 0xd4, 0x96, 0x50, 0x69, 0x5a, 0xad, 0x8d, 0x10, 0xa7, 0xd5,
	0x66, 0x3d, 0x6e, 0x57, 0xd4, 0x5e, 0xcb, 0xbb, 0x11, 0x6a, 0xe1, 0xbf, 0xf2, 0x57, 0x90, 0xed,
	0xd8, 0xf8, 0xd4, 0xdb, 0xea, 0x9b, 0xd9, 0x79, 0x6f, 0x9e, 0x06, 0x7c, 0x63, 0x4b, 0x14, 0x99,
	0xca, 0x6f, 0x79, 0x59, 0x48, 0x9e, 0xa1, 0x15, 0xab, 0xa2, 0xd4, 0x56, 0xd3, 0xd1, 0xbe, 0x2c,
	0xe4, 0x9b, 0x89, 0x2e, 0xac, 0xd2, 0xb9, 0x69, 0xe0, 0xfc, 0x0f, 0x78, 0x51, 0xfd, 0x21, 0x42,
	0x6b, 0x55, 0x7e, 0x6b, 0xe8, 0x5b, 0x18, 0x37, 0x23, 0xb8, 0x4a, 0x7c, 0x67, 0x36, 0x58, 0x0c,
	0x99, 0xdb, 0x80, 0x2f, 0x09, 0x5d, 0xc2, 0x24, 0x47, 0x4c, 0x78, 0x8a, 0x98, 0xec, 0x85, 0xfc,
	0xe9, 0x0f, 0x66, 0xce, 0xc2, 0xfd, 0x7c, 0x92, 0x8a, 0x7b, 0x83, 0xec, 0xb4, 0xaa, 0x85, 0xc7,
	0x12, 0x7d, 0x0f, 0xee, 0xaf, 0x52, 0x59, 0xb1, 0xbf, 0x47, 0x7f, 0xd8, 0x6f, 0xeb, 0xf0, 0xfc,
	0xaf, 0x03, 0xd3, 0x46, 0x3e, 0x2c, 0x45, 0x86, 0x57, 0x68, 0xc5, 0xd3, 0xfa, 0x0b, 0x20, 0x46,
	0x1f, 0x4a, 0x89, 0xfc, 0x7f, 0x4f, 0x65, 0x61, 0xc8, 0xbc, 0x86, 0x47, 0x6d, 0xe7, 0x0a, 0x20,
	0xad, 0x66, 0x72, 0xfb, 0x50, 0x34, 0xfa, 0xde, 0xf9, 0x74, 0x55, 0x45, 0xb0, 0xaa, 0xb5, 0xe2,
	0x87, 0x02, 0xd9, 0x38, 0x6d, 0x9f, 0xf4, 0x23, 0x90, 0x3b, 0x61, 0xb8, 0xd4, 0xb9, 0x55, 0xf9,
	0x41, 0x54, 0x19, 0xf9, 0xa3, 0xca, 0x35, 0x9b, 0xde, 0x09, 0xb3, 0xed, 0x61, 0xba, 0x04, 0xb7,
	0xdb, 0xff, 0x64, 0xe6, 0x2c, 0x9e, 0x9f, 0x7b, 0xc7, 0xc1, 0x47, 0xca, 0xba, 0xfa, 0xfc, 0x13,
	0xb8, 0x5d, 0x20, 0x1f, 0x60, 0x22, 0x75, 0x6e, 0x0e, 0x19, 0x26, 0xdc, 0xa8, 0x47, 0xf4, 0x9d,
	0xda, 0xf9, 0x69, 0x0b, 0x23, 0xf5, 0x88, 0xcb, 0xdf, 0x30, 0xee, 0xfc, 0xd1, 0x57, 0x40, 0x43,
	0xb6, 0xbe, 0x0a, 0x78, 0xfc, 0xe3, 0x26, 0xe0, 0xdf, 0x76, 0x97, 0xbb, 0xeb, 0xef, 0x3b, 0xf2,
	0x8c, 0x52, 0xf0, 0x7a, 0x9c, 0x45, 0x31, 0x71, 0xe8, 0x4b, 0x20, 0x3d, 0xb6, 0xfd, 0x7a, 0x1d,
	0x05, 0x64, 0x40, 0xcf, 0x60, 0xda, 0xa3, 0x17, 0xeb, 0x78, 0x4d, 0x86, 0xf4, 0x35, 0x9c, 0xf5,
	0x60, 0x18, 0x04, 0x17, 0x9b, 0xf5, 0xf6, 0x92, 0x8c, 0x36, 0xef, 0xc0, 0x95, 0x3a, 0xab, 0x97,
	0xd9, 0xbc, 0x88, 0xda, 0x43, 0x62, 0x85, 0xbc, 0xa9, 0x8e, 0xe5, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x81, 0xda, 0x13, 0xac, 0x5c, 0x02, 0x00, 0x00,
}
